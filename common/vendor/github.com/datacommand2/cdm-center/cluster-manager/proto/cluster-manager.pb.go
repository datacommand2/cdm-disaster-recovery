// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: proto/cluster-manager.proto

package cms

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Contents string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Message) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	TotalPage  *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	TotalItems *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{2}
}

func (x *Pagination) GetPage() *wrappers.UInt64Value {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *Pagination) GetTotalPage() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalPage
	}
	return nil
}

func (x *Pagination) GetTotalItems() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalItems
	}
	return nil
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{3}
}

func (x *PublicKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PublicKey) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterConnectionResponse) Reset() {
	*x = ClusterConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnectionResponse) ProtoMessage() {}

func (x *ClusterConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnectionResponse.ProtoReflect.Descriptor instead.
func (*ClusterConnectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterConnectionResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId     uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	OldCredential string `protobuf:"bytes,2,opt,name=old_credential,json=oldCredential,proto3" json:"old_credential,omitempty"`
	NewCredential string `protobuf:"bytes,3,opt,name=new_credential,json=newCredential,proto3" json:"new_credential,omitempty"`
}

func (x *UpdateCredentialRequest) Reset() {
	*x = UpdateCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCredentialRequest) ProtoMessage() {}

func (x *UpdateCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCredentialRequest.ProtoReflect.Descriptor instead.
func (*UpdateCredentialRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCredentialRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateCredentialRequest) GetOldCredential() string {
	if x != nil {
		return x.OldCredential
	}
	return ""
}

func (x *UpdateCredentialRequest) GetNewCredential() string {
	if x != nil {
		return x.NewCredential
	}
	return ""
}

type UpdateCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateCredentialResponse) Reset() {
	*x = UpdateCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCredentialResponse) ProtoMessage() {}

func (x *UpdateCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCredentialResponse.ProtoReflect.Descriptor instead.
func (*UpdateCredentialResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCredentialResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ClusterConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeCode     string `protobuf:"bytes,1,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	ApiServerUrl string `protobuf:"bytes,2,opt,name=api_server_url,json=apiServerUrl,proto3" json:"api_server_url,omitempty"`
	Credential   string `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
	TenantId     string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *ClusterConnectionInfo) Reset() {
	*x = ClusterConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnectionInfo) ProtoMessage() {}

func (x *ClusterConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnectionInfo.ProtoReflect.Descriptor instead.
func (*ClusterConnectionInfo) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterConnectionInfo) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *ClusterConnectionInfo) GetApiServerUrl() string {
	if x != nil {
		return x.ApiServerUrl
	}
	return ""
}

func (x *ClusterConnectionInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *ClusterConnectionInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampInterval    int64 `protobuf:"varint,1,opt,name=timestamp_interval,json=timestampInterval,proto3" json:"timestamp_interval,omitempty"`
	ReservedSyncInterval int64 `protobuf:"varint,2,opt,name=reserved_sync_interval,json=reservedSyncInterval,proto3" json:"reserved_sync_interval,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetTimestampInterval() int64 {
	if x != nil {
		return x.TimestampInterval
	}
	return 0
}

func (x *Config) GetReservedSyncInterval() int64 {
	if x != nil {
		return x.ReservedSyncInterval
	}
	return 0
}

type GetCenterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetCenterConfigRequest) Reset() {
	*x = GetCenterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCenterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCenterConfigRequest) ProtoMessage() {}

func (x *GetCenterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCenterConfigRequest.ProtoReflect.Descriptor instead.
func (*GetCenterConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetCenterConfigRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type GetCenterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *Config  `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCenterConfigResponse) Reset() {
	*x = GetCenterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCenterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCenterConfigResponse) ProtoMessage() {}

func (x *GetCenterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCenterConfigResponse.ProtoReflect.Descriptor instead.
func (*GetCenterConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{10}
}

func (x *GetCenterConfigResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetCenterConfigResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateCenterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64  `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Config    *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateCenterConfigRequest) Reset() {
	*x = UpdateCenterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCenterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCenterConfigRequest) ProtoMessage() {}

func (x *UpdateCenterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCenterConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateCenterConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateCenterConfigRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateCenterConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateCenterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateCenterConfigResponse) Reset() {
	*x = UpdateCenterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCenterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCenterConfigResponse) ProtoMessage() {}

func (x *UpdateCenterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCenterConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateCenterConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCenterConfigResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type StorageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Binary      string `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
	BackendName string `protobuf:"bytes,3,opt,name=backend_name,json=backendName,proto3" json:"backend_name,omitempty"`
	Host        string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Zone        string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdated string `protobuf:"bytes,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Exception   bool   `protobuf:"varint,8,opt,name=exception,proto3" json:"exception,omitempty"`
	Deleted     bool   `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *StorageStatus) Reset() {
	*x = StorageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageStatus) ProtoMessage() {}

func (x *StorageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageStatus.ProtoReflect.Descriptor instead.
func (*StorageStatus) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{13}
}

func (x *StorageStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageStatus) GetBinary() string {
	if x != nil {
		return x.Binary
	}
	return ""
}

func (x *StorageStatus) GetBackendName() string {
	if x != nil {
		return x.BackendName
	}
	return ""
}

func (x *StorageStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StorageStatus) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *StorageStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StorageStatus) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *StorageStatus) GetException() bool {
	if x != nil {
		return x.Exception
	}
	return false
}

func (x *StorageStatus) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type NetworkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Binary      string `protobuf:"bytes,3,opt,name=binary,proto3" json:"binary,omitempty"`
	Host        string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdated string `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Exception   bool   `protobuf:"varint,7,opt,name=exception,proto3" json:"exception,omitempty"`
	Deleted     bool   `protobuf:"varint,8,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *NetworkStatus) Reset() {
	*x = NetworkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStatus) ProtoMessage() {}

func (x *NetworkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStatus.ProtoReflect.Descriptor instead.
func (*NetworkStatus) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkStatus) GetBinary() string {
	if x != nil {
		return x.Binary
	}
	return ""
}

func (x *NetworkStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NetworkStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkStatus) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *NetworkStatus) GetException() bool {
	if x != nil {
		return x.Exception
	}
	return false
}

func (x *NetworkStatus) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type ComputeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Binary      string `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
	Host        string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Zone        string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdated string `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Exception   bool   `protobuf:"varint,7,opt,name=exception,proto3" json:"exception,omitempty"`
	Deleted     bool   `protobuf:"varint,8,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *ComputeStatus) Reset() {
	*x = ComputeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeStatus) ProtoMessage() {}

func (x *ComputeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeStatus.ProtoReflect.Descriptor instead.
func (*ComputeStatus) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ComputeStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComputeStatus) GetBinary() string {
	if x != nil {
		return x.Binary
	}
	return ""
}

func (x *ComputeStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ComputeStatus) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ComputeStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ComputeStatus) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *ComputeStatus) GetException() bool {
	if x != nil {
		return x.Exception
	}
	return false
}

func (x *ComputeStatus) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type Completion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource       string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	ProgressStatus string `protobuf:"bytes,2,opt,name=progress_status,json=progressStatus,proto3" json:"progress_status,omitempty"`
}

func (x *Completion) Reset() {
	*x = Completion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion) ProtoMessage() {}

func (x *Completion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion.ProtoReflect.Descriptor instead.
func (*Completion) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{16}
}

func (x *Completion) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Completion) GetProgressStatus() string {
	if x != nil {
		return x.ProgressStatus
	}
	return ""
}

type CheckClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CheckClusterRequest) Reset() {
	*x = CheckClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckClusterRequest) ProtoMessage() {}

func (x *CheckClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckClusterRequest.ProtoReflect.Descriptor instead.
func (*CheckClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{17}
}

func (x *CheckClusterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type CheckClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Computes     []*ComputeStatus `protobuf:"bytes,1,rep,name=computes,proto3" json:"computes,omitempty"`
	Storages     []*StorageStatus `protobuf:"bytes,2,rep,name=storages,proto3" json:"storages,omitempty"`
	Networks     []*NetworkStatus `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	Status       string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt    string           `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ComputeError string           `protobuf:"bytes,6,opt,name=compute_error,json=computeError,proto3" json:"compute_error,omitempty"`
	StorageError string           `protobuf:"bytes,7,opt,name=storage_error,json=storageError,proto3" json:"storage_error,omitempty"`
	NetworkError string           `protobuf:"bytes,8,opt,name=network_error,json=networkError,proto3" json:"network_error,omitempty"`
	Message      *Message         `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckClusterResponse) Reset() {
	*x = CheckClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckClusterResponse) ProtoMessage() {}

func (x *CheckClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckClusterResponse.ProtoReflect.Descriptor instead.
func (*CheckClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{18}
}

func (x *CheckClusterResponse) GetComputes() []*ComputeStatus {
	if x != nil {
		return x.Computes
	}
	return nil
}

func (x *CheckClusterResponse) GetStorages() []*StorageStatus {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *CheckClusterResponse) GetNetworks() []*NetworkStatus {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *CheckClusterResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CheckClusterResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CheckClusterResponse) GetComputeError() string {
	if x != nil {
		return x.ComputeError
	}
	return ""
}

func (x *CheckClusterResponse) GetStorageError() string {
	if x != nil {
		return x.StorageError
	}
	return ""
}

func (x *CheckClusterResponse) GetNetworkError() string {
	if x != nil {
		return x.NetworkError
	}
	return ""
}

func (x *CheckClusterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SyncClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *SyncClusterRequest) Reset() {
	*x = SyncClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClusterRequest) ProtoMessage() {}

func (x *SyncClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClusterRequest.ProtoReflect.Descriptor instead.
func (*SyncClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{19}
}

func (x *SyncClusterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type SyncClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SyncClusterResponse) Reset() {
	*x = SyncClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClusterResponse) ProtoMessage() {}

func (x *SyncClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClusterResponse.ProtoReflect.Descriptor instead.
func (*SyncClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{20}
}

func (x *SyncClusterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetClusterSyncStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status     string        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Progress   int64         `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	Completion []*Completion `protobuf:"bytes,4,rep,name=completion,proto3" json:"completion,omitempty"`
	Reasons    []*Message    `protobuf:"bytes,5,rep,name=reasons,proto3" json:"reasons,omitempty"`
}

func (x *GetClusterSyncStatusResponse) Reset() {
	*x = GetClusterSyncStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterSyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterSyncStatusResponse) ProtoMessage() {}

func (x *GetClusterSyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterSyncStatusResponse.ProtoReflect.Descriptor instead.
func (*GetClusterSyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{21}
}

func (x *GetClusterSyncStatusResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetClusterSyncStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetClusterSyncStatusResponse) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *GetClusterSyncStatusResponse) GetCompletion() []*Completion {
	if x != nil {
		return x.Completion
	}
	return nil
}

func (x *GetClusterSyncStatusResponse) GetReasons() []*Message {
	if x != nil {
		return x.Reasons
	}
	return nil
}

type SyncExceptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SyncExceptionResponse) Reset() {
	*x = SyncExceptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncExceptionResponse) ProtoMessage() {}

func (x *SyncExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncExceptionResponse.ProtoReflect.Descriptor instead.
func (*SyncExceptionResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{22}
}

func (x *SyncExceptionResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SyncExceptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64           `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Computes  []*ComputeStatus `protobuf:"bytes,2,rep,name=computes,proto3" json:"computes,omitempty"`
	Storages  []*StorageStatus `protobuf:"bytes,3,rep,name=storages,proto3" json:"storages,omitempty"`
	Networks  []*NetworkStatus `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *SyncExceptionRequest) Reset() {
	*x = SyncExceptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncExceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncExceptionRequest) ProtoMessage() {}

func (x *SyncExceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncExceptionRequest.ProtoReflect.Descriptor instead.
func (*SyncExceptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{23}
}

func (x *SyncExceptionRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *SyncExceptionRequest) GetComputes() []*ComputeStatus {
	if x != nil {
		return x.Computes
	}
	return nil
}

func (x *SyncExceptionRequest) GetStorages() []*StorageStatus {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *SyncExceptionRequest) GetNetworks() []*NetworkStatus {
	if x != nil {
		return x.Networks
	}
	return nil
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Remarks     string `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DeletedFlag bool   `protobuf:"varint,5,opt,name=deleted_flag,json=deletedFlag,proto3" json:"deleted_flag,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{24}
}

func (x *Group) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Group) GetDeletedFlag() bool {
	if x != nil {
		return x.DeletedFlag
	}
	return false
}

type ClusterPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	ModeCode string `protobuf:"bytes,2,opt,name=mode_code,json=modeCode,proto3" json:"mode_code,omitempty"`
}

func (x *ClusterPermission) Reset() {
	*x = ClusterPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPermission) ProtoMessage() {}

func (x *ClusterPermission) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPermission.ProtoReflect.Descriptor instead.
func (*ClusterPermission) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{25}
}

func (x *ClusterPermission) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ClusterPermission) GetModeCode() string {
	if x != nil {
		return x.ModeCode
	}
	return ""
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerGroup     *Group               `protobuf:"bytes,2,opt,name=owner_group,json=ownerGroup,proto3" json:"owner_group,omitempty"`
	Permissions    []*ClusterPermission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Name           string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	StateCode      string               `protobuf:"bytes,5,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	TypeCode       string               `protobuf:"bytes,6,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	ApiServerUrl   string               `protobuf:"bytes,7,opt,name=api_server_url,json=apiServerUrl,proto3" json:"api_server_url,omitempty"`
	Credential     string               `protobuf:"bytes,8,opt,name=credential,proto3" json:"credential,omitempty"`
	Remarks        string               `protobuf:"bytes,9,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreatedAt      int64                `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      int64                `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SynchronizedAt int64                `protobuf:"varint,12,opt,name=synchronized_at,json=synchronizedAt,proto3" json:"synchronized_at,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{26}
}

func (x *Cluster) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cluster) GetOwnerGroup() *Group {
	if x != nil {
		return x.OwnerGroup
	}
	return nil
}

func (x *Cluster) GetPermissions() []*ClusterPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *Cluster) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *Cluster) GetApiServerUrl() string {
	if x != nil {
		return x.ApiServerUrl
	}
	return ""
}

func (x *Cluster) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *Cluster) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Cluster) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Cluster) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Cluster) GetSynchronizedAt() int64 {
	if x != nil {
		return x.SynchronizedAt
	}
	return 0
}

type ClusterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters   []*Cluster  `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterListResponse) Reset() {
	*x = ClusterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListResponse) ProtoMessage() {}

func (x *ClusterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListResponse.ProtoReflect.Descriptor instead.
func (*ClusterListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{27}
}

func (x *ClusterListResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ClusterListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeCode     string                `protobuf:"bytes,1,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerGroupId uint64                `protobuf:"varint,3,opt,name=owner_group_id,json=ownerGroupId,proto3" json:"owner_group_id,omitempty"`
	Limit        *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync         bool                  `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterListRequest) Reset() {
	*x = ClusterListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListRequest) ProtoMessage() {}

func (x *ClusterListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListRequest.ProtoReflect.Descriptor instead.
func (*ClusterListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{28}
}

func (x *ClusterListRequest) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *ClusterListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterListRequest) GetOwnerGroupId() uint64 {
	if x != nil {
		return x.OwnerGroupId
	}
	return 0
}

func (x *ClusterListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterResponse) Reset() {
	*x = ClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse) ProtoMessage() {}

func (x *ClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse.ProtoReflect.Descriptor instead.
func (*ClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{29}
}

func (x *ClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Sync      bool   `protobuf:"varint,2,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterRequest) Reset() {
	*x = ClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRequest) ProtoMessage() {}

func (x *ClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRequest.ProtoReflect.Descriptor instead.
func (*ClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{30}
}

func (x *ClusterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type AddClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *AddClusterRequest) Reset() {
	*x = AddClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterRequest) ProtoMessage() {}

func (x *AddClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterRequest.ProtoReflect.Descriptor instead.
func (*AddClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{31}
}

func (x *AddClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type UpdateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Cluster   *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateClusterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteClusterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteClusterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ClusterHypervisor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster             *Cluster                 `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	AvailabilityZone    *ClusterAvailabilityZone `protobuf:"bytes,3,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Uuid                string                   `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TypeCode            string                   `protobuf:"bytes,5,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	Hostname            string                   `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress           string                   `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	VcpuTotalCnt        uint32                   `protobuf:"varint,8,opt,name=vcpu_total_cnt,json=vcpuTotalCnt,proto3" json:"vcpu_total_cnt,omitempty"`
	VcpuUsedCnt         uint32                   `protobuf:"varint,9,opt,name=vcpu_used_cnt,json=vcpuUsedCnt,proto3" json:"vcpu_used_cnt,omitempty"`
	MemTotalBytes       uint64                   `protobuf:"varint,10,opt,name=mem_total_bytes,json=memTotalBytes,proto3" json:"mem_total_bytes,omitempty"`
	MemUsedBytes        uint64                   `protobuf:"varint,11,opt,name=mem_used_bytes,json=memUsedBytes,proto3" json:"mem_used_bytes,omitempty"`
	DiskTotalBytes      uint64                   `protobuf:"varint,12,opt,name=disk_total_bytes,json=diskTotalBytes,proto3" json:"disk_total_bytes,omitempty"`
	DiskUsedBytes       uint64                   `protobuf:"varint,13,opt,name=disk_used_bytes,json=diskUsedBytes,proto3" json:"disk_used_bytes,omitempty"`
	SshPort             uint32                   `protobuf:"varint,14,opt,name=ssh_port,json=sshPort,proto3" json:"ssh_port,omitempty"`
	SshAccount          string                   `protobuf:"bytes,15,opt,name=ssh_account,json=sshAccount,proto3" json:"ssh_account,omitempty"`
	SshPassword         string                   `protobuf:"bytes,16,opt,name=ssh_password,json=sshPassword,proto3" json:"ssh_password,omitempty"`
	AgentPort           uint32                   `protobuf:"varint,17,opt,name=agent_port,json=agentPort,proto3" json:"agent_port,omitempty"`
	AgentVersion        string                   `protobuf:"bytes,18,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	AgentInstalledAt    int64                    `protobuf:"varint,19,opt,name=agent_installed_at,json=agentInstalledAt,proto3" json:"agent_installed_at,omitempty"`
	AgentLastUpgradedAt int64                    `protobuf:"varint,20,opt,name=agent_last_upgraded_at,json=agentLastUpgradedAt,proto3" json:"agent_last_upgraded_at,omitempty"`
	State               string                   `protobuf:"bytes,21,opt,name=state,proto3" json:"state,omitempty"`
	Status              string                   `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClusterHypervisor) Reset() {
	*x = ClusterHypervisor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHypervisor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHypervisor) ProtoMessage() {}

func (x *ClusterHypervisor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHypervisor.ProtoReflect.Descriptor instead.
func (*ClusterHypervisor) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{35}
}

func (x *ClusterHypervisor) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterHypervisor) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterHypervisor) GetAvailabilityZone() *ClusterAvailabilityZone {
	if x != nil {
		return x.AvailabilityZone
	}
	return nil
}

func (x *ClusterHypervisor) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterHypervisor) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *ClusterHypervisor) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ClusterHypervisor) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ClusterHypervisor) GetVcpuTotalCnt() uint32 {
	if x != nil {
		return x.VcpuTotalCnt
	}
	return 0
}

func (x *ClusterHypervisor) GetVcpuUsedCnt() uint32 {
	if x != nil {
		return x.VcpuUsedCnt
	}
	return 0
}

func (x *ClusterHypervisor) GetMemTotalBytes() uint64 {
	if x != nil {
		return x.MemTotalBytes
	}
	return 0
}

func (x *ClusterHypervisor) GetMemUsedBytes() uint64 {
	if x != nil {
		return x.MemUsedBytes
	}
	return 0
}

func (x *ClusterHypervisor) GetDiskTotalBytes() uint64 {
	if x != nil {
		return x.DiskTotalBytes
	}
	return 0
}

func (x *ClusterHypervisor) GetDiskUsedBytes() uint64 {
	if x != nil {
		return x.DiskUsedBytes
	}
	return 0
}

func (x *ClusterHypervisor) GetSshPort() uint32 {
	if x != nil {
		return x.SshPort
	}
	return 0
}

func (x *ClusterHypervisor) GetSshAccount() string {
	if x != nil {
		return x.SshAccount
	}
	return ""
}

func (x *ClusterHypervisor) GetSshPassword() string {
	if x != nil {
		return x.SshPassword
	}
	return ""
}

func (x *ClusterHypervisor) GetAgentPort() uint32 {
	if x != nil {
		return x.AgentPort
	}
	return 0
}

func (x *ClusterHypervisor) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *ClusterHypervisor) GetAgentInstalledAt() int64 {
	if x != nil {
		return x.AgentInstalledAt
	}
	return 0
}

func (x *ClusterHypervisor) GetAgentLastUpgradedAt() int64 {
	if x != nil {
		return x.AgentLastUpgradedAt
	}
	return 0
}

func (x *ClusterHypervisor) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClusterHypervisor) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ClusterHypervisorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hypervisors []*ClusterHypervisor `protobuf:"bytes,1,rep,name=hypervisors,proto3" json:"hypervisors,omitempty"`
	Pagination  *Pagination          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message     *Message             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterHypervisorListResponse) Reset() {
	*x = ClusterHypervisorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHypervisorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHypervisorListResponse) ProtoMessage() {}

func (x *ClusterHypervisorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHypervisorListResponse.ProtoReflect.Descriptor instead.
func (*ClusterHypervisorListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{36}
}

func (x *ClusterHypervisorListResponse) GetHypervisors() []*ClusterHypervisor {
	if x != nil {
		return x.Hypervisors
	}
	return nil
}

func (x *ClusterHypervisorListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterHypervisorListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterHypervisorListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                 uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterAvailabilityZoneId uint64                `protobuf:"varint,2,opt,name=cluster_availability_zone_id,json=clusterAvailabilityZoneId,proto3" json:"cluster_availability_zone_id,omitempty"`
	Hostname                  string                `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress                 string                `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Limit                     *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                    *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync                      bool                  `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterHypervisorListRequest) Reset() {
	*x = ClusterHypervisorListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHypervisorListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHypervisorListRequest) ProtoMessage() {}

func (x *ClusterHypervisorListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHypervisorListRequest.ProtoReflect.Descriptor instead.
func (*ClusterHypervisorListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{37}
}

func (x *ClusterHypervisorListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterHypervisorListRequest) GetClusterAvailabilityZoneId() uint64 {
	if x != nil {
		return x.ClusterAvailabilityZoneId
	}
	return 0
}

func (x *ClusterHypervisorListRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ClusterHypervisorListRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ClusterHypervisorListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterHypervisorListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterHypervisorListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterHypervisorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hypervisor *ClusterHypervisor `protobuf:"bytes,1,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	Message    *Message           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterHypervisorResponse) Reset() {
	*x = ClusterHypervisorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHypervisorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHypervisorResponse) ProtoMessage() {}

func (x *ClusterHypervisorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHypervisorResponse.ProtoReflect.Descriptor instead.
func (*ClusterHypervisorResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{38}
}

func (x *ClusterHypervisorResponse) GetHypervisor() *ClusterHypervisor {
	if x != nil {
		return x.Hypervisor
	}
	return nil
}

func (x *ClusterHypervisorResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterHypervisorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId           uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterHypervisorId uint64 `protobuf:"varint,2,opt,name=cluster_hypervisor_id,json=clusterHypervisorId,proto3" json:"cluster_hypervisor_id,omitempty"`
	Sync                bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterHypervisorRequest) Reset() {
	*x = ClusterHypervisorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHypervisorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHypervisorRequest) ProtoMessage() {}

func (x *ClusterHypervisorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHypervisorRequest.ProtoReflect.Descriptor instead.
func (*ClusterHypervisorRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{39}
}

func (x *ClusterHypervisorRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterHypervisorRequest) GetClusterHypervisorId() uint64 {
	if x != nil {
		return x.ClusterHypervisorId
	}
	return 0
}

func (x *ClusterHypervisorRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type UpdateClusterHypervisorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId           uint64             `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterHypervisorId uint64             `protobuf:"varint,2,opt,name=cluster_hypervisor_id,json=clusterHypervisorId,proto3" json:"cluster_hypervisor_id,omitempty"`
	Hypervisor          *ClusterHypervisor `protobuf:"bytes,3,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
}

func (x *UpdateClusterHypervisorRequest) Reset() {
	*x = UpdateClusterHypervisorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterHypervisorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHypervisorRequest) ProtoMessage() {}

func (x *UpdateClusterHypervisorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHypervisorRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterHypervisorRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateClusterHypervisorRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateClusterHypervisorRequest) GetClusterHypervisorId() uint64 {
	if x != nil {
		return x.ClusterHypervisorId
	}
	return 0
}

func (x *UpdateClusterHypervisorRequest) GetHypervisor() *ClusterHypervisor {
	if x != nil {
		return x.Hypervisor
	}
	return nil
}

type ClusterAvailabilityZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Available   bool                 `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	Cluster     *Cluster             `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Hypervisors []*ClusterHypervisor `protobuf:"bytes,5,rep,name=hypervisors,proto3" json:"hypervisors,omitempty"`
}

func (x *ClusterAvailabilityZone) Reset() {
	*x = ClusterAvailabilityZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAvailabilityZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAvailabilityZone) ProtoMessage() {}

func (x *ClusterAvailabilityZone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAvailabilityZone.ProtoReflect.Descriptor instead.
func (*ClusterAvailabilityZone) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{41}
}

func (x *ClusterAvailabilityZone) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterAvailabilityZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterAvailabilityZone) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ClusterAvailabilityZone) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterAvailabilityZone) GetHypervisors() []*ClusterHypervisor {
	if x != nil {
		return x.Hypervisors
	}
	return nil
}

type ClusterAvailabilityZoneListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailabilityZones []*ClusterAvailabilityZone `protobuf:"bytes,1,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	Pagination        *Pagination                `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message           *Message                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterAvailabilityZoneListResponse) Reset() {
	*x = ClusterAvailabilityZoneListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAvailabilityZoneListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAvailabilityZoneListResponse) ProtoMessage() {}

func (x *ClusterAvailabilityZoneListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAvailabilityZoneListResponse.ProtoReflect.Descriptor instead.
func (*ClusterAvailabilityZoneListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{42}
}

func (x *ClusterAvailabilityZoneListResponse) GetAvailabilityZones() []*ClusterAvailabilityZone {
	if x != nil {
		return x.AvailabilityZones
	}
	return nil
}

func (x *ClusterAvailabilityZoneListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterAvailabilityZoneListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterAvailabilityZoneListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Limit     *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync      bool                  `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterAvailabilityZoneListRequest) Reset() {
	*x = ClusterAvailabilityZoneListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAvailabilityZoneListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAvailabilityZoneListRequest) ProtoMessage() {}

func (x *ClusterAvailabilityZoneListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAvailabilityZoneListRequest.ProtoReflect.Descriptor instead.
func (*ClusterAvailabilityZoneListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{43}
}

func (x *ClusterAvailabilityZoneListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterAvailabilityZoneListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterAvailabilityZoneListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterAvailabilityZoneListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterAvailabilityZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailabilityZone *ClusterAvailabilityZone `protobuf:"bytes,1,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Message          *Message                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterAvailabilityZoneResponse) Reset() {
	*x = ClusterAvailabilityZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAvailabilityZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAvailabilityZoneResponse) ProtoMessage() {}

func (x *ClusterAvailabilityZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAvailabilityZoneResponse.ProtoReflect.Descriptor instead.
func (*ClusterAvailabilityZoneResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{44}
}

func (x *ClusterAvailabilityZoneResponse) GetAvailabilityZone() *ClusterAvailabilityZone {
	if x != nil {
		return x.AvailabilityZone
	}
	return nil
}

func (x *ClusterAvailabilityZoneResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterAvailabilityZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                 uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterAvailabilityZoneId uint64 `protobuf:"varint,2,opt,name=cluster_availability_zone_id,json=clusterAvailabilityZoneId,proto3" json:"cluster_availability_zone_id,omitempty"`
	Sync                      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterAvailabilityZoneRequest) Reset() {
	*x = ClusterAvailabilityZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAvailabilityZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAvailabilityZoneRequest) ProtoMessage() {}

func (x *ClusterAvailabilityZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAvailabilityZoneRequest.ProtoReflect.Descriptor instead.
func (*ClusterAvailabilityZoneRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{45}
}

func (x *ClusterAvailabilityZoneRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterAvailabilityZoneRequest) GetClusterAvailabilityZoneId() uint64 {
	if x != nil {
		return x.ClusterAvailabilityZoneId
	}
	return 0
}

func (x *ClusterAvailabilityZoneRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClusterQuota) Reset() {
	*x = ClusterQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterQuota) ProtoMessage() {}

func (x *ClusterQuota) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterQuota.ProtoReflect.Descriptor instead.
func (*ClusterQuota) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{46}
}

func (x *ClusterQuota) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ClusterQuota) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ClusterTenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster     *Cluster        `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Uuid        string          `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Enabled     bool            `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Quotas      []*ClusterQuota `protobuf:"bytes,7,rep,name=quotas,proto3" json:"quotas,omitempty"`
}

func (x *ClusterTenant) Reset() {
	*x = ClusterTenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTenant) ProtoMessage() {}

func (x *ClusterTenant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTenant.ProtoReflect.Descriptor instead.
func (*ClusterTenant) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{47}
}

func (x *ClusterTenant) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterTenant) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterTenant) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterTenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterTenant) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClusterTenant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterTenant) GetQuotas() []*ClusterQuota {
	if x != nil {
		return x.Quotas
	}
	return nil
}

type ClusterTenantListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants    []*ClusterTenant `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterTenantListResponse) Reset() {
	*x = ClusterTenantListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTenantListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTenantListResponse) ProtoMessage() {}

func (x *ClusterTenantListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTenantListResponse.ProtoReflect.Descriptor instead.
func (*ClusterTenantListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{48}
}

func (x *ClusterTenantListResponse) GetTenants() []*ClusterTenant {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *ClusterTenantListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterTenantListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *DeleteClusterTenantRequest) Reset() {
	*x = DeleteClusterTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterTenantRequest) ProtoMessage() {}

func (x *DeleteClusterTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterTenantRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterTenantRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteClusterTenantRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterTenantRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

type DeleteClusterTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterTenantResponse) Reset() {
	*x = DeleteClusterTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterTenantResponse) ProtoMessage() {}

func (x *DeleteClusterTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterTenantResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterTenantResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteClusterTenantResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterTenantListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string                `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Limit     *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync      bool                  `protobuf:"varint,5,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterTenantListRequest) Reset() {
	*x = ClusterTenantListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTenantListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTenantListRequest) ProtoMessage() {}

func (x *ClusterTenantListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTenantListRequest.ProtoReflect.Descriptor instead.
func (*ClusterTenantListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{51}
}

func (x *ClusterTenantListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterTenantListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterTenantListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterTenantListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterTenantListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant  *ClusterTenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Message *Message       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterTenantResponse) Reset() {
	*x = ClusterTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTenantResponse) ProtoMessage() {}

func (x *ClusterTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTenantResponse.ProtoReflect.Descriptor instead.
func (*ClusterTenantResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{52}
}

func (x *ClusterTenantResponse) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterTenantResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId uint64 `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	Sync            bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterTenantRequest) Reset() {
	*x = ClusterTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTenantRequest) ProtoMessage() {}

func (x *ClusterTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTenantRequest.ProtoReflect.Descriptor instead.
func (*ClusterTenantRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{53}
}

func (x *ClusterTenantRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterTenantRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *ClusterTenantRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterTenantByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterTenantByUUIDRequest) Reset() {
	*x = ClusterTenantByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTenantByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTenantByUUIDRequest) ProtoMessage() {}

func (x *ClusterTenantByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTenantByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterTenantByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{54}
}

func (x *ClusterTenantByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterTenantByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterTenantByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CreateClusterTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *CreateClusterTenantRequest) Reset() {
	*x = CreateClusterTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterTenantRequest) ProtoMessage() {}

func (x *CreateClusterTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterTenantRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{55}
}

func (x *CreateClusterTenantRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterTenantRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

type CheckIsExistByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CheckIsExistByNameRequest) Reset() {
	*x = CheckIsExistByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsExistByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsExistByNameRequest) ProtoMessage() {}

func (x *CheckIsExistByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsExistByNameRequest.ProtoReflect.Descriptor instead.
func (*CheckIsExistByNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{56}
}

func (x *CheckIsExistByNameRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CheckIsExistByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CheckIsExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExist bool     `protobuf:"varint,1,opt,name=is_exist,json=isExist,proto3" json:"is_exist,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckIsExistResponse) Reset() {
	*x = CheckIsExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsExistResponse) ProtoMessage() {}

func (x *CheckIsExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsExistResponse.ProtoReflect.Descriptor instead.
func (*CheckIsExistResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{57}
}

func (x *CheckIsExistResponse) GetIsExist() bool {
	if x != nil {
		return x.IsExist
	}
	return false
}

func (x *CheckIsExistResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn          *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant        *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SecurityGroup *ClusterSecurityGroup  `protobuf:"bytes,3,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
}

func (x *DeleteClusterSecurityGroupRequest) Reset() {
	*x = DeleteClusterSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterSecurityGroupRequest) ProtoMessage() {}

func (x *DeleteClusterSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteClusterSecurityGroupRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterSecurityGroupRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterSecurityGroupRequest) GetSecurityGroup() *ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type DeleteClusterSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterSecurityGroupResponse) Reset() {
	*x = DeleteClusterSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterSecurityGroupResponse) ProtoMessage() {}

func (x *DeleteClusterSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteClusterSecurityGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterSubnetDHCPPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartIpAddress string `protobuf:"bytes,2,opt,name=start_ip_address,json=startIpAddress,proto3" json:"start_ip_address,omitempty"`
	EndIpAddress   string `protobuf:"bytes,3,opt,name=end_ip_address,json=endIpAddress,proto3" json:"end_ip_address,omitempty"`
}

func (x *ClusterSubnetDHCPPool) Reset() {
	*x = ClusterSubnetDHCPPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSubnetDHCPPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSubnetDHCPPool) ProtoMessage() {}

func (x *ClusterSubnetDHCPPool) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSubnetDHCPPool.ProtoReflect.Descriptor instead.
func (*ClusterSubnetDHCPPool) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{60}
}

func (x *ClusterSubnetDHCPPool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterSubnetDHCPPool) GetStartIpAddress() string {
	if x != nil {
		return x.StartIpAddress
	}
	return ""
}

func (x *ClusterSubnetDHCPPool) GetEndIpAddress() string {
	if x != nil {
		return x.EndIpAddress
	}
	return ""
}

type ClusterSubnetNameserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nameserver string `protobuf:"bytes,2,opt,name=nameserver,proto3" json:"nameserver,omitempty"`
}

func (x *ClusterSubnetNameserver) Reset() {
	*x = ClusterSubnetNameserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSubnetNameserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSubnetNameserver) ProtoMessage() {}

func (x *ClusterSubnetNameserver) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSubnetNameserver.ProtoReflect.Descriptor instead.
func (*ClusterSubnetNameserver) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{61}
}

func (x *ClusterSubnetNameserver) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterSubnetNameserver) GetNameserver() string {
	if x != nil {
		return x.Nameserver
	}
	return ""
}

type ClusterSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                string                     `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	NetworkCidr         string                     `protobuf:"bytes,5,opt,name=network_cidr,json=networkCidr,proto3" json:"network_cidr,omitempty"`
	DhcpEnabled         bool                       `protobuf:"varint,6,opt,name=dhcp_enabled,json=dhcpEnabled,proto3" json:"dhcp_enabled,omitempty"`
	DhcpPools           []*ClusterSubnetDHCPPool   `protobuf:"bytes,7,rep,name=dhcp_pools,json=dhcpPools,proto3" json:"dhcp_pools,omitempty"`
	GatewayEnabled      bool                       `protobuf:"varint,8,opt,name=gateway_enabled,json=gatewayEnabled,proto3" json:"gateway_enabled,omitempty"`
	GatewayIpAddress    string                     `protobuf:"bytes,9,opt,name=gateway_ip_address,json=gatewayIpAddress,proto3" json:"gateway_ip_address,omitempty"`
	Ipv6AddressModeCode string                     `protobuf:"bytes,10,opt,name=ipv6_address_mode_code,json=ipv6AddressModeCode,proto3" json:"ipv6_address_mode_code,omitempty"`
	Ipv6RaModeCode      string                     `protobuf:"bytes,11,opt,name=ipv6_ra_mode_code,json=ipv6RaModeCode,proto3" json:"ipv6_ra_mode_code,omitempty"`
	Nameservers         []*ClusterSubnetNameserver `protobuf:"bytes,12,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
}

func (x *ClusterSubnet) Reset() {
	*x = ClusterSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSubnet) ProtoMessage() {}

func (x *ClusterSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSubnet.ProtoReflect.Descriptor instead.
func (*ClusterSubnet) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{62}
}

func (x *ClusterSubnet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterSubnet) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterSubnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterSubnet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterSubnet) GetNetworkCidr() string {
	if x != nil {
		return x.NetworkCidr
	}
	return ""
}

func (x *ClusterSubnet) GetDhcpEnabled() bool {
	if x != nil {
		return x.DhcpEnabled
	}
	return false
}

func (x *ClusterSubnet) GetDhcpPools() []*ClusterSubnetDHCPPool {
	if x != nil {
		return x.DhcpPools
	}
	return nil
}

func (x *ClusterSubnet) GetGatewayEnabled() bool {
	if x != nil {
		return x.GatewayEnabled
	}
	return false
}

func (x *ClusterSubnet) GetGatewayIpAddress() string {
	if x != nil {
		return x.GatewayIpAddress
	}
	return ""
}

func (x *ClusterSubnet) GetIpv6AddressModeCode() string {
	if x != nil {
		return x.Ipv6AddressModeCode
	}
	return ""
}

func (x *ClusterSubnet) GetIpv6RaModeCode() string {
	if x != nil {
		return x.Ipv6RaModeCode
	}
	return ""
}

func (x *ClusterSubnet) GetNameservers() []*ClusterSubnetNameserver {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

type ClusterNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster      *Cluster             `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant       *ClusterTenant       `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	TypeCode     string               `protobuf:"bytes,4,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	Uuid         string               `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name         string               `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description  string               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ExternalFlag bool                 `protobuf:"varint,8,opt,name=external_flag,json=externalFlag,proto3" json:"external_flag,omitempty"`
	Status       string               `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	State        string               `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	Subnets      []*ClusterSubnet     `protobuf:"bytes,11,rep,name=subnets,proto3" json:"subnets,omitempty"`
	FloatingIps  []*ClusterFloatingIP `protobuf:"bytes,12,rep,name=floating_ips,json=floatingIps,proto3" json:"floating_ips,omitempty"`
}

func (x *ClusterNetwork) Reset() {
	*x = ClusterNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetwork) ProtoMessage() {}

func (x *ClusterNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetwork.ProtoReflect.Descriptor instead.
func (*ClusterNetwork) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{63}
}

func (x *ClusterNetwork) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterNetwork) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterNetwork) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterNetwork) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *ClusterNetwork) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterNetwork) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterNetwork) GetExternalFlag() bool {
	if x != nil {
		return x.ExternalFlag
	}
	return false
}

func (x *ClusterNetwork) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterNetwork) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClusterNetwork) GetSubnets() []*ClusterSubnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *ClusterNetwork) GetFloatingIps() []*ClusterFloatingIP {
	if x != nil {
		return x.FloatingIps
	}
	return nil
}

type ClusterNetworkListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks   []*ClusterNetwork `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	Pagination *Pagination       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterNetworkListResponse) Reset() {
	*x = ClusterNetworkListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkListResponse) ProtoMessage() {}

func (x *ClusterNetworkListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkListResponse.ProtoReflect.Descriptor instead.
func (*ClusterNetworkListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{64}
}

func (x *ClusterNetworkListResponse) GetNetworks() []*ClusterNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ClusterNetworkListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterNetworkListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId uint64                `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	Uuid            string                `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ExternalOnly    bool                  `protobuf:"varint,4,opt,name=external_only,json=externalOnly,proto3" json:"external_only,omitempty"`
	Limit           *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync            bool                  `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterNetworkListRequest) Reset() {
	*x = ClusterNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkListRequest) ProtoMessage() {}

func (x *ClusterNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkListRequest.ProtoReflect.Descriptor instead.
func (*ClusterNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{65}
}

func (x *ClusterNetworkListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterNetworkListRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *ClusterNetworkListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterNetworkListRequest) GetExternalOnly() bool {
	if x != nil {
		return x.ExternalOnly
	}
	return false
}

func (x *ClusterNetworkListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterNetworkListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterNetworkListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *ClusterNetwork `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Message *Message        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterNetworkResponse) Reset() {
	*x = ClusterNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkResponse) ProtoMessage() {}

func (x *ClusterNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkResponse.ProtoReflect.Descriptor instead.
func (*ClusterNetworkResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{66}
}

func (x *ClusterNetworkResponse) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterNetworkResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterNetworkResponse) Reset() {
	*x = DeleteClusterNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterNetworkResponse) ProtoMessage() {}

func (x *DeleteClusterNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterNetworkResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterNetworkResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteClusterNetworkResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant  *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Network *ClusterNetwork        `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *DeleteClusterNetworkRequest) Reset() {
	*x = DeleteClusterNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterNetworkRequest) ProtoMessage() {}

func (x *DeleteClusterNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterNetworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterNetworkRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteClusterNetworkRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterNetworkRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterNetworkRequest) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type CreateClusterNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant  *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Network *ClusterNetwork        `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *CreateClusterNetworkRequest) Reset() {
	*x = CreateClusterNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterNetworkRequest) ProtoMessage() {}

func (x *CreateClusterNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterNetworkRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{69}
}

func (x *CreateClusterNetworkRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterNetworkRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterNetworkRequest) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type ClusterNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterNetworkId uint64 `protobuf:"varint,2,opt,name=cluster_network_id,json=clusterNetworkId,proto3" json:"cluster_network_id,omitempty"`
	Sync             bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterNetworkRequest) Reset() {
	*x = ClusterNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkRequest) ProtoMessage() {}

func (x *ClusterNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkRequest.ProtoReflect.Descriptor instead.
func (*ClusterNetworkRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{70}
}

func (x *ClusterNetworkRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterNetworkRequest) GetClusterNetworkId() uint64 {
	if x != nil {
		return x.ClusterNetworkId
	}
	return 0
}

func (x *ClusterNetworkRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterNetworkByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterNetworkByUUIDRequest) Reset() {
	*x = ClusterNetworkByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkByUUIDRequest) ProtoMessage() {}

func (x *ClusterNetworkByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterNetworkByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{71}
}

func (x *ClusterNetworkByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterNetworkByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterNetworkByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet  *ClusterSubnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Message *Message       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterSubnetResponse) Reset() {
	*x = ClusterSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSubnetResponse) ProtoMessage() {}

func (x *ClusterSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSubnetResponse.ProtoReflect.Descriptor instead.
func (*ClusterSubnetResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{72}
}

func (x *ClusterSubnetResponse) GetSubnet() *ClusterSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ClusterSubnetResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateClusterSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant  *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Network *ClusterNetwork        `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Subnet  *ClusterSubnet         `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *CreateClusterSubnetRequest) Reset() {
	*x = CreateClusterSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterSubnetRequest) ProtoMessage() {}

func (x *CreateClusterSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterSubnetRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{73}
}

func (x *CreateClusterSubnetRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterSubnetRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterSubnetRequest) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateClusterSubnetRequest) GetSubnet() *ClusterSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type DeleteClusterSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant  *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Network *ClusterNetwork        `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Subnet  *ClusterSubnet         `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *DeleteClusterSubnetRequest) Reset() {
	*x = DeleteClusterSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterSubnetRequest) ProtoMessage() {}

func (x *DeleteClusterSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterSubnetRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteClusterSubnetRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterSubnetRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterSubnetRequest) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *DeleteClusterSubnetRequest) GetSubnet() *ClusterSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type DeleteClusterSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterSubnetResponse) Reset() {
	*x = DeleteClusterSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterSubnetResponse) ProtoMessage() {}

func (x *DeleteClusterSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterSubnetResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterSubnetResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteClusterSubnetResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterSubnetId uint64 `protobuf:"varint,2,opt,name=cluster_subnet_id,json=clusterSubnetId,proto3" json:"cluster_subnet_id,omitempty"`
	Sync            bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterSubnetRequest) Reset() {
	*x = ClusterSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSubnetRequest) ProtoMessage() {}

func (x *ClusterSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSubnetRequest.ProtoReflect.Descriptor instead.
func (*ClusterSubnetRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{76}
}

func (x *ClusterSubnetRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterSubnetRequest) GetClusterSubnetId() uint64 {
	if x != nil {
		return x.ClusterSubnetId
	}
	return 0
}

func (x *ClusterSubnetRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CreateClusterFloatingIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn       *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant     *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Network    *ClusterNetwork        `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	FloatingIp *ClusterFloatingIP     `protobuf:"bytes,4,opt,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty"`
}

func (x *CreateClusterFloatingIPRequest) Reset() {
	*x = CreateClusterFloatingIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterFloatingIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterFloatingIPRequest) ProtoMessage() {}

func (x *CreateClusterFloatingIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterFloatingIPRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterFloatingIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{77}
}

func (x *CreateClusterFloatingIPRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterFloatingIPRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterFloatingIPRequest) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateClusterFloatingIPRequest) GetFloatingIp() *ClusterFloatingIP {
	if x != nil {
		return x.FloatingIp
	}
	return nil
}

type ClusterFloatingIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatingIp *ClusterFloatingIP `protobuf:"bytes,1,opt,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty"`
	Message    *Message           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterFloatingIPResponse) Reset() {
	*x = ClusterFloatingIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFloatingIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFloatingIPResponse) ProtoMessage() {}

func (x *ClusterFloatingIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFloatingIPResponse.ProtoReflect.Descriptor instead.
func (*ClusterFloatingIPResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{78}
}

func (x *ClusterFloatingIPResponse) GetFloatingIp() *ClusterFloatingIP {
	if x != nil {
		return x.FloatingIp
	}
	return nil
}

func (x *ClusterFloatingIPResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterFloatingIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId           uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterFloatingIpId uint64 `protobuf:"varint,2,opt,name=cluster_floating_ip_id,json=clusterFloatingIpId,proto3" json:"cluster_floating_ip_id,omitempty"`
	Sync                bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterFloatingIPRequest) Reset() {
	*x = ClusterFloatingIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFloatingIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFloatingIPRequest) ProtoMessage() {}

func (x *ClusterFloatingIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFloatingIPRequest.ProtoReflect.Descriptor instead.
func (*ClusterFloatingIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{79}
}

func (x *ClusterFloatingIPRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterFloatingIPRequest) GetClusterFloatingIpId() uint64 {
	if x != nil {
		return x.ClusterFloatingIpId
	}
	return 0
}

func (x *ClusterFloatingIPRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CheckIsExistClusterFloatingIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                  uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterFloatingIpIpAddress string `protobuf:"bytes,2,opt,name=cluster_floating_ip_ip_address,json=clusterFloatingIpIpAddress,proto3" json:"cluster_floating_ip_ip_address,omitempty"`
}

func (x *CheckIsExistClusterFloatingIPRequest) Reset() {
	*x = CheckIsExistClusterFloatingIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsExistClusterFloatingIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsExistClusterFloatingIPRequest) ProtoMessage() {}

func (x *CheckIsExistClusterFloatingIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsExistClusterFloatingIPRequest.ProtoReflect.Descriptor instead.
func (*CheckIsExistClusterFloatingIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{80}
}

func (x *CheckIsExistClusterFloatingIPRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CheckIsExistClusterFloatingIPRequest) GetClusterFloatingIpIpAddress() string {
	if x != nil {
		return x.ClusterFloatingIpIpAddress
	}
	return ""
}

type DeleteClusterFloatingIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn       *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant     *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	FloatingIp *ClusterFloatingIP     `protobuf:"bytes,3,opt,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty"`
}

func (x *DeleteClusterFloatingIPRequest) Reset() {
	*x = DeleteClusterFloatingIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterFloatingIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterFloatingIPRequest) ProtoMessage() {}

func (x *DeleteClusterFloatingIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterFloatingIPRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterFloatingIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteClusterFloatingIPRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterFloatingIPRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterFloatingIPRequest) GetFloatingIp() *ClusterFloatingIP {
	if x != nil {
		return x.FloatingIp
	}
	return nil
}

type DeleteClusterFloatingIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterFloatingIPResponse) Reset() {
	*x = DeleteClusterFloatingIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterFloatingIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterFloatingIPResponse) ProtoMessage() {}

func (x *DeleteClusterFloatingIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterFloatingIPResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterFloatingIPResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteClusterFloatingIPResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterNetworkRoutingInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network   *ClusterNetwork `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Subnet    *ClusterSubnet  `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	IpAddress string          `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *ClusterNetworkRoutingInterface) Reset() {
	*x = ClusterNetworkRoutingInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkRoutingInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkRoutingInterface) ProtoMessage() {}

func (x *ClusterNetworkRoutingInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkRoutingInterface.ProtoReflect.Descriptor instead.
func (*ClusterNetworkRoutingInterface) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{83}
}

func (x *ClusterNetworkRoutingInterface) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterNetworkRoutingInterface) GetSubnet() *ClusterSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ClusterNetworkRoutingInterface) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type ClusterRouterExtraRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Nexthop     string `protobuf:"bytes,3,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
}

func (x *ClusterRouterExtraRoute) Reset() {
	*x = ClusterRouterExtraRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouterExtraRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouterExtraRoute) ProtoMessage() {}

func (x *ClusterRouterExtraRoute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouterExtraRoute.ProtoReflect.Descriptor instead.
func (*ClusterRouterExtraRoute) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{84}
}

func (x *ClusterRouterExtraRoute) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterRouterExtraRoute) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ClusterRouterExtraRoute) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

type CheckIsExistClusterRoutingInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                        uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterRoutingInterfaceIpAddress string `protobuf:"bytes,2,opt,name=cluster_routing_interface_ip_address,json=clusterRoutingInterfaceIpAddress,proto3" json:"cluster_routing_interface_ip_address,omitempty"`
}

func (x *CheckIsExistClusterRoutingInterfaceRequest) Reset() {
	*x = CheckIsExistClusterRoutingInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsExistClusterRoutingInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsExistClusterRoutingInterfaceRequest) ProtoMessage() {}

func (x *CheckIsExistClusterRoutingInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsExistClusterRoutingInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CheckIsExistClusterRoutingInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{85}
}

func (x *CheckIsExistClusterRoutingInterfaceRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CheckIsExistClusterRoutingInterfaceRequest) GetClusterRoutingInterfaceIpAddress() string {
	if x != nil {
		return x.ClusterRoutingInterfaceIpAddress
	}
	return ""
}

type ClusterRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant                    *ClusterTenant                    `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Uuid                      string                            `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                      string                            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description               string                            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	InternalRoutingInterfaces []*ClusterNetworkRoutingInterface `protobuf:"bytes,6,rep,name=internal_routing_interfaces,json=internalRoutingInterfaces,proto3" json:"internal_routing_interfaces,omitempty"`
	ExternalRoutingInterfaces []*ClusterNetworkRoutingInterface `protobuf:"bytes,7,rep,name=external_routing_interfaces,json=externalRoutingInterfaces,proto3" json:"external_routing_interfaces,omitempty"`
	ExtraRoutes               []*ClusterRouterExtraRoute        `protobuf:"bytes,8,rep,name=extra_routes,json=extraRoutes,proto3" json:"extra_routes,omitempty"`
	Status                    string                            `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	State                     string                            `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ClusterRouter) Reset() {
	*x = ClusterRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouter) ProtoMessage() {}

func (x *ClusterRouter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouter.ProtoReflect.Descriptor instead.
func (*ClusterRouter) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{86}
}

func (x *ClusterRouter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterRouter) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterRouter) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterRouter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterRouter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterRouter) GetInternalRoutingInterfaces() []*ClusterNetworkRoutingInterface {
	if x != nil {
		return x.InternalRoutingInterfaces
	}
	return nil
}

func (x *ClusterRouter) GetExternalRoutingInterfaces() []*ClusterNetworkRoutingInterface {
	if x != nil {
		return x.ExternalRoutingInterfaces
	}
	return nil
}

func (x *ClusterRouter) GetExtraRoutes() []*ClusterRouterExtraRoute {
	if x != nil {
		return x.ExtraRoutes
	}
	return nil
}

func (x *ClusterRouter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterRouter) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type CreateClusterRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Router *ClusterRouter         `protobuf:"bytes,3,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *CreateClusterRouterRequest) Reset() {
	*x = CreateClusterRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRouterRequest) ProtoMessage() {}

func (x *CreateClusterRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRouterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRouterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{87}
}

func (x *CreateClusterRouterRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterRouterRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterRouterRequest) GetRouter() *ClusterRouter {
	if x != nil {
		return x.Router
	}
	return nil
}

type DeleteClusterRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Router *ClusterRouter         `protobuf:"bytes,3,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *DeleteClusterRouterRequest) Reset() {
	*x = DeleteClusterRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRouterRequest) ProtoMessage() {}

func (x *DeleteClusterRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRouterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRouterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteClusterRouterRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterRouterRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterRouterRequest) GetRouter() *ClusterRouter {
	if x != nil {
		return x.Router
	}
	return nil
}

type DeleteClusterRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterRouterResponse) Reset() {
	*x = DeleteClusterRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRouterResponse) ProtoMessage() {}

func (x *DeleteClusterRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRouterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterRouterResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteClusterRouterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterRouterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routers    []*ClusterRouter `protobuf:"bytes,1,rep,name=routers,proto3" json:"routers,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterRouterListResponse) Reset() {
	*x = ClusterRouterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouterListResponse) ProtoMessage() {}

func (x *ClusterRouterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouterListResponse.ProtoReflect.Descriptor instead.
func (*ClusterRouterListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{90}
}

func (x *ClusterRouterListResponse) GetRouters() []*ClusterRouter {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *ClusterRouterListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterRouterListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterRouterListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId  uint64                `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	ClusterNetworkId uint64                `protobuf:"varint,3,opt,name=cluster_network_id,json=clusterNetworkId,proto3" json:"cluster_network_id,omitempty"`
	Uuid             string                `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Limit            *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset           *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync             bool                  `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterRouterListRequest) Reset() {
	*x = ClusterRouterListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouterListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouterListRequest) ProtoMessage() {}

func (x *ClusterRouterListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouterListRequest.ProtoReflect.Descriptor instead.
func (*ClusterRouterListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{91}
}

func (x *ClusterRouterListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterRouterListRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *ClusterRouterListRequest) GetClusterNetworkId() uint64 {
	if x != nil {
		return x.ClusterNetworkId
	}
	return 0
}

func (x *ClusterRouterListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterRouterListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterRouterListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterRouterListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router  *ClusterRouter `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	Message *Message       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterRouterResponse) Reset() {
	*x = ClusterRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouterResponse) ProtoMessage() {}

func (x *ClusterRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouterResponse.ProtoReflect.Descriptor instead.
func (*ClusterRouterResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{92}
}

func (x *ClusterRouterResponse) GetRouter() *ClusterRouter {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *ClusterRouterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterRouterId uint64 `protobuf:"varint,2,opt,name=cluster_router_id,json=clusterRouterId,proto3" json:"cluster_router_id,omitempty"`
	Sync            bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterRouterRequest) Reset() {
	*x = ClusterRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouterRequest) ProtoMessage() {}

func (x *ClusterRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouterRequest.ProtoReflect.Descriptor instead.
func (*ClusterRouterRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{93}
}

func (x *ClusterRouterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterRouterRequest) GetClusterRouterId() uint64 {
	if x != nil {
		return x.ClusterRouterId
	}
	return 0
}

func (x *ClusterRouterRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterRouterByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterRouterByUUIDRequest) Reset() {
	*x = ClusterRouterByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRouterByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRouterByUUIDRequest) ProtoMessage() {}

func (x *ClusterRouterByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRouterByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterRouterByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{94}
}

func (x *ClusterRouterByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterRouterByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterRouterByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster       *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Uuid          string   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TypeCode      string   `protobuf:"bytes,5,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	CapacityBytes uint64   `protobuf:"varint,6,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	UsedBytes     uint64   `protobuf:"varint,7,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	Description   string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Status        string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClusterStorage) Reset() {
	*x = ClusterStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorage) ProtoMessage() {}

func (x *ClusterStorage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorage.ProtoReflect.Descriptor instead.
func (*ClusterStorage) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{95}
}

func (x *ClusterStorage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterStorage) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterStorage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterStorage) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *ClusterStorage) GetCapacityBytes() uint64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *ClusterStorage) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *ClusterStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterStorage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ClusterStorageMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message  *Message          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterStorageMetadataResponse) Reset() {
	*x = ClusterStorageMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageMetadataResponse) ProtoMessage() {}

func (x *ClusterStorageMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageMetadataResponse.ProtoReflect.Descriptor instead.
func (*ClusterStorageMetadataResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{96}
}

func (x *ClusterStorageMetadataResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterStorageMetadataResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateClusterStorageMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        uint64            `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterStorageId uint64            `protobuf:"varint,2,opt,name=cluster_storage_id,json=clusterStorageId,proto3" json:"cluster_storage_id,omitempty"`
	Metadata         map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateClusterStorageMetadataRequest) Reset() {
	*x = UpdateClusterStorageMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterStorageMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterStorageMetadataRequest) ProtoMessage() {}

func (x *UpdateClusterStorageMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterStorageMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterStorageMetadataRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateClusterStorageMetadataRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateClusterStorageMetadataRequest) GetClusterStorageId() uint64 {
	if x != nil {
		return x.ClusterStorageId
	}
	return 0
}

func (x *UpdateClusterStorageMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ClusterStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage *ClusterStorage `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Message *Message        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterStorageResponse) Reset() {
	*x = ClusterStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageResponse) ProtoMessage() {}

func (x *ClusterStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageResponse.ProtoReflect.Descriptor instead.
func (*ClusterStorageResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{98}
}

func (x *ClusterStorageResponse) GetStorage() *ClusterStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ClusterStorageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterStorageId uint64 `protobuf:"varint,2,opt,name=cluster_storage_id,json=clusterStorageId,proto3" json:"cluster_storage_id,omitempty"`
	Sync             bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterStorageRequest) Reset() {
	*x = ClusterStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageRequest) ProtoMessage() {}

func (x *ClusterStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageRequest.ProtoReflect.Descriptor instead.
func (*ClusterStorageRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{99}
}

func (x *ClusterStorageRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterStorageRequest) GetClusterStorageId() uint64 {
	if x != nil {
		return x.ClusterStorageId
	}
	return 0
}

func (x *ClusterStorageRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterStorageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storages   []*ClusterStorage `protobuf:"bytes,1,rep,name=storages,proto3" json:"storages,omitempty"`
	Pagination *Pagination       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterStorageListResponse) Reset() {
	*x = ClusterStorageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageListResponse) ProtoMessage() {}

func (x *ClusterStorageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageListResponse.ProtoReflect.Descriptor instead.
func (*ClusterStorageListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{100}
}

func (x *ClusterStorageListResponse) GetStorages() []*ClusterStorage {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *ClusterStorageListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterStorageListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterStorageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TypeCode  string                `protobuf:"bytes,2,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	Name      string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Limit     *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync      bool                  `protobuf:"varint,6,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterStorageListRequest) Reset() {
	*x = ClusterStorageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStorageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStorageListRequest) ProtoMessage() {}

func (x *ClusterStorageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStorageListRequest.ProtoReflect.Descriptor instead.
func (*ClusterStorageListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{101}
}

func (x *ClusterStorageListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterStorageListRequest) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *ClusterStorageListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterStorageListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterStorageListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterStorageListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterVolumeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tenant      *ClusterTenant    `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Storages    []*ClusterStorage `protobuf:"bytes,5,rep,name=storages,proto3" json:"storages,omitempty"`
	Volumes     []*ClusterVolume  `protobuf:"bytes,6,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *ClusterVolumeGroup) Reset() {
	*x = ClusterVolumeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeGroup) ProtoMessage() {}

func (x *ClusterVolumeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeGroup.ProtoReflect.Descriptor instead.
func (*ClusterVolumeGroup) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{102}
}

func (x *ClusterVolumeGroup) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterVolumeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterVolumeGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterVolumeGroup) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterVolumeGroup) GetStorages() []*ClusterStorage {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *ClusterVolumeGroup) GetVolumes() []*ClusterVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type ClusterVolumeGroupSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ClusterVolumeGroupSnapshot) Reset() {
	*x = ClusterVolumeGroupSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeGroupSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeGroupSnapshot) ProtoMessage() {}

func (x *ClusterVolumeGroupSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeGroupSnapshot.ProtoReflect.Descriptor instead.
func (*ClusterVolumeGroupSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{103}
}

func (x *ClusterVolumeGroupSnapshot) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterVolumeGroupSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterVolumeGroupSnapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetClusterVolumeGroupListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetClusterVolumeGroupListRequest) Reset() {
	*x = GetClusterVolumeGroupListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupListRequest) ProtoMessage() {}

func (x *GetClusterVolumeGroupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupListRequest.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{104}
}

func (x *GetClusterVolumeGroupListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type GetClusterVolumeGroupListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeGroups []*ClusterVolumeGroup `protobuf:"bytes,1,rep,name=volume_groups,json=volumeGroups,proto3" json:"volume_groups,omitempty"`
}

func (x *GetClusterVolumeGroupListResponse) Reset() {
	*x = GetClusterVolumeGroupListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupListResponse) ProtoMessage() {}

func (x *GetClusterVolumeGroupListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupListResponse.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{105}
}

func (x *GetClusterVolumeGroupListResponse) GetVolumeGroups() []*ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroups
	}
	return nil
}

type GetClusterVolumeGroupByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId              uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId        uint64 `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	ClusterVolumeGroupUuid string `protobuf:"bytes,3,opt,name=cluster_volume_group_uuid,json=clusterVolumeGroupUuid,proto3" json:"cluster_volume_group_uuid,omitempty"`
}

func (x *GetClusterVolumeGroupByUUIDRequest) Reset() {
	*x = GetClusterVolumeGroupByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupByUUIDRequest) ProtoMessage() {}

func (x *GetClusterVolumeGroupByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupByUUIDRequest.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{106}
}

func (x *GetClusterVolumeGroupByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *GetClusterVolumeGroupByUUIDRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *GetClusterVolumeGroupByUUIDRequest) GetClusterVolumeGroupUuid() string {
	if x != nil {
		return x.ClusterVolumeGroupUuid
	}
	return ""
}

type GetClusterVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeGroup *ClusterVolumeGroup `protobuf:"bytes,1,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
}

func (x *GetClusterVolumeGroupResponse) Reset() {
	*x = GetClusterVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupResponse) ProtoMessage() {}

func (x *GetClusterVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{107}
}

func (x *GetClusterVolumeGroupResponse) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

type CreateClusterVolumeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn        *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant      *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	VolumeGroup *ClusterVolumeGroup    `protobuf:"bytes,3,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
}

func (x *CreateClusterVolumeGroupRequest) Reset() {
	*x = CreateClusterVolumeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeGroupRequest) ProtoMessage() {}

func (x *CreateClusterVolumeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{108}
}

func (x *CreateClusterVolumeGroupRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterVolumeGroupRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterVolumeGroupRequest) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

type CreateClusterVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeGroup *ClusterVolumeGroup `protobuf:"bytes,1,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	Message     *Message            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterVolumeGroupResponse) Reset() {
	*x = CreateClusterVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeGroupResponse) ProtoMessage() {}

func (x *CreateClusterVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{109}
}

func (x *CreateClusterVolumeGroupResponse) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

func (x *CreateClusterVolumeGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterVolumeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn        *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant      *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	VolumeGroup *ClusterVolumeGroup    `protobuf:"bytes,3,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
}

func (x *DeleteClusterVolumeGroupRequest) Reset() {
	*x = DeleteClusterVolumeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeGroupRequest) ProtoMessage() {}

func (x *DeleteClusterVolumeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{110}
}

func (x *DeleteClusterVolumeGroupRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterVolumeGroupRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterVolumeGroupRequest) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

type DeleteClusterVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterVolumeGroupResponse) Reset() {
	*x = DeleteClusterVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeGroupResponse) ProtoMessage() {}

func (x *DeleteClusterVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{111}
}

func (x *DeleteClusterVolumeGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateClusterVolumeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn          *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant        *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	VolumeGroup   *ClusterVolumeGroup    `protobuf:"bytes,3,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	AddVolumes    []*ClusterVolume       `protobuf:"bytes,4,rep,name=add_volumes,json=addVolumes,proto3" json:"add_volumes,omitempty"`
	DeleteVolumes []*ClusterVolume       `protobuf:"bytes,5,rep,name=delete_volumes,json=deleteVolumes,proto3" json:"delete_volumes,omitempty"`
}

func (x *UpdateClusterVolumeGroupRequest) Reset() {
	*x = UpdateClusterVolumeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterVolumeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterVolumeGroupRequest) ProtoMessage() {}

func (x *UpdateClusterVolumeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterVolumeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterVolumeGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{112}
}

func (x *UpdateClusterVolumeGroupRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *UpdateClusterVolumeGroupRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *UpdateClusterVolumeGroupRequest) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

func (x *UpdateClusterVolumeGroupRequest) GetAddVolumes() []*ClusterVolume {
	if x != nil {
		return x.AddVolumes
	}
	return nil
}

func (x *UpdateClusterVolumeGroupRequest) GetDeleteVolumes() []*ClusterVolume {
	if x != nil {
		return x.DeleteVolumes
	}
	return nil
}

type UpdateClusterVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateClusterVolumeGroupResponse) Reset() {
	*x = UpdateClusterVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterVolumeGroupResponse) ProtoMessage() {}

func (x *UpdateClusterVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{113}
}

func (x *UpdateClusterVolumeGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateClusterVolumeGroupSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn                *ClusterConnectionInfo      `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant              *ClusterTenant              `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	VolumeGroup         *ClusterVolumeGroup         `protobuf:"bytes,3,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	VolumeGroupSnapshot *ClusterVolumeGroupSnapshot `protobuf:"bytes,4,opt,name=volume_group_snapshot,json=volumeGroupSnapshot,proto3" json:"volume_group_snapshot,omitempty"`
}

func (x *CreateClusterVolumeGroupSnapshotRequest) Reset() {
	*x = CreateClusterVolumeGroupSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeGroupSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeGroupSnapshotRequest) ProtoMessage() {}

func (x *CreateClusterVolumeGroupSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeGroupSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{114}
}

func (x *CreateClusterVolumeGroupSnapshotRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterVolumeGroupSnapshotRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterVolumeGroupSnapshotRequest) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

func (x *CreateClusterVolumeGroupSnapshotRequest) GetVolumeGroupSnapshot() *ClusterVolumeGroupSnapshot {
	if x != nil {
		return x.VolumeGroupSnapshot
	}
	return nil
}

type CreateClusterVolumeGroupSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeGroupSnapshot *ClusterVolumeGroupSnapshot `protobuf:"bytes,1,opt,name=volume_group_snapshot,json=volumeGroupSnapshot,proto3" json:"volume_group_snapshot,omitempty"`
	Message             *Message                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterVolumeGroupSnapshotResponse) Reset() {
	*x = CreateClusterVolumeGroupSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeGroupSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeGroupSnapshotResponse) ProtoMessage() {}

func (x *CreateClusterVolumeGroupSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeGroupSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{115}
}

func (x *CreateClusterVolumeGroupSnapshotResponse) GetVolumeGroupSnapshot() *ClusterVolumeGroupSnapshot {
	if x != nil {
		return x.VolumeGroupSnapshot
	}
	return nil
}

func (x *CreateClusterVolumeGroupSnapshotResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterVolumeGroupSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn                *ClusterConnectionInfo      `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant              *ClusterTenant              `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	VolumeGroup         *ClusterVolumeGroup         `protobuf:"bytes,3,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	VolumeGroupSnapshot *ClusterVolumeGroupSnapshot `protobuf:"bytes,4,opt,name=volume_group_snapshot,json=volumeGroupSnapshot,proto3" json:"volume_group_snapshot,omitempty"`
}

func (x *DeleteClusterVolumeGroupSnapshotRequest) Reset() {
	*x = DeleteClusterVolumeGroupSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeGroupSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeGroupSnapshotRequest) ProtoMessage() {}

func (x *DeleteClusterVolumeGroupSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeGroupSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{116}
}

func (x *DeleteClusterVolumeGroupSnapshotRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterVolumeGroupSnapshotRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterVolumeGroupSnapshotRequest) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

func (x *DeleteClusterVolumeGroupSnapshotRequest) GetVolumeGroupSnapshot() *ClusterVolumeGroupSnapshot {
	if x != nil {
		return x.VolumeGroupSnapshot
	}
	return nil
}

type DeleteClusterVolumeGroupSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterVolumeGroupSnapshotResponse) Reset() {
	*x = DeleteClusterVolumeGroupSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeGroupSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeGroupSnapshotResponse) ProtoMessage() {}

func (x *DeleteClusterVolumeGroupSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeGroupSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteClusterVolumeGroupSnapshotResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetClusterVolumeGroupSnapshotListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
}

func (x *GetClusterVolumeGroupSnapshotListRequest) Reset() {
	*x = GetClusterVolumeGroupSnapshotListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupSnapshotListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupSnapshotListRequest) ProtoMessage() {}

func (x *GetClusterVolumeGroupSnapshotListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupSnapshotListRequest.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupSnapshotListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{118}
}

func (x *GetClusterVolumeGroupSnapshotListRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

type GetClusterVolumeGroupSnapshotListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeGroup         *ClusterVolumeGroup         `protobuf:"bytes,1,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	VolumeGroupSnapshot *ClusterVolumeGroupSnapshot `protobuf:"bytes,2,opt,name=volume_group_snapshot,json=volumeGroupSnapshot,proto3" json:"volume_group_snapshot,omitempty"`
}

func (x *GetClusterVolumeGroupSnapshotListResult) Reset() {
	*x = GetClusterVolumeGroupSnapshotListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupSnapshotListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupSnapshotListResult) ProtoMessage() {}

func (x *GetClusterVolumeGroupSnapshotListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupSnapshotListResult.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupSnapshotListResult) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{119}
}

func (x *GetClusterVolumeGroupSnapshotListResult) GetVolumeGroup() *ClusterVolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

func (x *GetClusterVolumeGroupSnapshotListResult) GetVolumeGroupSnapshot() *ClusterVolumeGroupSnapshot {
	if x != nil {
		return x.VolumeGroupSnapshot
	}
	return nil
}

type GetClusterVolumeGroupSnapshotListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeGroupSnapshots []*GetClusterVolumeGroupSnapshotListResult `protobuf:"bytes,1,rep,name=volume_group_snapshots,json=volumeGroupSnapshots,proto3" json:"volume_group_snapshots,omitempty"`
	Message              *Message                                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetClusterVolumeGroupSnapshotListResponse) Reset() {
	*x = GetClusterVolumeGroupSnapshotListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterVolumeGroupSnapshotListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterVolumeGroupSnapshotListResponse) ProtoMessage() {}

func (x *GetClusterVolumeGroupSnapshotListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterVolumeGroupSnapshotListResponse.ProtoReflect.Descriptor instead.
func (*GetClusterVolumeGroupSnapshotListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{120}
}

func (x *GetClusterVolumeGroupSnapshotListResponse) GetVolumeGroupSnapshots() []*GetClusterVolumeGroupSnapshotListResult {
	if x != nil {
		return x.VolumeGroupSnapshots
	}
	return nil
}

func (x *GetClusterVolumeGroupSnapshotListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterVolumeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                           string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ClusterVolumeGroupSnapshotUuid string `protobuf:"bytes,3,opt,name=cluster_volume_group_snapshot_uuid,json=clusterVolumeGroupSnapshotUuid,proto3" json:"cluster_volume_group_snapshot_uuid,omitempty"`
	Name                           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description                    string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	SizeBytes                      uint64 `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Status                         string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt                      uint64 `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ClusterVolumeSnapshot) Reset() {
	*x = ClusterVolumeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeSnapshot) ProtoMessage() {}

func (x *ClusterVolumeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeSnapshot.ProtoReflect.Descriptor instead.
func (*ClusterVolumeSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{121}
}

func (x *ClusterVolumeSnapshot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterVolumeSnapshot) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterVolumeSnapshot) GetClusterVolumeGroupSnapshotUuid() string {
	if x != nil {
		return x.ClusterVolumeGroupSnapshotUuid
	}
	return ""
}

func (x *ClusterVolumeSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterVolumeSnapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterVolumeSnapshot) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *ClusterVolumeSnapshot) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterVolumeSnapshot) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ClusterVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster     *Cluster                 `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant      *ClusterTenant           `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Storage     *ClusterStorage          `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
	Snapshots   []*ClusterVolumeSnapshot `protobuf:"bytes,5,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	Uuid        string                   `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description string                   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	SizeBytes   uint64                   `protobuf:"varint,9,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Multiattach bool                     `protobuf:"varint,10,opt,name=multiattach,proto3" json:"multiattach,omitempty"`
	Bootable    bool                     `protobuf:"varint,11,opt,name=bootable,proto3" json:"bootable,omitempty"`
	Readonly    bool                     `protobuf:"varint,12,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Status      string                   `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClusterVolume) Reset() {
	*x = ClusterVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolume) ProtoMessage() {}

func (x *ClusterVolume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolume.ProtoReflect.Descriptor instead.
func (*ClusterVolume) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{122}
}

func (x *ClusterVolume) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterVolume) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterVolume) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterVolume) GetStorage() *ClusterStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ClusterVolume) GetSnapshots() []*ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *ClusterVolume) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterVolume) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterVolume) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *ClusterVolume) GetMultiattach() bool {
	if x != nil {
		return x.Multiattach
	}
	return false
}

func (x *ClusterVolume) GetBootable() bool {
	if x != nil {
		return x.Bootable
	}
	return false
}

func (x *ClusterVolume) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *ClusterVolume) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ClusterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume  *ClusterVolume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Message *Message       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterVolumeResponse) Reset() {
	*x = ClusterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeResponse) ProtoMessage() {}

func (x *ClusterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeResponse.ProtoReflect.Descriptor instead.
func (*ClusterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{123}
}

func (x *ClusterVolumeResponse) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ClusterVolumeResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterVolumeId uint64 `protobuf:"varint,2,opt,name=cluster_volume_id,json=clusterVolumeId,proto3" json:"cluster_volume_id,omitempty"`
	Sync            bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterVolumeRequest) Reset() {
	*x = ClusterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeRequest) ProtoMessage() {}

func (x *ClusterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeRequest.ProtoReflect.Descriptor instead.
func (*ClusterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{124}
}

func (x *ClusterVolumeRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterVolumeRequest) GetClusterVolumeId() uint64 {
	if x != nil {
		return x.ClusterVolumeId
	}
	return 0
}

func (x *ClusterVolumeRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterVolumeByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterVolumeByUUIDRequest) Reset() {
	*x = ClusterVolumeByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeByUUIDRequest) ProtoMessage() {}

func (x *ClusterVolumeByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterVolumeByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{125}
}

func (x *ClusterVolumeByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterVolumeByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterVolumeByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterVolumeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes    []*ClusterVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterVolumeListResponse) Reset() {
	*x = ClusterVolumeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeListResponse) ProtoMessage() {}

func (x *ClusterVolumeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeListResponse.ProtoReflect.Descriptor instead.
func (*ClusterVolumeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{126}
}

func (x *ClusterVolumeListResponse) GetVolumes() []*ClusterVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *ClusterVolumeListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterVolumeListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterVolumeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId   uint64                `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	ClusterStorageId  uint64                `protobuf:"varint,3,opt,name=cluster_storage_id,json=clusterStorageId,proto3" json:"cluster_storage_id,omitempty"`
	ClusterInstanceId uint64                `protobuf:"varint,4,opt,name=cluster_instance_id,json=clusterInstanceId,proto3" json:"cluster_instance_id,omitempty"`
	Uuid              string                `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name              string                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Limit             *wrappers.UInt64Value `protobuf:"bytes,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset            *wrappers.UInt64Value `protobuf:"bytes,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync              bool                  `protobuf:"varint,9,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterVolumeListRequest) Reset() {
	*x = ClusterVolumeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVolumeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVolumeListRequest) ProtoMessage() {}

func (x *ClusterVolumeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVolumeListRequest.ProtoReflect.Descriptor instead.
func (*ClusterVolumeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{127}
}

func (x *ClusterVolumeListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterVolumeListRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *ClusterVolumeListRequest) GetClusterStorageId() uint64 {
	if x != nil {
		return x.ClusterStorageId
	}
	return 0
}

func (x *ClusterVolumeListRequest) GetClusterInstanceId() uint64 {
	if x != nil {
		return x.ClusterInstanceId
	}
	return 0
}

func (x *ClusterVolumeListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterVolumeListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterVolumeListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterVolumeListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterVolumeListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CreateClusterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant  *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Storage *ClusterStorage        `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	Volume  *ClusterVolume         `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *CreateClusterVolumeRequest) Reset() {
	*x = CreateClusterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeRequest) ProtoMessage() {}

func (x *CreateClusterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{128}
}

func (x *CreateClusterVolumeRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterVolumeRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterVolumeRequest) GetStorage() *ClusterStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *CreateClusterVolumeRequest) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type CreateClusterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume  *ClusterVolume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Message *Message       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterVolumeResponse) Reset() {
	*x = CreateClusterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeResponse) ProtoMessage() {}

func (x *CreateClusterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{129}
}

func (x *CreateClusterVolumeResponse) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CreateClusterVolumeResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ImportClusterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn           *ClusterConnectionInfo   `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant         *ClusterTenant           `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SourceStorage  *ClusterStorage          `protobuf:"bytes,3,opt,name=source_storage,json=sourceStorage,proto3" json:"source_storage,omitempty"`
	TargetStorage  *ClusterStorage          `protobuf:"bytes,4,opt,name=target_storage,json=targetStorage,proto3" json:"target_storage,omitempty"`
	TargetMetadata map[string]string        `protobuf:"bytes,5,rep,name=target_metadata,json=targetMetadata,proto3" json:"target_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Volume         *ClusterVolume           `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Snapshots      []*ClusterVolumeSnapshot `protobuf:"bytes,7,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *ImportClusterVolumeRequest) Reset() {
	*x = ImportClusterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportClusterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportClusterVolumeRequest) ProtoMessage() {}

func (x *ImportClusterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportClusterVolumeRequest.ProtoReflect.Descriptor instead.
func (*ImportClusterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{130}
}

func (x *ImportClusterVolumeRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *ImportClusterVolumeRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ImportClusterVolumeRequest) GetSourceStorage() *ClusterStorage {
	if x != nil {
		return x.SourceStorage
	}
	return nil
}

func (x *ImportClusterVolumeRequest) GetTargetStorage() *ClusterStorage {
	if x != nil {
		return x.TargetStorage
	}
	return nil
}

func (x *ImportClusterVolumeRequest) GetTargetMetadata() map[string]string {
	if x != nil {
		return x.TargetMetadata
	}
	return nil
}

func (x *ImportClusterVolumeRequest) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ImportClusterVolumeRequest) GetSnapshots() []*ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type ImportClusterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceStorage *ClusterStorage `protobuf:"bytes,1,opt,name=source_storage,json=sourceStorage,proto3" json:"source_storage,omitempty"`
	TargetStorage *ClusterStorage `protobuf:"bytes,2,opt,name=target_storage,json=targetStorage,proto3" json:"target_storage,omitempty"`
	VolumePair    *VolumePair     `protobuf:"bytes,3,opt,name=volume_pair,json=volumePair,proto3" json:"volume_pair,omitempty"`
	SnapshotPairs []*SnapshotPair `protobuf:"bytes,4,rep,name=snapshot_pairs,json=snapshotPairs,proto3" json:"snapshot_pairs,omitempty"`
	Message       *Message        `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ImportClusterVolumeResponse) Reset() {
	*x = ImportClusterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportClusterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportClusterVolumeResponse) ProtoMessage() {}

func (x *ImportClusterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportClusterVolumeResponse.ProtoReflect.Descriptor instead.
func (*ImportClusterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{131}
}

func (x *ImportClusterVolumeResponse) GetSourceStorage() *ClusterStorage {
	if x != nil {
		return x.SourceStorage
	}
	return nil
}

func (x *ImportClusterVolumeResponse) GetTargetStorage() *ClusterStorage {
	if x != nil {
		return x.TargetStorage
	}
	return nil
}

func (x *ImportClusterVolumeResponse) GetVolumePair() *VolumePair {
	if x != nil {
		return x.VolumePair
	}
	return nil
}

func (x *ImportClusterVolumeResponse) GetSnapshotPairs() []*SnapshotPair {
	if x != nil {
		return x.SnapshotPairs
	}
	return nil
}

func (x *ImportClusterVolumeResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CopyClusterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn           *ClusterConnectionInfo   `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant         *ClusterTenant           `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SourceStorage  *ClusterStorage          `protobuf:"bytes,3,opt,name=source_storage,json=sourceStorage,proto3" json:"source_storage,omitempty"`
	TargetStorage  *ClusterStorage          `protobuf:"bytes,4,opt,name=target_storage,json=targetStorage,proto3" json:"target_storage,omitempty"`
	TargetMetadata map[string]string        `protobuf:"bytes,5,rep,name=target_metadata,json=targetMetadata,proto3" json:"target_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Volume         *ClusterVolume           `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Snapshots      []*ClusterVolumeSnapshot `protobuf:"bytes,7,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *CopyClusterVolumeRequest) Reset() {
	*x = CopyClusterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyClusterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyClusterVolumeRequest) ProtoMessage() {}

func (x *CopyClusterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyClusterVolumeRequest.ProtoReflect.Descriptor instead.
func (*CopyClusterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{132}
}

func (x *CopyClusterVolumeRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CopyClusterVolumeRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CopyClusterVolumeRequest) GetSourceStorage() *ClusterStorage {
	if x != nil {
		return x.SourceStorage
	}
	return nil
}

func (x *CopyClusterVolumeRequest) GetTargetStorage() *ClusterStorage {
	if x != nil {
		return x.TargetStorage
	}
	return nil
}

func (x *CopyClusterVolumeRequest) GetTargetMetadata() map[string]string {
	if x != nil {
		return x.TargetMetadata
	}
	return nil
}

func (x *CopyClusterVolumeRequest) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CopyClusterVolumeRequest) GetSnapshots() []*ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type CopyClusterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceStorage *ClusterStorage          `protobuf:"bytes,1,opt,name=source_storage,json=sourceStorage,proto3" json:"source_storage,omitempty"`
	TargetStorage *ClusterStorage          `protobuf:"bytes,2,opt,name=target_storage,json=targetStorage,proto3" json:"target_storage,omitempty"`
	Volume        *ClusterVolume           `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Snapshots     []*ClusterVolumeSnapshot `protobuf:"bytes,4,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	Message       *Message                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CopyClusterVolumeResponse) Reset() {
	*x = CopyClusterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyClusterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyClusterVolumeResponse) ProtoMessage() {}

func (x *CopyClusterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyClusterVolumeResponse.ProtoReflect.Descriptor instead.
func (*CopyClusterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{133}
}

func (x *CopyClusterVolumeResponse) GetSourceStorage() *ClusterStorage {
	if x != nil {
		return x.SourceStorage
	}
	return nil
}

func (x *CopyClusterVolumeResponse) GetTargetStorage() *ClusterStorage {
	if x != nil {
		return x.TargetStorage
	}
	return nil
}

func (x *CopyClusterVolumeResponse) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CopyClusterVolumeResponse) GetSnapshots() []*ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *CopyClusterVolumeResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterVolumeCopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn           *ClusterConnectionInfo   `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant         *ClusterTenant           `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SourceStorage  *ClusterStorage          `protobuf:"bytes,3,opt,name=source_storage,json=sourceStorage,proto3" json:"source_storage,omitempty"`
	TargetStorage  *ClusterStorage          `protobuf:"bytes,4,opt,name=target_storage,json=targetStorage,proto3" json:"target_storage,omitempty"`
	TargetMetadata map[string]string        `protobuf:"bytes,5,rep,name=target_metadata,json=targetMetadata,proto3" json:"target_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Volume         *ClusterVolume           `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	VolumeId       uint64                   `protobuf:"varint,7,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Snapshots      []*ClusterVolumeSnapshot `protobuf:"bytes,8,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *DeleteClusterVolumeCopyRequest) Reset() {
	*x = DeleteClusterVolumeCopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeCopyRequest) ProtoMessage() {}

func (x *DeleteClusterVolumeCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeCopyRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeCopyRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{134}
}

func (x *DeleteClusterVolumeCopyRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterVolumeCopyRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterVolumeCopyRequest) GetSourceStorage() *ClusterStorage {
	if x != nil {
		return x.SourceStorage
	}
	return nil
}

func (x *DeleteClusterVolumeCopyRequest) GetTargetStorage() *ClusterStorage {
	if x != nil {
		return x.TargetStorage
	}
	return nil
}

func (x *DeleteClusterVolumeCopyRequest) GetTargetMetadata() map[string]string {
	if x != nil {
		return x.TargetMetadata
	}
	return nil
}

func (x *DeleteClusterVolumeCopyRequest) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *DeleteClusterVolumeCopyRequest) GetVolumeId() uint64 {
	if x != nil {
		return x.VolumeId
	}
	return 0
}

func (x *DeleteClusterVolumeCopyRequest) GetSnapshots() []*ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type DeleteClusterVolumeCopyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterVolumeCopyResponse) Reset() {
	*x = DeleteClusterVolumeCopyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeCopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeCopyResponse) ProtoMessage() {}

func (x *DeleteClusterVolumeCopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeCopyResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeCopyResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteClusterVolumeCopyResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateClusterVolumeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn     *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant   *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Volume   *ClusterVolume         `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Snapshot *ClusterVolumeSnapshot `protobuf:"bytes,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *CreateClusterVolumeSnapshotRequest) Reset() {
	*x = CreateClusterVolumeSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeSnapshotRequest) ProtoMessage() {}

func (x *CreateClusterVolumeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{136}
}

func (x *CreateClusterVolumeSnapshotRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterVolumeSnapshotRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterVolumeSnapshotRequest) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CreateClusterVolumeSnapshotRequest) GetSnapshot() *ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type CreateClusterVolumeSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *ClusterVolumeSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Message  *Message               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterVolumeSnapshotResponse) Reset() {
	*x = CreateClusterVolumeSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterVolumeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterVolumeSnapshotResponse) ProtoMessage() {}

func (x *CreateClusterVolumeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterVolumeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterVolumeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{137}
}

func (x *CreateClusterVolumeSnapshotResponse) GetSnapshot() *ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *CreateClusterVolumeSnapshotResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn   *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Volume *ClusterVolume         `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *DeleteClusterVolumeRequest) Reset() {
	*x = DeleteClusterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeRequest) ProtoMessage() {}

func (x *DeleteClusterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{138}
}

func (x *DeleteClusterVolumeRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterVolumeRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterVolumeRequest) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type DeleteClusterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterVolumeResponse) Reset() {
	*x = DeleteClusterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeResponse) ProtoMessage() {}

func (x *DeleteClusterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{139}
}

func (x *DeleteClusterVolumeResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SyncClusterVolumeSnapshotListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *SyncClusterVolumeSnapshotListRequest) Reset() {
	*x = SyncClusterVolumeSnapshotListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncClusterVolumeSnapshotListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClusterVolumeSnapshotListRequest) ProtoMessage() {}

func (x *SyncClusterVolumeSnapshotListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClusterVolumeSnapshotListRequest.ProtoReflect.Descriptor instead.
func (*SyncClusterVolumeSnapshotListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{140}
}

func (x *SyncClusterVolumeSnapshotListRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type SyncClusterVolumeSnapshotListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SyncClusterVolumeSnapshotListResponse) Reset() {
	*x = SyncClusterVolumeSnapshotListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncClusterVolumeSnapshotListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncClusterVolumeSnapshotListResponse) ProtoMessage() {}

func (x *SyncClusterVolumeSnapshotListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncClusterVolumeSnapshotListResponse.ProtoReflect.Descriptor instead.
func (*SyncClusterVolumeSnapshotListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{141}
}

func (x *SyncClusterVolumeSnapshotListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type VolumePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *ClusterVolume `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target     *ClusterVolume `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	SourceFile string         `protobuf:"bytes,3,opt,name=SourceFile,proto3" json:"SourceFile,omitempty"`
	TargetFile string         `protobuf:"bytes,4,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
}

func (x *VolumePair) Reset() {
	*x = VolumePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumePair) ProtoMessage() {}

func (x *VolumePair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumePair.ProtoReflect.Descriptor instead.
func (*VolumePair) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{142}
}

func (x *VolumePair) GetSource() *ClusterVolume {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *VolumePair) GetTarget() *ClusterVolume {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *VolumePair) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *VolumePair) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

type SnapshotPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *ClusterVolumeSnapshot `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target     *ClusterVolumeSnapshot `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	SourceFile string                 `protobuf:"bytes,3,opt,name=SourceFile,proto3" json:"SourceFile,omitempty"`
	TargetFile string                 `protobuf:"bytes,4,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
}

func (x *SnapshotPair) Reset() {
	*x = SnapshotPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotPair) ProtoMessage() {}

func (x *SnapshotPair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotPair.ProtoReflect.Descriptor instead.
func (*SnapshotPair) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{143}
}

func (x *SnapshotPair) GetSource() *ClusterVolumeSnapshot {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SnapshotPair) GetTarget() *ClusterVolumeSnapshot {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SnapshotPair) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *SnapshotPair) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

type UnmanageClusterVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn           *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant         *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SourceStorage  *ClusterStorage        `protobuf:"bytes,3,opt,name=source_storage,json=sourceStorage,proto3" json:"source_storage,omitempty"`
	TargetStorage  *ClusterStorage        `protobuf:"bytes,4,opt,name=target_storage,json=targetStorage,proto3" json:"target_storage,omitempty"`
	TargetMetadata map[string]string      `protobuf:"bytes,5,rep,name=target_metadata,json=targetMetadata,proto3" json:"target_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VolumePair     *VolumePair            `protobuf:"bytes,6,opt,name=volume_pair,json=volumePair,proto3" json:"volume_pair,omitempty"`
	VolumeId       uint64                 `protobuf:"varint,7,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	SnapshotPairs  []*SnapshotPair        `protobuf:"bytes,8,rep,name=snapshot_pairs,json=snapshotPairs,proto3" json:"snapshot_pairs,omitempty"`
}

func (x *UnmanageClusterVolumeRequest) Reset() {
	*x = UnmanageClusterVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmanageClusterVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmanageClusterVolumeRequest) ProtoMessage() {}

func (x *UnmanageClusterVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmanageClusterVolumeRequest.ProtoReflect.Descriptor instead.
func (*UnmanageClusterVolumeRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{144}
}

func (x *UnmanageClusterVolumeRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *UnmanageClusterVolumeRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *UnmanageClusterVolumeRequest) GetSourceStorage() *ClusterStorage {
	if x != nil {
		return x.SourceStorage
	}
	return nil
}

func (x *UnmanageClusterVolumeRequest) GetTargetStorage() *ClusterStorage {
	if x != nil {
		return x.TargetStorage
	}
	return nil
}

func (x *UnmanageClusterVolumeRequest) GetTargetMetadata() map[string]string {
	if x != nil {
		return x.TargetMetadata
	}
	return nil
}

func (x *UnmanageClusterVolumeRequest) GetVolumePair() *VolumePair {
	if x != nil {
		return x.VolumePair
	}
	return nil
}

func (x *UnmanageClusterVolumeRequest) GetVolumeId() uint64 {
	if x != nil {
		return x.VolumeId
	}
	return 0
}

func (x *UnmanageClusterVolumeRequest) GetSnapshotPairs() []*SnapshotPair {
	if x != nil {
		return x.SnapshotPairs
	}
	return nil
}

type UnmanageClusterVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UnmanageClusterVolumeResponse) Reset() {
	*x = UnmanageClusterVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmanageClusterVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmanageClusterVolumeResponse) ProtoMessage() {}

func (x *UnmanageClusterVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmanageClusterVolumeResponse.ProtoReflect.Descriptor instead.
func (*UnmanageClusterVolumeResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{145}
}

func (x *UnmanageClusterVolumeResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterVolumeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn     *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant   *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Snapshot *ClusterVolumeSnapshot `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *DeleteClusterVolumeSnapshotRequest) Reset() {
	*x = DeleteClusterVolumeSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeSnapshotRequest) ProtoMessage() {}

func (x *DeleteClusterVolumeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{146}
}

func (x *DeleteClusterVolumeSnapshotRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterVolumeSnapshotRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterVolumeSnapshotRequest) GetSnapshot() *ClusterVolumeSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type DeleteClusterVolumeSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterVolumeSnapshotResponse) Reset() {
	*x = DeleteClusterVolumeSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVolumeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVolumeSnapshotResponse) ProtoMessage() {}

func (x *DeleteClusterVolumeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVolumeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterVolumeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{147}
}

func (x *DeleteClusterVolumeSnapshotResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterFloatingIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid        string          `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Description string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IpAddress   string          `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Status      string          `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Tenant      *ClusterTenant  `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Network     *ClusterNetwork `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *ClusterFloatingIP) Reset() {
	*x = ClusterFloatingIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFloatingIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFloatingIP) ProtoMessage() {}

func (x *ClusterFloatingIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFloatingIP.ProtoReflect.Descriptor instead.
func (*ClusterFloatingIP) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{148}
}

func (x *ClusterFloatingIP) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterFloatingIP) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterFloatingIP) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterFloatingIP) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ClusterFloatingIP) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterFloatingIP) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterFloatingIP) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type ClusterKeypair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster     *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Fingerprint string   `protobuf:"bytes,4,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	PublicKey   string   `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	TypeCode    string   `protobuf:"bytes,6,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
}

func (x *ClusterKeypair) Reset() {
	*x = ClusterKeypair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterKeypair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterKeypair) ProtoMessage() {}

func (x *ClusterKeypair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterKeypair.ProtoReflect.Descriptor instead.
func (*ClusterKeypair) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{149}
}

func (x *ClusterKeypair) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterKeypair) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterKeypair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterKeypair) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *ClusterKeypair) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ClusterKeypair) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

type ClusterInstanceExtraSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClusterInstanceExtraSpec) Reset() {
	*x = ClusterInstanceExtraSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceExtraSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceExtraSpec) ProtoMessage() {}

func (x *ClusterInstanceExtraSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceExtraSpec.ProtoReflect.Descriptor instead.
func (*ClusterInstanceExtraSpec) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{150}
}

func (x *ClusterInstanceExtraSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ClusterInstanceExtraSpec) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ClusterInstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster             *Cluster                    `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Uuid                string                      `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	VcpuTotalCnt        uint32                      `protobuf:"varint,6,opt,name=vcpu_total_cnt,json=vcpuTotalCnt,proto3" json:"vcpu_total_cnt,omitempty"`
	MemTotalBytes       uint64                      `protobuf:"varint,7,opt,name=mem_total_bytes,json=memTotalBytes,proto3" json:"mem_total_bytes,omitempty"`
	DiskTotalBytes      uint64                      `protobuf:"varint,8,opt,name=disk_total_bytes,json=diskTotalBytes,proto3" json:"disk_total_bytes,omitempty"`
	SwapTotalBytes      uint64                      `protobuf:"varint,9,opt,name=swap_total_bytes,json=swapTotalBytes,proto3" json:"swap_total_bytes,omitempty"`
	EphemeralTotalBytes uint64                      `protobuf:"varint,10,opt,name=ephemeral_total_bytes,json=ephemeralTotalBytes,proto3" json:"ephemeral_total_bytes,omitempty"`
	ExtraSpecs          []*ClusterInstanceExtraSpec `protobuf:"bytes,11,rep,name=extra_specs,json=extraSpecs,proto3" json:"extra_specs,omitempty"`
}

func (x *ClusterInstanceSpec) Reset() {
	*x = ClusterInstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceSpec) ProtoMessage() {}

func (x *ClusterInstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceSpec.ProtoReflect.Descriptor instead.
func (*ClusterInstanceSpec) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{151}
}

func (x *ClusterInstanceSpec) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterInstanceSpec) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterInstanceSpec) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterInstanceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInstanceSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterInstanceSpec) GetVcpuTotalCnt() uint32 {
	if x != nil {
		return x.VcpuTotalCnt
	}
	return 0
}

func (x *ClusterInstanceSpec) GetMemTotalBytes() uint64 {
	if x != nil {
		return x.MemTotalBytes
	}
	return 0
}

func (x *ClusterInstanceSpec) GetDiskTotalBytes() uint64 {
	if x != nil {
		return x.DiskTotalBytes
	}
	return 0
}

func (x *ClusterInstanceSpec) GetSwapTotalBytes() uint64 {
	if x != nil {
		return x.SwapTotalBytes
	}
	return 0
}

func (x *ClusterInstanceSpec) GetEphemeralTotalBytes() uint64 {
	if x != nil {
		return x.EphemeralTotalBytes
	}
	return 0
}

func (x *ClusterInstanceSpec) GetExtraSpecs() []*ClusterInstanceExtraSpec {
	if x != nil {
		return x.ExtraSpecs
	}
	return nil
}

type ClusterSecurityGroupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                string                `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Direction           string                `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	Description         string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	NetworkCidr         string                `protobuf:"bytes,5,opt,name=network_cidr,json=networkCidr,proto3" json:"network_cidr,omitempty"`
	PortRangeMax        uint32                `protobuf:"varint,6,opt,name=port_range_max,json=portRangeMax,proto3" json:"port_range_max,omitempty"`
	PortRangeMin        uint32                `protobuf:"varint,7,opt,name=port_range_min,json=portRangeMin,proto3" json:"port_range_min,omitempty"`
	Protocol            string                `protobuf:"bytes,8,opt,name=protocol,proto3" json:"protocol,omitempty"`
	EtherType           uint32                `protobuf:"varint,9,opt,name=ether_type,json=etherType,proto3" json:"ether_type,omitempty"`
	RemoteSecurityGroup *ClusterSecurityGroup `protobuf:"bytes,10,opt,name=remote_security_group,json=remoteSecurityGroup,proto3" json:"remote_security_group,omitempty"`
}

func (x *ClusterSecurityGroupRule) Reset() {
	*x = ClusterSecurityGroupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupRule) ProtoMessage() {}

func (x *ClusterSecurityGroupRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupRule.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupRule) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{152}
}

func (x *ClusterSecurityGroupRule) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterSecurityGroupRule) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterSecurityGroupRule) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ClusterSecurityGroupRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterSecurityGroupRule) GetNetworkCidr() string {
	if x != nil {
		return x.NetworkCidr
	}
	return ""
}

func (x *ClusterSecurityGroupRule) GetPortRangeMax() uint32 {
	if x != nil {
		return x.PortRangeMax
	}
	return 0
}

func (x *ClusterSecurityGroupRule) GetPortRangeMin() uint32 {
	if x != nil {
		return x.PortRangeMin
	}
	return 0
}

func (x *ClusterSecurityGroupRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ClusterSecurityGroupRule) GetEtherType() uint32 {
	if x != nil {
		return x.EtherType
	}
	return 0
}

func (x *ClusterSecurityGroupRule) GetRemoteSecurityGroup() *ClusterSecurityGroup {
	if x != nil {
		return x.RemoteSecurityGroup
	}
	return nil
}

type ClusterSecurityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster     *Cluster                    `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant      *ClusterTenant              `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Uuid        string                      `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string                      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Rules       []*ClusterSecurityGroupRule `protobuf:"bytes,7,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ClusterSecurityGroup) Reset() {
	*x = ClusterSecurityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroup) ProtoMessage() {}

func (x *ClusterSecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroup.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroup) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{153}
}

func (x *ClusterSecurityGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterSecurityGroup) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterSecurityGroup) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterSecurityGroup) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterSecurityGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterSecurityGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterSecurityGroup) GetRules() []*ClusterSecurityGroupRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ClusterInstanceNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Network    *ClusterNetwork    `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Subnet     *ClusterSubnet     `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	FloatingIp *ClusterFloatingIP `protobuf:"bytes,4,opt,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty"`
	DhcpFlag   bool               `protobuf:"varint,5,opt,name=dhcp_flag,json=dhcpFlag,proto3" json:"dhcp_flag,omitempty"`
	IpAddress  string             `protobuf:"bytes,6,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *ClusterInstanceNetwork) Reset() {
	*x = ClusterInstanceNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceNetwork) ProtoMessage() {}

func (x *ClusterInstanceNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceNetwork.ProtoReflect.Descriptor instead.
func (*ClusterInstanceNetwork) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{154}
}

func (x *ClusterInstanceNetwork) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterInstanceNetwork) GetNetwork() *ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterInstanceNetwork) GetSubnet() *ClusterSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ClusterInstanceNetwork) GetFloatingIp() *ClusterFloatingIP {
	if x != nil {
		return x.FloatingIp
	}
	return nil
}

func (x *ClusterInstanceNetwork) GetDhcpFlag() bool {
	if x != nil {
		return x.DhcpFlag
	}
	return false
}

func (x *ClusterInstanceNetwork) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type ClusterInstanceVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage    *ClusterStorage `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Volume     *ClusterVolume  `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	DevicePath string          `protobuf:"bytes,3,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
	BootIndex  int64           `protobuf:"varint,4,opt,name=boot_index,json=bootIndex,proto3" json:"boot_index,omitempty"`
}

func (x *ClusterInstanceVolume) Reset() {
	*x = ClusterInstanceVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceVolume) ProtoMessage() {}

func (x *ClusterInstanceVolume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceVolume.ProtoReflect.Descriptor instead.
func (*ClusterInstanceVolume) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{155}
}

func (x *ClusterInstanceVolume) GetStorage() *ClusterStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ClusterInstanceVolume) GetVolume() *ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ClusterInstanceVolume) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

func (x *ClusterInstanceVolume) GetBootIndex() int64 {
	if x != nil {
		return x.BootIndex
	}
	return 0
}

type ClusterInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid             string                    `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name             string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status           string                    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	State            string                    `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Cluster          *Cluster                  `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant           *ClusterTenant            `protobuf:"bytes,8,opt,name=tenant,proto3" json:"tenant,omitempty"`
	AvailabilityZone *ClusterAvailabilityZone  `protobuf:"bytes,9,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Hypervisor       *ClusterHypervisor        `protobuf:"bytes,10,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	Keypair          *ClusterKeypair           `protobuf:"bytes,11,opt,name=keypair,proto3" json:"keypair,omitempty"`
	Spec             *ClusterInstanceSpec      `protobuf:"bytes,12,opt,name=spec,proto3" json:"spec,omitempty"`
	Networks         []*ClusterInstanceNetwork `protobuf:"bytes,13,rep,name=networks,proto3" json:"networks,omitempty"`
	Routers          []*ClusterRouter          `protobuf:"bytes,14,rep,name=routers,proto3" json:"routers,omitempty"`
	SecurityGroups   []*ClusterSecurityGroup   `protobuf:"bytes,15,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	Volumes          []*ClusterInstanceVolume  `protobuf:"bytes,16,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *ClusterInstance) Reset() {
	*x = ClusterInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstance) ProtoMessage() {}

func (x *ClusterInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstance.ProtoReflect.Descriptor instead.
func (*ClusterInstance) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{156}
}

func (x *ClusterInstance) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterInstance) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInstance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterInstance) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClusterInstance) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterInstance) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *ClusterInstance) GetAvailabilityZone() *ClusterAvailabilityZone {
	if x != nil {
		return x.AvailabilityZone
	}
	return nil
}

func (x *ClusterInstance) GetHypervisor() *ClusterHypervisor {
	if x != nil {
		return x.Hypervisor
	}
	return nil
}

func (x *ClusterInstance) GetKeypair() *ClusterKeypair {
	if x != nil {
		return x.Keypair
	}
	return nil
}

func (x *ClusterInstance) GetSpec() *ClusterInstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ClusterInstance) GetNetworks() []*ClusterInstanceNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ClusterInstance) GetRouters() []*ClusterRouter {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *ClusterInstance) GetSecurityGroups() []*ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *ClusterInstance) GetVolumes() []*ClusterInstanceVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type ClusterInstanceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances  []*ClusterInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	Pagination *Pagination        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterInstanceListResponse) Reset() {
	*x = ClusterInstanceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceListResponse) ProtoMessage() {}

func (x *ClusterInstanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceListResponse.ProtoReflect.Descriptor instead.
func (*ClusterInstanceListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{157}
}

func (x *ClusterInstanceListResponse) GetInstances() []*ClusterInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ClusterInstanceListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterInstanceListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterInstanceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                 uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId           uint64                `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	ClusterAvailabilityZoneId uint64                `protobuf:"varint,3,opt,name=cluster_availability_zone_id,json=clusterAvailabilityZoneId,proto3" json:"cluster_availability_zone_id,omitempty"`
	ClusterHypervisorId       uint64                `protobuf:"varint,4,opt,name=cluster_hypervisor_id,json=clusterHypervisorId,proto3" json:"cluster_hypervisor_id,omitempty"`
	ClusterVolumeId           uint64                `protobuf:"varint,5,opt,name=cluster_volume_id,json=clusterVolumeId,proto3" json:"cluster_volume_id,omitempty"`
	Uuid                      string                `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                      string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Limit                     *wrappers.UInt64Value `protobuf:"bytes,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                    *wrappers.UInt64Value `protobuf:"bytes,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync                      bool                  `protobuf:"varint,10,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterInstanceListRequest) Reset() {
	*x = ClusterInstanceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceListRequest) ProtoMessage() {}

func (x *ClusterInstanceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceListRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{158}
}

func (x *ClusterInstanceListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceListRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *ClusterInstanceListRequest) GetClusterAvailabilityZoneId() uint64 {
	if x != nil {
		return x.ClusterAvailabilityZoneId
	}
	return 0
}

func (x *ClusterInstanceListRequest) GetClusterHypervisorId() uint64 {
	if x != nil {
		return x.ClusterHypervisorId
	}
	return 0
}

func (x *ClusterInstanceListRequest) GetClusterVolumeId() uint64 {
	if x != nil {
		return x.ClusterVolumeId
	}
	return 0
}

func (x *ClusterInstanceListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterInstanceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInstanceListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterInstanceListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterInstanceListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *ClusterInstance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Message  *Message         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterInstanceResponse) Reset() {
	*x = ClusterInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceResponse) ProtoMessage() {}

func (x *ClusterInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceResponse.ProtoReflect.Descriptor instead.
func (*ClusterInstanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{159}
}

func (x *ClusterInstanceResponse) GetInstance() *ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *ClusterInstanceResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterInstanceId uint64 `protobuf:"varint,2,opt,name=cluster_instance_id,json=clusterInstanceId,proto3" json:"cluster_instance_id,omitempty"`
	Sync              bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterInstanceRequest) Reset() {
	*x = ClusterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceRequest) ProtoMessage() {}

func (x *ClusterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{160}
}

func (x *ClusterInstanceRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceRequest) GetClusterInstanceId() uint64 {
	if x != nil {
		return x.ClusterInstanceId
	}
	return 0
}

func (x *ClusterInstanceRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterInstanceByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterInstanceByUUIDRequest) Reset() {
	*x = ClusterInstanceByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceByUUIDRequest) ProtoMessage() {}

func (x *ClusterInstanceByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{161}
}

func (x *ClusterInstanceByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterInstanceByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterInstanceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ClusterInstanceNumber) Reset() {
	*x = ClusterInstanceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceNumber) ProtoMessage() {}

func (x *ClusterInstanceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceNumber.ProtoReflect.Descriptor instead.
func (*ClusterInstanceNumber) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{162}
}

func (x *ClusterInstanceNumber) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ClusterInstanceNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNumber *ClusterInstanceNumber `protobuf:"bytes,1,opt,name=instance_number,json=instanceNumber,proto3" json:"instance_number,omitempty"`
	Message        *Message               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterInstanceNumberResponse) Reset() {
	*x = ClusterInstanceNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceNumberResponse) ProtoMessage() {}

func (x *ClusterInstanceNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceNumberResponse.ProtoReflect.Descriptor instead.
func (*ClusterInstanceNumberResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{163}
}

func (x *ClusterInstanceNumberResponse) GetInstanceNumber() *ClusterInstanceNumber {
	if x != nil {
		return x.InstanceNumber
	}
	return nil
}

func (x *ClusterInstanceNumberResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterInstanceNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ClusterInstanceNumberRequest) Reset() {
	*x = ClusterInstanceNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceNumberRequest) ProtoMessage() {}

func (x *ClusterInstanceNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceNumberRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceNumberRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{164}
}

func (x *ClusterInstanceNumberRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type CheckIsExistClusterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CheckIsExistClusterInstanceRequest) Reset() {
	*x = CheckIsExistClusterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsExistClusterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsExistClusterInstanceRequest) ProtoMessage() {}

func (x *CheckIsExistClusterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsExistClusterInstanceRequest.ProtoReflect.Descriptor instead.
func (*CheckIsExistClusterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{165}
}

func (x *CheckIsExistClusterInstanceRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CheckIsExistClusterInstanceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateClusterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn             *ClusterConnectionInfo    `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant           *ClusterTenant            `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	AvailabilityZone *ClusterAvailabilityZone  `protobuf:"bytes,3,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Hypervisor       *ClusterHypervisor        `protobuf:"bytes,4,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	Spec             *ClusterInstanceSpec      `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Keypair          *ClusterKeypair           `protobuf:"bytes,6,opt,name=keypair,proto3" json:"keypair,omitempty"`
	Instance         *ClusterInstance          `protobuf:"bytes,7,opt,name=instance,proto3" json:"instance,omitempty"`
	Networks         []*ClusterInstanceNetwork `protobuf:"bytes,8,rep,name=networks,proto3" json:"networks,omitempty"`
	SecurityGroups   []*ClusterSecurityGroup   `protobuf:"bytes,9,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	Volumes          []*ClusterInstanceVolume  `protobuf:"bytes,10,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *CreateClusterInstanceRequest) Reset() {
	*x = CreateClusterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterInstanceRequest) ProtoMessage() {}

func (x *CreateClusterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{166}
}

func (x *CreateClusterInstanceRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetAvailabilityZone() *ClusterAvailabilityZone {
	if x != nil {
		return x.AvailabilityZone
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetHypervisor() *ClusterHypervisor {
	if x != nil {
		return x.Hypervisor
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetSpec() *ClusterInstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetKeypair() *ClusterKeypair {
	if x != nil {
		return x.Keypair
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetInstance() *ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetNetworks() []*ClusterInstanceNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetSecurityGroups() []*ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *CreateClusterInstanceRequest) GetVolumes() []*ClusterInstanceVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type CreateClusterInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *ClusterInstance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Message  *Message         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterInstanceResponse) Reset() {
	*x = CreateClusterInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterInstanceResponse) ProtoMessage() {}

func (x *CreateClusterInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterInstanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{167}
}

func (x *CreateClusterInstanceResponse) GetInstance() *ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *CreateClusterInstanceResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn     *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant   *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Instance *ClusterInstance       `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *DeleteClusterInstanceRequest) Reset() {
	*x = DeleteClusterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterInstanceRequest) ProtoMessage() {}

func (x *DeleteClusterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{168}
}

func (x *DeleteClusterInstanceRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterInstanceRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *DeleteClusterInstanceRequest) GetInstance() *ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type DeleteClusterInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterInstanceResponse) Reset() {
	*x = DeleteClusterInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterInstanceResponse) ProtoMessage() {}

func (x *DeleteClusterInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterInstanceResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterInstanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{169}
}

func (x *DeleteClusterInstanceResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterInstanceSpecListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string                `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Limit     *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync      bool                  `protobuf:"varint,6,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterInstanceSpecListRequest) Reset() {
	*x = ClusterInstanceSpecListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceSpecListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceSpecListRequest) ProtoMessage() {}

func (x *ClusterInstanceSpecListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceSpecListRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceSpecListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{170}
}

func (x *ClusterInstanceSpecListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceSpecListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterInstanceSpecListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInstanceSpecListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterInstanceSpecListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterInstanceSpecListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterInstanceSpecListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specs      []*ClusterInstanceSpec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterInstanceSpecListResponse) Reset() {
	*x = ClusterInstanceSpecListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceSpecListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceSpecListResponse) ProtoMessage() {}

func (x *ClusterInstanceSpecListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceSpecListResponse.ProtoReflect.Descriptor instead.
func (*ClusterInstanceSpecListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{171}
}

func (x *ClusterInstanceSpecListResponse) GetSpecs() []*ClusterInstanceSpec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *ClusterInstanceSpecListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterInstanceSpecListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterInstanceSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId             uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterInstanceSpecId uint64 `protobuf:"varint,2,opt,name=cluster_instance_spec_id,json=clusterInstanceSpecId,proto3" json:"cluster_instance_spec_id,omitempty"`
	Sync                  bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterInstanceSpecRequest) Reset() {
	*x = ClusterInstanceSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceSpecRequest) ProtoMessage() {}

func (x *ClusterInstanceSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceSpecRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceSpecRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{172}
}

func (x *ClusterInstanceSpecRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceSpecRequest) GetClusterInstanceSpecId() uint64 {
	if x != nil {
		return x.ClusterInstanceSpecId
	}
	return 0
}

func (x *ClusterInstanceSpecRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterInstanceSpecByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterInstanceSpecByUUIDRequest) Reset() {
	*x = ClusterInstanceSpecByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceSpecByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceSpecByUUIDRequest) ProtoMessage() {}

func (x *ClusterInstanceSpecByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceSpecByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceSpecByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{173}
}

func (x *ClusterInstanceSpecByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceSpecByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterInstanceSpecByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterInstanceSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec    *ClusterInstanceSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Message *Message             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterInstanceSpecResponse) Reset() {
	*x = ClusterInstanceSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceSpecResponse) ProtoMessage() {}

func (x *ClusterInstanceSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceSpecResponse.ProtoReflect.Descriptor instead.
func (*ClusterInstanceSpecResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{174}
}

func (x *ClusterInstanceSpecResponse) GetSpec() *ClusterInstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ClusterInstanceSpecResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type StartClusterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn     *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant   *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Instance *ClusterInstance       `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *StartClusterInstanceRequest) Reset() {
	*x = StartClusterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartClusterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterInstanceRequest) ProtoMessage() {}

func (x *StartClusterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterInstanceRequest.ProtoReflect.Descriptor instead.
func (*StartClusterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{175}
}

func (x *StartClusterInstanceRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *StartClusterInstanceRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *StartClusterInstanceRequest) GetInstance() *ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type StartClusterInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartClusterInstanceResponse) Reset() {
	*x = StartClusterInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartClusterInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterInstanceResponse) ProtoMessage() {}

func (x *StartClusterInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterInstanceResponse.ProtoReflect.Descriptor instead.
func (*StartClusterInstanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{176}
}

func (x *StartClusterInstanceResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type StopClusterInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn     *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant   *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Instance *ClusterInstance       `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *StopClusterInstanceRequest) Reset() {
	*x = StopClusterInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopClusterInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterInstanceRequest) ProtoMessage() {}

func (x *StopClusterInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterInstanceRequest.ProtoReflect.Descriptor instead.
func (*StopClusterInstanceRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{177}
}

func (x *StopClusterInstanceRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *StopClusterInstanceRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *StopClusterInstanceRequest) GetInstance() *ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type StopClusterInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopClusterInstanceResponse) Reset() {
	*x = StopClusterInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopClusterInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterInstanceResponse) ProtoMessage() {}

func (x *StopClusterInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterInstanceResponse.ProtoReflect.Descriptor instead.
func (*StopClusterInstanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{178}
}

func (x *StopClusterInstanceResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateClusterInstanceSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn       *ClusterConnectionInfo      `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Spec       *ClusterInstanceSpec        `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	ExtraSpecs []*ClusterInstanceExtraSpec `protobuf:"bytes,3,rep,name=extra_specs,json=extraSpecs,proto3" json:"extra_specs,omitempty"`
}

func (x *CreateClusterInstanceSpecRequest) Reset() {
	*x = CreateClusterInstanceSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterInstanceSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterInstanceSpecRequest) ProtoMessage() {}

func (x *CreateClusterInstanceSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterInstanceSpecRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterInstanceSpecRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{179}
}

func (x *CreateClusterInstanceSpecRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterInstanceSpecRequest) GetSpec() *ClusterInstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CreateClusterInstanceSpecRequest) GetExtraSpecs() []*ClusterInstanceExtraSpec {
	if x != nil {
		return x.ExtraSpecs
	}
	return nil
}

type CreateClusterInstanceSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec    *ClusterInstanceSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Message *Message             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterInstanceSpecResponse) Reset() {
	*x = CreateClusterInstanceSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterInstanceSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterInstanceSpecResponse) ProtoMessage() {}

func (x *CreateClusterInstanceSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterInstanceSpecResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterInstanceSpecResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{180}
}

func (x *CreateClusterInstanceSpecResponse) GetSpec() *ClusterInstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CreateClusterInstanceSpecResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterInstanceSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Spec *ClusterInstanceSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *DeleteClusterInstanceSpecRequest) Reset() {
	*x = DeleteClusterInstanceSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterInstanceSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterInstanceSpecRequest) ProtoMessage() {}

func (x *DeleteClusterInstanceSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterInstanceSpecRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterInstanceSpecRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{181}
}

func (x *DeleteClusterInstanceSpecRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterInstanceSpecRequest) GetSpec() *ClusterInstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type DeleteClusterInstanceSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterInstanceSpecResponse) Reset() {
	*x = DeleteClusterInstanceSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterInstanceSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterInstanceSpecResponse) ProtoMessage() {}

func (x *DeleteClusterInstanceSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterInstanceSpecResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterInstanceSpecResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{182}
}

func (x *DeleteClusterInstanceSpecResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterKeyPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypair *ClusterKeypair `protobuf:"bytes,1,opt,name=keypair,proto3" json:"keypair,omitempty"`
	Message *Message        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterKeyPairResponse) Reset() {
	*x = ClusterKeyPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterKeyPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterKeyPairResponse) ProtoMessage() {}

func (x *ClusterKeyPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterKeyPairResponse.ProtoReflect.Descriptor instead.
func (*ClusterKeyPairResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{183}
}

func (x *ClusterKeyPairResponse) GetKeypair() *ClusterKeypair {
	if x != nil {
		return x.Keypair
	}
	return nil
}

func (x *ClusterKeyPairResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterKeypairId uint64 `protobuf:"varint,2,opt,name=cluster_keypair_id,json=clusterKeypairId,proto3" json:"cluster_keypair_id,omitempty"`
	Sync             bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterKeyPairRequest) Reset() {
	*x = ClusterKeyPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterKeyPairRequest) ProtoMessage() {}

func (x *ClusterKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterKeyPairRequest.ProtoReflect.Descriptor instead.
func (*ClusterKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{184}
}

func (x *ClusterKeyPairRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterKeyPairRequest) GetClusterKeypairId() uint64 {
	if x != nil {
		return x.ClusterKeypairId
	}
	return 0
}

func (x *ClusterKeyPairRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type CreateClusterKeypairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Keypair *ClusterKeypair        `protobuf:"bytes,2,opt,name=keypair,proto3" json:"keypair,omitempty"`
}

func (x *CreateClusterKeypairRequest) Reset() {
	*x = CreateClusterKeypairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterKeypairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterKeypairRequest) ProtoMessage() {}

func (x *CreateClusterKeypairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterKeypairRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterKeypairRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{185}
}

func (x *CreateClusterKeypairRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterKeypairRequest) GetKeypair() *ClusterKeypair {
	if x != nil {
		return x.Keypair
	}
	return nil
}

type CreateClusterKeypairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypair *ClusterKeypair `protobuf:"bytes,1,opt,name=keypair,proto3" json:"keypair,omitempty"`
	Message *Message        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateClusterKeypairResponse) Reset() {
	*x = CreateClusterKeypairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterKeypairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterKeypairResponse) ProtoMessage() {}

func (x *CreateClusterKeypairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterKeypairResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterKeypairResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{186}
}

func (x *CreateClusterKeypairResponse) GetKeypair() *ClusterKeypair {
	if x != nil {
		return x.Keypair
	}
	return nil
}

func (x *CreateClusterKeypairResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteClusterKeypairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn    *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Keypair *ClusterKeypair        `protobuf:"bytes,2,opt,name=keypair,proto3" json:"keypair,omitempty"`
}

func (x *DeleteClusterKeypairRequest) Reset() {
	*x = DeleteClusterKeypairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterKeypairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterKeypairRequest) ProtoMessage() {}

func (x *DeleteClusterKeypairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterKeypairRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterKeypairRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{187}
}

func (x *DeleteClusterKeypairRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DeleteClusterKeypairRequest) GetKeypair() *ClusterKeypair {
	if x != nil {
		return x.Keypair
	}
	return nil
}

type DeleteClusterKeypairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClusterKeypairResponse) Reset() {
	*x = DeleteClusterKeypairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterKeypairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterKeypairResponse) ProtoMessage() {}

func (x *DeleteClusterKeypairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterKeypairResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterKeypairResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{188}
}

func (x *DeleteClusterKeypairResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterInstanceUserScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterInstanceId uint64 `protobuf:"varint,2,opt,name=cluster_instance_id,json=clusterInstanceId,proto3" json:"cluster_instance_id,omitempty"`
}

func (x *ClusterInstanceUserScriptRequest) Reset() {
	*x = ClusterInstanceUserScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceUserScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceUserScriptRequest) ProtoMessage() {}

func (x *ClusterInstanceUserScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceUserScriptRequest.ProtoReflect.Descriptor instead.
func (*ClusterInstanceUserScriptRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{189}
}

func (x *ClusterInstanceUserScriptRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterInstanceUserScriptRequest) GetClusterInstanceId() uint64 {
	if x != nil {
		return x.ClusterInstanceId
	}
	return 0
}

type ClusterInstanceUserScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData string   `protobuf:"bytes,1,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	Message  *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterInstanceUserScriptResponse) Reset() {
	*x = ClusterInstanceUserScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceUserScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceUserScriptResponse) ProtoMessage() {}

func (x *ClusterInstanceUserScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceUserScriptResponse.ProtoReflect.Descriptor instead.
func (*ClusterInstanceUserScriptResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{190}
}

func (x *ClusterInstanceUserScriptResponse) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *ClusterInstanceUserScriptResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateClusterInstanceUserScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterInstanceId uint64 `protobuf:"varint,2,opt,name=cluster_instance_id,json=clusterInstanceId,proto3" json:"cluster_instance_id,omitempty"`
	UserData          string `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (x *UpdateClusterInstanceUserScriptRequest) Reset() {
	*x = UpdateClusterInstanceUserScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterInstanceUserScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterInstanceUserScriptRequest) ProtoMessage() {}

func (x *UpdateClusterInstanceUserScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterInstanceUserScriptRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterInstanceUserScriptRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{191}
}

func (x *UpdateClusterInstanceUserScriptRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateClusterInstanceUserScriptRequest) GetClusterInstanceId() uint64 {
	if x != nil {
		return x.ClusterInstanceId
	}
	return 0
}

func (x *UpdateClusterInstanceUserScriptRequest) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

type UpdateClusterInstanceUserScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateClusterInstanceUserScriptResponse) Reset() {
	*x = UpdateClusterInstanceUserScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterInstanceUserScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterInstanceUserScriptResponse) ProtoMessage() {}

func (x *UpdateClusterInstanceUserScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterInstanceUserScriptResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterInstanceUserScriptResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{192}
}

func (x *UpdateClusterInstanceUserScriptResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterSecurityGroupListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroups []*ClusterSecurityGroup `protobuf:"bytes,1,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	Pagination     *Pagination             `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message        *Message                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterSecurityGroupListResponse) Reset() {
	*x = ClusterSecurityGroupListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupListResponse) ProtoMessage() {}

func (x *ClusterSecurityGroupListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupListResponse.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupListResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{193}
}

func (x *ClusterSecurityGroupListResponse) GetSecurityGroups() []*ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *ClusterSecurityGroupListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterSecurityGroupListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterSecurityGroupListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         uint64                `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId   uint64                `protobuf:"varint,2,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	ClusterInstanceId uint64                `protobuf:"varint,3,opt,name=cluster_instance_id,json=clusterInstanceId,proto3" json:"cluster_instance_id,omitempty"`
	Uuid              string                `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Limit             *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset            *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Sync              bool                  `protobuf:"varint,7,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterSecurityGroupListRequest) Reset() {
	*x = ClusterSecurityGroupListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupListRequest) ProtoMessage() {}

func (x *ClusterSecurityGroupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupListRequest.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{194}
}

func (x *ClusterSecurityGroupListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterSecurityGroupListRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *ClusterSecurityGroupListRequest) GetClusterInstanceId() uint64 {
	if x != nil {
		return x.ClusterInstanceId
	}
	return 0
}

func (x *ClusterSecurityGroupListRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterSecurityGroupListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterSecurityGroupListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ClusterSecurityGroupListRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroup *ClusterSecurityGroup `protobuf:"bytes,1,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	Message       *Message              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterSecurityGroupResponse) Reset() {
	*x = ClusterSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupResponse) ProtoMessage() {}

func (x *ClusterSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{195}
}

func (x *ClusterSecurityGroupResponse) GetSecurityGroup() *ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *ClusterSecurityGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateClusterSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn          *ClusterConnectionInfo `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant        *ClusterTenant         `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SecurityGroup *ClusterSecurityGroup  `protobuf:"bytes,3,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
}

func (x *CreateClusterSecurityGroupRequest) Reset() {
	*x = CreateClusterSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterSecurityGroupRequest) ProtoMessage() {}

func (x *CreateClusterSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{196}
}

func (x *CreateClusterSecurityGroupRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterSecurityGroupRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterSecurityGroupRequest) GetSecurityGroup() *ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type ClusterSecurityGroupRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroupRule *ClusterSecurityGroupRule `protobuf:"bytes,1,opt,name=security_group_rule,json=securityGroupRule,proto3" json:"security_group_rule,omitempty"`
	Message           *Message                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterSecurityGroupRuleResponse) Reset() {
	*x = ClusterSecurityGroupRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupRuleResponse) ProtoMessage() {}

func (x *ClusterSecurityGroupRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupRuleResponse.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{197}
}

func (x *ClusterSecurityGroupRuleResponse) GetSecurityGroupRule() *ClusterSecurityGroupRule {
	if x != nil {
		return x.SecurityGroupRule
	}
	return nil
}

func (x *ClusterSecurityGroupRuleResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateClusterSecurityGroupRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn              *ClusterConnectionInfo    `protobuf:"bytes,1,opt,name=conn,proto3" json:"conn,omitempty"`
	Tenant            *ClusterTenant            `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	SecurityGroup     *ClusterSecurityGroup     `protobuf:"bytes,3,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	SecurityGroupRule *ClusterSecurityGroupRule `protobuf:"bytes,4,opt,name=security_group_rule,json=securityGroupRule,proto3" json:"security_group_rule,omitempty"`
}

func (x *CreateClusterSecurityGroupRuleRequest) Reset() {
	*x = CreateClusterSecurityGroupRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterSecurityGroupRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterSecurityGroupRuleRequest) ProtoMessage() {}

func (x *CreateClusterSecurityGroupRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterSecurityGroupRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterSecurityGroupRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{198}
}

func (x *CreateClusterSecurityGroupRuleRequest) GetConn() *ClusterConnectionInfo {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *CreateClusterSecurityGroupRuleRequest) GetTenant() *ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *CreateClusterSecurityGroupRuleRequest) GetSecurityGroup() *ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *CreateClusterSecurityGroupRuleRequest) GetSecurityGroupRule() *ClusterSecurityGroupRule {
	if x != nil {
		return x.SecurityGroupRule
	}
	return nil
}

type ClusterSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId              uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterSecurityGroupId uint64 `protobuf:"varint,2,opt,name=cluster_security_group_id,json=clusterSecurityGroupId,proto3" json:"cluster_security_group_id,omitempty"`
	Sync                   bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterSecurityGroupRequest) Reset() {
	*x = ClusterSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupRequest) ProtoMessage() {}

func (x *ClusterSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{199}
}

func (x *ClusterSecurityGroupRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterSecurityGroupRequest) GetClusterSecurityGroupId() uint64 {
	if x != nil {
		return x.ClusterSecurityGroupId
	}
	return 0
}

func (x *ClusterSecurityGroupRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type ClusterSecurityGroupByUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sync      bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *ClusterSecurityGroupByUUIDRequest) Reset() {
	*x = ClusterSecurityGroupByUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_manager_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecurityGroupByUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecurityGroupByUUIDRequest) ProtoMessage() {}

func (x *ClusterSecurityGroupByUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_manager_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecurityGroupByUUIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterSecurityGroupByUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_cluster_manager_proto_rawDescGZIP(), []int{200}
}

func (x *ClusterSecurityGroupByUUIDRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterSecurityGroupByUUIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterSecurityGroupByUUIDRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

var File_proto_cluster_manager_proto protoreflect.FileDescriptor

var file_proto_cluster_manager_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63,
	0x6d, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x45, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x44, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf5, 0x01,
	0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x51, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x33, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x22, 0x3f, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x68, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x52, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x07, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x61, 0x0a, 0x0f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x0e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e,
	0x63, 0x22, 0x3b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x5d,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x06, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x63,
	0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x63, 0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65,
	0x64, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d,
	0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x73, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x02,
	0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x7b, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xab, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x94, 0x01, 0x0a, 0x1f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x94, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x36, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x6b, 0x0a, 0x15, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22,
	0x63, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x22, 0x78, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x4e,
	0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59,
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4c, 0x0a,
	0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x15, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0xe1, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x52, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50,
	0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x73, 0x22, 0xa6, 0x01,
	0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2f, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x6f, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xa8, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x78, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22,
	0x64, 0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x6b, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e,
	0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x45,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xe4, 0x01, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x22, 0x7c, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x89, 0x01, 0x0a, 0x24, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x1e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x22, 0x49, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x65, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x2a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x63, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x19,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22,
	0xa4, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x6b, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x63,
	0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x22, 0x8d, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x23, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6f, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x78, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xa6, 0x01, 0x0a, 0x1a,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x22, 0xe9, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x1a,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x86, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa9, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x4a, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x27, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a,
	0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x13, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x02, 0x0a,
	0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x53, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x52, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a,
	0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x13, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x02, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xb7, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b, 0x0a, 0x15,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x22, 0x63, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x18, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xd3, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xf7, 0x03, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf3, 0x03, 0x0a, 0x18, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x19,
	0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x9c, 0x04, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49,
	0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x22, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x22, 0x85, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x45, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x24, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x25, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xb6,
	0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x9e, 0x04, 0x0a, 0x1c, 0x55, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x1d, 0x55, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x4d, 0x0a, 0x23,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x11,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x50, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x13, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x63,
	0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65,
	0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xf9, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0xf8, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x50, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x68, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x15,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xae, 0x05, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x49, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x69, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x37, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae,
	0x03, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22,
	0x73, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e,
	0x63, 0x22, 0x65, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xbf,
	0x04, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12,
	0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61,
	0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x79, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xaa, 0x01, 0x0a, 0x1f,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12,
	0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x22, 0x69, 0x0a, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x73,
	0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x46, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x22, 0x79, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x20,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x4b,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x16, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x15,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x7c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x69, 0x72, 0x22, 0x75, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x69, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x22, 0x46, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x71, 0x0a, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x21, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94,
	0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x20, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x1f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x88, 0x01, 0x0a, 0x1c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x2a, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x99, 0x01, 0x0a, 0x20, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e,
	0x12, 0x2a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4d,
	0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x6a, 0x0a, 0x21, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x32, 0xdb, 0x4e, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x0a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x74, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a,
	0x12, 0x7e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8a, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x32, 0x28, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a,
	0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x32, 0x2c, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x70,
	0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x89, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x0d, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x62, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x32, 0x21, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0xa4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x47, 0x12, 0x45, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4a, 0x1a, 0x45, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0xc4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x55, 0x12, 0x53, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5a, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x57, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x5a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x12,
	0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x50, 0x12, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x12, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x70, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x67, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x12, 0x29, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x90, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3f, 0x12, 0x3d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x73, 0x0a, 0x23, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb9, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x44, 0x32, 0x3f, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x81, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12,
	0x90, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x5a, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x12,
	0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15,
	0x55, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x79, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x79, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12,
	0x3f, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x59, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1e,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x69, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61,
	0x69, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbb, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x46, 0x12, 0x44, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x32, 0x44,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xb5, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x32,
	0x2f, 0x63, 0x64, 0x6d, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x63, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cluster_manager_proto_rawDescOnce sync.Once
	file_proto_cluster_manager_proto_rawDescData = file_proto_cluster_manager_proto_rawDesc
)

func file_proto_cluster_manager_proto_rawDescGZIP() []byte {
	file_proto_cluster_manager_proto_rawDescOnce.Do(func() {
		file_proto_cluster_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cluster_manager_proto_rawDescData)
	})
	return file_proto_cluster_manager_proto_rawDescData
}

var file_proto_cluster_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 207)
var file_proto_cluster_manager_proto_goTypes = []interface{}{
	(*Empty)(nil),                                      // 0: cms.Empty
	(*Message)(nil),                                    // 1: cms.Message
	(*Pagination)(nil),                                 // 2: cms.Pagination
	(*PublicKey)(nil),                                  // 3: cms.PublicKey
	(*ClusterConnectionResponse)(nil),                  // 4: cms.ClusterConnectionResponse
	(*UpdateCredentialRequest)(nil),                    // 5: cms.UpdateCredentialRequest
	(*UpdateCredentialResponse)(nil),                   // 6: cms.UpdateCredentialResponse
	(*ClusterConnectionInfo)(nil),                      // 7: cms.ClusterConnectionInfo
	(*Config)(nil),                                     // 8: cms.Config
	(*GetCenterConfigRequest)(nil),                     // 9: cms.GetCenterConfigRequest
	(*GetCenterConfigResponse)(nil),                    // 10: cms.GetCenterConfigResponse
	(*UpdateCenterConfigRequest)(nil),                  // 11: cms.UpdateCenterConfigRequest
	(*UpdateCenterConfigResponse)(nil),                 // 12: cms.UpdateCenterConfigResponse
	(*StorageStatus)(nil),                              // 13: cms.StorageStatus
	(*NetworkStatus)(nil),                              // 14: cms.NetworkStatus
	(*ComputeStatus)(nil),                              // 15: cms.ComputeStatus
	(*Completion)(nil),                                 // 16: cms.Completion
	(*CheckClusterRequest)(nil),                        // 17: cms.CheckClusterRequest
	(*CheckClusterResponse)(nil),                       // 18: cms.CheckClusterResponse
	(*SyncClusterRequest)(nil),                         // 19: cms.SyncClusterRequest
	(*SyncClusterResponse)(nil),                        // 20: cms.SyncClusterResponse
	(*GetClusterSyncStatusResponse)(nil),               // 21: cms.GetClusterSyncStatusResponse
	(*SyncExceptionResponse)(nil),                      // 22: cms.SyncExceptionResponse
	(*SyncExceptionRequest)(nil),                       // 23: cms.SyncExceptionRequest
	(*Group)(nil),                                      // 24: cms.Group
	(*ClusterPermission)(nil),                          // 25: cms.ClusterPermission
	(*Cluster)(nil),                                    // 26: cms.Cluster
	(*ClusterListResponse)(nil),                        // 27: cms.ClusterListResponse
	(*ClusterListRequest)(nil),                         // 28: cms.ClusterListRequest
	(*ClusterResponse)(nil),                            // 29: cms.ClusterResponse
	(*ClusterRequest)(nil),                             // 30: cms.ClusterRequest
	(*AddClusterRequest)(nil),                          // 31: cms.AddClusterRequest
	(*UpdateClusterRequest)(nil),                       // 32: cms.UpdateClusterRequest
	(*DeleteClusterResponse)(nil),                      // 33: cms.DeleteClusterResponse
	(*DeleteClusterRequest)(nil),                       // 34: cms.DeleteClusterRequest
	(*ClusterHypervisor)(nil),                          // 35: cms.ClusterHypervisor
	(*ClusterHypervisorListResponse)(nil),              // 36: cms.ClusterHypervisorListResponse
	(*ClusterHypervisorListRequest)(nil),               // 37: cms.ClusterHypervisorListRequest
	(*ClusterHypervisorResponse)(nil),                  // 38: cms.ClusterHypervisorResponse
	(*ClusterHypervisorRequest)(nil),                   // 39: cms.ClusterHypervisorRequest
	(*UpdateClusterHypervisorRequest)(nil),             // 40: cms.UpdateClusterHypervisorRequest
	(*ClusterAvailabilityZone)(nil),                    // 41: cms.ClusterAvailabilityZone
	(*ClusterAvailabilityZoneListResponse)(nil),        // 42: cms.ClusterAvailabilityZoneListResponse
	(*ClusterAvailabilityZoneListRequest)(nil),         // 43: cms.ClusterAvailabilityZoneListRequest
	(*ClusterAvailabilityZoneResponse)(nil),            // 44: cms.ClusterAvailabilityZoneResponse
	(*ClusterAvailabilityZoneRequest)(nil),             // 45: cms.ClusterAvailabilityZoneRequest
	(*ClusterQuota)(nil),                               // 46: cms.ClusterQuota
	(*ClusterTenant)(nil),                              // 47: cms.ClusterTenant
	(*ClusterTenantListResponse)(nil),                  // 48: cms.ClusterTenantListResponse
	(*DeleteClusterTenantRequest)(nil),                 // 49: cms.DeleteClusterTenantRequest
	(*DeleteClusterTenantResponse)(nil),                // 50: cms.DeleteClusterTenantResponse
	(*ClusterTenantListRequest)(nil),                   // 51: cms.ClusterTenantListRequest
	(*ClusterTenantResponse)(nil),                      // 52: cms.ClusterTenantResponse
	(*ClusterTenantRequest)(nil),                       // 53: cms.ClusterTenantRequest
	(*ClusterTenantByUUIDRequest)(nil),                 // 54: cms.ClusterTenantByUUIDRequest
	(*CreateClusterTenantRequest)(nil),                 // 55: cms.CreateClusterTenantRequest
	(*CheckIsExistByNameRequest)(nil),                  // 56: cms.CheckIsExistByNameRequest
	(*CheckIsExistResponse)(nil),                       // 57: cms.CheckIsExistResponse
	(*DeleteClusterSecurityGroupRequest)(nil),          // 58: cms.DeleteClusterSecurityGroupRequest
	(*DeleteClusterSecurityGroupResponse)(nil),         // 59: cms.DeleteClusterSecurityGroupResponse
	(*ClusterSubnetDHCPPool)(nil),                      // 60: cms.ClusterSubnetDHCPPool
	(*ClusterSubnetNameserver)(nil),                    // 61: cms.ClusterSubnetNameserver
	(*ClusterSubnet)(nil),                              // 62: cms.ClusterSubnet
	(*ClusterNetwork)(nil),                             // 63: cms.ClusterNetwork
	(*ClusterNetworkListResponse)(nil),                 // 64: cms.ClusterNetworkListResponse
	(*ClusterNetworkListRequest)(nil),                  // 65: cms.ClusterNetworkListRequest
	(*ClusterNetworkResponse)(nil),                     // 66: cms.ClusterNetworkResponse
	(*DeleteClusterNetworkResponse)(nil),               // 67: cms.DeleteClusterNetworkResponse
	(*DeleteClusterNetworkRequest)(nil),                // 68: cms.DeleteClusterNetworkRequest
	(*CreateClusterNetworkRequest)(nil),                // 69: cms.CreateClusterNetworkRequest
	(*ClusterNetworkRequest)(nil),                      // 70: cms.ClusterNetworkRequest
	(*ClusterNetworkByUUIDRequest)(nil),                // 71: cms.ClusterNetworkByUUIDRequest
	(*ClusterSubnetResponse)(nil),                      // 72: cms.ClusterSubnetResponse
	(*CreateClusterSubnetRequest)(nil),                 // 73: cms.CreateClusterSubnetRequest
	(*DeleteClusterSubnetRequest)(nil),                 // 74: cms.DeleteClusterSubnetRequest
	(*DeleteClusterSubnetResponse)(nil),                // 75: cms.DeleteClusterSubnetResponse
	(*ClusterSubnetRequest)(nil),                       // 76: cms.ClusterSubnetRequest
	(*CreateClusterFloatingIPRequest)(nil),             // 77: cms.CreateClusterFloatingIPRequest
	(*ClusterFloatingIPResponse)(nil),                  // 78: cms.ClusterFloatingIPResponse
	(*ClusterFloatingIPRequest)(nil),                   // 79: cms.ClusterFloatingIPRequest
	(*CheckIsExistClusterFloatingIPRequest)(nil),       // 80: cms.CheckIsExistClusterFloatingIPRequest
	(*DeleteClusterFloatingIPRequest)(nil),             // 81: cms.DeleteClusterFloatingIPRequest
	(*DeleteClusterFloatingIPResponse)(nil),            // 82: cms.DeleteClusterFloatingIPResponse
	(*ClusterNetworkRoutingInterface)(nil),             // 83: cms.ClusterNetworkRoutingInterface
	(*ClusterRouterExtraRoute)(nil),                    // 84: cms.ClusterRouterExtraRoute
	(*CheckIsExistClusterRoutingInterfaceRequest)(nil), // 85: cms.CheckIsExistClusterRoutingInterfaceRequest
	(*ClusterRouter)(nil),                              // 86: cms.ClusterRouter
	(*CreateClusterRouterRequest)(nil),                 // 87: cms.CreateClusterRouterRequest
	(*DeleteClusterRouterRequest)(nil),                 // 88: cms.DeleteClusterRouterRequest
	(*DeleteClusterRouterResponse)(nil),                // 89: cms.DeleteClusterRouterResponse
	(*ClusterRouterListResponse)(nil),                  // 90: cms.ClusterRouterListResponse
	(*ClusterRouterListRequest)(nil),                   // 91: cms.ClusterRouterListRequest
	(*ClusterRouterResponse)(nil),                      // 92: cms.ClusterRouterResponse
	(*ClusterRouterRequest)(nil),                       // 93: cms.ClusterRouterRequest
	(*ClusterRouterByUUIDRequest)(nil),                 // 94: cms.ClusterRouterByUUIDRequest
	(*ClusterStorage)(nil),                             // 95: cms.ClusterStorage
	(*ClusterStorageMetadataResponse)(nil),             // 96: cms.ClusterStorageMetadataResponse
	(*UpdateClusterStorageMetadataRequest)(nil),        // 97: cms.UpdateClusterStorageMetadataRequest
	(*ClusterStorageResponse)(nil),                     // 98: cms.ClusterStorageResponse
	(*ClusterStorageRequest)(nil),                      // 99: cms.ClusterStorageRequest
	(*ClusterStorageListResponse)(nil),                 // 100: cms.ClusterStorageListResponse
	(*ClusterStorageListRequest)(nil),                  // 101: cms.ClusterStorageListRequest
	(*ClusterVolumeGroup)(nil),                         // 102: cms.ClusterVolumeGroup
	(*ClusterVolumeGroupSnapshot)(nil),                 // 103: cms.ClusterVolumeGroupSnapshot
	(*GetClusterVolumeGroupListRequest)(nil),           // 104: cms.GetClusterVolumeGroupListRequest
	(*GetClusterVolumeGroupListResponse)(nil),          // 105: cms.GetClusterVolumeGroupListResponse
	(*GetClusterVolumeGroupByUUIDRequest)(nil),         // 106: cms.GetClusterVolumeGroupByUUIDRequest
	(*GetClusterVolumeGroupResponse)(nil),              // 107: cms.GetClusterVolumeGroupResponse
	(*CreateClusterVolumeGroupRequest)(nil),            // 108: cms.CreateClusterVolumeGroupRequest
	(*CreateClusterVolumeGroupResponse)(nil),           // 109: cms.CreateClusterVolumeGroupResponse
	(*DeleteClusterVolumeGroupRequest)(nil),            // 110: cms.DeleteClusterVolumeGroupRequest
	(*DeleteClusterVolumeGroupResponse)(nil),           // 111: cms.DeleteClusterVolumeGroupResponse
	(*UpdateClusterVolumeGroupRequest)(nil),            // 112: cms.UpdateClusterVolumeGroupRequest
	(*UpdateClusterVolumeGroupResponse)(nil),           // 113: cms.UpdateClusterVolumeGroupResponse
	(*CreateClusterVolumeGroupSnapshotRequest)(nil),    // 114: cms.CreateClusterVolumeGroupSnapshotRequest
	(*CreateClusterVolumeGroupSnapshotResponse)(nil),   // 115: cms.CreateClusterVolumeGroupSnapshotResponse
	(*DeleteClusterVolumeGroupSnapshotRequest)(nil),    // 116: cms.DeleteClusterVolumeGroupSnapshotRequest
	(*DeleteClusterVolumeGroupSnapshotResponse)(nil),   // 117: cms.DeleteClusterVolumeGroupSnapshotResponse
	(*GetClusterVolumeGroupSnapshotListRequest)(nil),   // 118: cms.GetClusterVolumeGroupSnapshotListRequest
	(*GetClusterVolumeGroupSnapshotListResult)(nil),    // 119: cms.GetClusterVolumeGroupSnapshotListResult
	(*GetClusterVolumeGroupSnapshotListResponse)(nil),  // 120: cms.GetClusterVolumeGroupSnapshotListResponse
	(*ClusterVolumeSnapshot)(nil),                      // 121: cms.ClusterVolumeSnapshot
	(*ClusterVolume)(nil),                              // 122: cms.ClusterVolume
	(*ClusterVolumeResponse)(nil),                      // 123: cms.ClusterVolumeResponse
	(*ClusterVolumeRequest)(nil),                       // 124: cms.ClusterVolumeRequest
	(*ClusterVolumeByUUIDRequest)(nil),                 // 125: cms.ClusterVolumeByUUIDRequest
	(*ClusterVolumeListResponse)(nil),                  // 126: cms.ClusterVolumeListResponse
	(*ClusterVolumeListRequest)(nil),                   // 127: cms.ClusterVolumeListRequest
	(*CreateClusterVolumeRequest)(nil),                 // 128: cms.CreateClusterVolumeRequest
	(*CreateClusterVolumeResponse)(nil),                // 129: cms.CreateClusterVolumeResponse
	(*ImportClusterVolumeRequest)(nil),                 // 130: cms.ImportClusterVolumeRequest
	(*ImportClusterVolumeResponse)(nil),                // 131: cms.ImportClusterVolumeResponse
	(*CopyClusterVolumeRequest)(nil),                   // 132: cms.CopyClusterVolumeRequest
	(*CopyClusterVolumeResponse)(nil),                  // 133: cms.CopyClusterVolumeResponse
	(*DeleteClusterVolumeCopyRequest)(nil),             // 134: cms.DeleteClusterVolumeCopyRequest
	(*DeleteClusterVolumeCopyResponse)(nil),            // 135: cms.DeleteClusterVolumeCopyResponse
	(*CreateClusterVolumeSnapshotRequest)(nil),         // 136: cms.CreateClusterVolumeSnapshotRequest
	(*CreateClusterVolumeSnapshotResponse)(nil),        // 137: cms.CreateClusterVolumeSnapshotResponse
	(*DeleteClusterVolumeRequest)(nil),                 // 138: cms.DeleteClusterVolumeRequest
	(*DeleteClusterVolumeResponse)(nil),                // 139: cms.DeleteClusterVolumeResponse
	(*SyncClusterVolumeSnapshotListRequest)(nil),       // 140: cms.SyncClusterVolumeSnapshotListRequest
	(*SyncClusterVolumeSnapshotListResponse)(nil),      // 141: cms.SyncClusterVolumeSnapshotListResponse
	(*VolumePair)(nil),                                 // 142: cms.VolumePair
	(*SnapshotPair)(nil),                               // 143: cms.SnapshotPair
	(*UnmanageClusterVolumeRequest)(nil),               // 144: cms.UnmanageClusterVolumeRequest
	(*UnmanageClusterVolumeResponse)(nil),              // 145: cms.UnmanageClusterVolumeResponse
	(*DeleteClusterVolumeSnapshotRequest)(nil),         // 146: cms.DeleteClusterVolumeSnapshotRequest
	(*DeleteClusterVolumeSnapshotResponse)(nil),        // 147: cms.DeleteClusterVolumeSnapshotResponse
	(*ClusterFloatingIP)(nil),                          // 148: cms.ClusterFloatingIP
	(*ClusterKeypair)(nil),                             // 149: cms.ClusterKeypair
	(*ClusterInstanceExtraSpec)(nil),                   // 150: cms.ClusterInstanceExtraSpec
	(*ClusterInstanceSpec)(nil),                        // 151: cms.ClusterInstanceSpec
	(*ClusterSecurityGroupRule)(nil),                   // 152: cms.ClusterSecurityGroupRule
	(*ClusterSecurityGroup)(nil),                       // 153: cms.ClusterSecurityGroup
	(*ClusterInstanceNetwork)(nil),                     // 154: cms.ClusterInstanceNetwork
	(*ClusterInstanceVolume)(nil),                      // 155: cms.ClusterInstanceVolume
	(*ClusterInstance)(nil),                            // 156: cms.ClusterInstance
	(*ClusterInstanceListResponse)(nil),                // 157: cms.ClusterInstanceListResponse
	(*ClusterInstanceListRequest)(nil),                 // 158: cms.ClusterInstanceListRequest
	(*ClusterInstanceResponse)(nil),                    // 159: cms.ClusterInstanceResponse
	(*ClusterInstanceRequest)(nil),                     // 160: cms.ClusterInstanceRequest
	(*ClusterInstanceByUUIDRequest)(nil),               // 161: cms.ClusterInstanceByUUIDRequest
	(*ClusterInstanceNumber)(nil),                      // 162: cms.ClusterInstanceNumber
	(*ClusterInstanceNumberResponse)(nil),              // 163: cms.ClusterInstanceNumberResponse
	(*ClusterInstanceNumberRequest)(nil),               // 164: cms.ClusterInstanceNumberRequest
	(*CheckIsExistClusterInstanceRequest)(nil),         // 165: cms.CheckIsExistClusterInstanceRequest
	(*CreateClusterInstanceRequest)(nil),               // 166: cms.CreateClusterInstanceRequest
	(*CreateClusterInstanceResponse)(nil),              // 167: cms.CreateClusterInstanceResponse
	(*DeleteClusterInstanceRequest)(nil),               // 168: cms.DeleteClusterInstanceRequest
	(*DeleteClusterInstanceResponse)(nil),              // 169: cms.DeleteClusterInstanceResponse
	(*ClusterInstanceSpecListRequest)(nil),             // 170: cms.ClusterInstanceSpecListRequest
	(*ClusterInstanceSpecListResponse)(nil),            // 171: cms.ClusterInstanceSpecListResponse
	(*ClusterInstanceSpecRequest)(nil),                 // 172: cms.ClusterInstanceSpecRequest
	(*ClusterInstanceSpecByUUIDRequest)(nil),           // 173: cms.ClusterInstanceSpecByUUIDRequest
	(*ClusterInstanceSpecResponse)(nil),                // 174: cms.ClusterInstanceSpecResponse
	(*StartClusterInstanceRequest)(nil),                // 175: cms.StartClusterInstanceRequest
	(*StartClusterInstanceResponse)(nil),               // 176: cms.StartClusterInstanceResponse
	(*StopClusterInstanceRequest)(nil),                 // 177: cms.StopClusterInstanceRequest
	(*StopClusterInstanceResponse)(nil),                // 178: cms.StopClusterInstanceResponse
	(*CreateClusterInstanceSpecRequest)(nil),           // 179: cms.CreateClusterInstanceSpecRequest
	(*CreateClusterInstanceSpecResponse)(nil),          // 180: cms.CreateClusterInstanceSpecResponse
	(*DeleteClusterInstanceSpecRequest)(nil),           // 181: cms.DeleteClusterInstanceSpecRequest
	(*DeleteClusterInstanceSpecResponse)(nil),          // 182: cms.DeleteClusterInstanceSpecResponse
	(*ClusterKeyPairResponse)(nil),                     // 183: cms.ClusterKeyPairResponse
	(*ClusterKeyPairRequest)(nil),                      // 184: cms.ClusterKeyPairRequest
	(*CreateClusterKeypairRequest)(nil),                // 185: cms.CreateClusterKeypairRequest
	(*CreateClusterKeypairResponse)(nil),               // 186: cms.CreateClusterKeypairResponse
	(*DeleteClusterKeypairRequest)(nil),                // 187: cms.DeleteClusterKeypairRequest
	(*DeleteClusterKeypairResponse)(nil),               // 188: cms.DeleteClusterKeypairResponse
	(*ClusterInstanceUserScriptRequest)(nil),           // 189: cms.ClusterInstanceUserScriptRequest
	(*ClusterInstanceUserScriptResponse)(nil),          // 190: cms.ClusterInstanceUserScriptResponse
	(*UpdateClusterInstanceUserScriptRequest)(nil),     // 191: cms.UpdateClusterInstanceUserScriptRequest
	(*UpdateClusterInstanceUserScriptResponse)(nil),    // 192: cms.UpdateClusterInstanceUserScriptResponse
	(*ClusterSecurityGroupListResponse)(nil),           // 193: cms.ClusterSecurityGroupListResponse
	(*ClusterSecurityGroupListRequest)(nil),            // 194: cms.ClusterSecurityGroupListRequest
	(*ClusterSecurityGroupResponse)(nil),               // 195: cms.ClusterSecurityGroupResponse
	(*CreateClusterSecurityGroupRequest)(nil),          // 196: cms.CreateClusterSecurityGroupRequest
	(*ClusterSecurityGroupRuleResponse)(nil),           // 197: cms.ClusterSecurityGroupRuleResponse
	(*CreateClusterSecurityGroupRuleRequest)(nil),      // 198: cms.CreateClusterSecurityGroupRuleRequest
	(*ClusterSecurityGroupRequest)(nil),                // 199: cms.ClusterSecurityGroupRequest
	(*ClusterSecurityGroupByUUIDRequest)(nil),          // 200: cms.ClusterSecurityGroupByUUIDRequest
	nil,                          // 201: cms.ClusterStorageMetadataResponse.MetadataEntry
	nil,                          // 202: cms.UpdateClusterStorageMetadataRequest.MetadataEntry
	nil,                          // 203: cms.ImportClusterVolumeRequest.TargetMetadataEntry
	nil,                          // 204: cms.CopyClusterVolumeRequest.TargetMetadataEntry
	nil,                          // 205: cms.DeleteClusterVolumeCopyRequest.TargetMetadataEntry
	nil,                          // 206: cms.UnmanageClusterVolumeRequest.TargetMetadataEntry
	(*wrappers.UInt64Value)(nil), // 207: google.protobuf.UInt64Value
}
var file_proto_cluster_manager_proto_depIdxs = []int32{
	207, // 0: cms.Pagination.page:type_name -> google.protobuf.UInt64Value
	207, // 1: cms.Pagination.total_page:type_name -> google.protobuf.UInt64Value
	207, // 2: cms.Pagination.total_items:type_name -> google.protobuf.UInt64Value
	1,   // 3: cms.PublicKey.message:type_name -> cms.Message
	1,   // 4: cms.ClusterConnectionResponse.message:type_name -> cms.Message
	8,   // 5: cms.GetCenterConfigResponse.config:type_name -> cms.Config
	1,   // 6: cms.GetCenterConfigResponse.message:type_name -> cms.Message
	8,   // 7: cms.UpdateCenterConfigRequest.config:type_name -> cms.Config
	1,   // 8: cms.UpdateCenterConfigResponse.message:type_name -> cms.Message
	15,  // 9: cms.CheckClusterResponse.computes:type_name -> cms.ComputeStatus
	13,  // 10: cms.CheckClusterResponse.storages:type_name -> cms.StorageStatus
	14,  // 11: cms.CheckClusterResponse.networks:type_name -> cms.NetworkStatus
	1,   // 12: cms.CheckClusterResponse.message:type_name -> cms.Message
	1,   // 13: cms.SyncClusterResponse.message:type_name -> cms.Message
	16,  // 14: cms.GetClusterSyncStatusResponse.completion:type_name -> cms.Completion
	1,   // 15: cms.GetClusterSyncStatusResponse.reasons:type_name -> cms.Message
	1,   // 16: cms.SyncExceptionResponse.message:type_name -> cms.Message
	15,  // 17: cms.SyncExceptionRequest.computes:type_name -> cms.ComputeStatus
	13,  // 18: cms.SyncExceptionRequest.storages:type_name -> cms.StorageStatus
	14,  // 19: cms.SyncExceptionRequest.networks:type_name -> cms.NetworkStatus
	24,  // 20: cms.ClusterPermission.group:type_name -> cms.Group
	24,  // 21: cms.Cluster.owner_group:type_name -> cms.Group
	25,  // 22: cms.Cluster.permissions:type_name -> cms.ClusterPermission
	26,  // 23: cms.ClusterListResponse.clusters:type_name -> cms.Cluster
	2,   // 24: cms.ClusterListResponse.pagination:type_name -> cms.Pagination
	1,   // 25: cms.ClusterListResponse.message:type_name -> cms.Message
	207, // 26: cms.ClusterListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 27: cms.ClusterListRequest.offset:type_name -> google.protobuf.UInt64Value
	26,  // 28: cms.ClusterResponse.cluster:type_name -> cms.Cluster
	1,   // 29: cms.ClusterResponse.message:type_name -> cms.Message
	26,  // 30: cms.AddClusterRequest.cluster:type_name -> cms.Cluster
	26,  // 31: cms.UpdateClusterRequest.cluster:type_name -> cms.Cluster
	1,   // 32: cms.DeleteClusterResponse.message:type_name -> cms.Message
	26,  // 33: cms.ClusterHypervisor.cluster:type_name -> cms.Cluster
	41,  // 34: cms.ClusterHypervisor.availability_zone:type_name -> cms.ClusterAvailabilityZone
	35,  // 35: cms.ClusterHypervisorListResponse.hypervisors:type_name -> cms.ClusterHypervisor
	2,   // 36: cms.ClusterHypervisorListResponse.pagination:type_name -> cms.Pagination
	1,   // 37: cms.ClusterHypervisorListResponse.message:type_name -> cms.Message
	207, // 38: cms.ClusterHypervisorListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 39: cms.ClusterHypervisorListRequest.offset:type_name -> google.protobuf.UInt64Value
	35,  // 40: cms.ClusterHypervisorResponse.hypervisor:type_name -> cms.ClusterHypervisor
	1,   // 41: cms.ClusterHypervisorResponse.message:type_name -> cms.Message
	35,  // 42: cms.UpdateClusterHypervisorRequest.hypervisor:type_name -> cms.ClusterHypervisor
	26,  // 43: cms.ClusterAvailabilityZone.cluster:type_name -> cms.Cluster
	35,  // 44: cms.ClusterAvailabilityZone.hypervisors:type_name -> cms.ClusterHypervisor
	41,  // 45: cms.ClusterAvailabilityZoneListResponse.availability_zones:type_name -> cms.ClusterAvailabilityZone
	2,   // 46: cms.ClusterAvailabilityZoneListResponse.pagination:type_name -> cms.Pagination
	1,   // 47: cms.ClusterAvailabilityZoneListResponse.message:type_name -> cms.Message
	207, // 48: cms.ClusterAvailabilityZoneListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 49: cms.ClusterAvailabilityZoneListRequest.offset:type_name -> google.protobuf.UInt64Value
	41,  // 50: cms.ClusterAvailabilityZoneResponse.availability_zone:type_name -> cms.ClusterAvailabilityZone
	1,   // 51: cms.ClusterAvailabilityZoneResponse.message:type_name -> cms.Message
	26,  // 52: cms.ClusterTenant.cluster:type_name -> cms.Cluster
	46,  // 53: cms.ClusterTenant.quotas:type_name -> cms.ClusterQuota
	47,  // 54: cms.ClusterTenantListResponse.tenants:type_name -> cms.ClusterTenant
	2,   // 55: cms.ClusterTenantListResponse.pagination:type_name -> cms.Pagination
	1,   // 56: cms.ClusterTenantListResponse.message:type_name -> cms.Message
	7,   // 57: cms.DeleteClusterTenantRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 58: cms.DeleteClusterTenantRequest.tenant:type_name -> cms.ClusterTenant
	1,   // 59: cms.DeleteClusterTenantResponse.message:type_name -> cms.Message
	207, // 60: cms.ClusterTenantListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 61: cms.ClusterTenantListRequest.offset:type_name -> google.protobuf.UInt64Value
	47,  // 62: cms.ClusterTenantResponse.tenant:type_name -> cms.ClusterTenant
	1,   // 63: cms.ClusterTenantResponse.message:type_name -> cms.Message
	7,   // 64: cms.CreateClusterTenantRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 65: cms.CreateClusterTenantRequest.tenant:type_name -> cms.ClusterTenant
	1,   // 66: cms.CheckIsExistResponse.message:type_name -> cms.Message
	7,   // 67: cms.DeleteClusterSecurityGroupRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 68: cms.DeleteClusterSecurityGroupRequest.tenant:type_name -> cms.ClusterTenant
	153, // 69: cms.DeleteClusterSecurityGroupRequest.security_group:type_name -> cms.ClusterSecurityGroup
	1,   // 70: cms.DeleteClusterSecurityGroupResponse.message:type_name -> cms.Message
	60,  // 71: cms.ClusterSubnet.dhcp_pools:type_name -> cms.ClusterSubnetDHCPPool
	61,  // 72: cms.ClusterSubnet.nameservers:type_name -> cms.ClusterSubnetNameserver
	26,  // 73: cms.ClusterNetwork.cluster:type_name -> cms.Cluster
	47,  // 74: cms.ClusterNetwork.tenant:type_name -> cms.ClusterTenant
	62,  // 75: cms.ClusterNetwork.subnets:type_name -> cms.ClusterSubnet
	148, // 76: cms.ClusterNetwork.floating_ips:type_name -> cms.ClusterFloatingIP
	63,  // 77: cms.ClusterNetworkListResponse.networks:type_name -> cms.ClusterNetwork
	2,   // 78: cms.ClusterNetworkListResponse.pagination:type_name -> cms.Pagination
	1,   // 79: cms.ClusterNetworkListResponse.message:type_name -> cms.Message
	207, // 80: cms.ClusterNetworkListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 81: cms.ClusterNetworkListRequest.offset:type_name -> google.protobuf.UInt64Value
	63,  // 82: cms.ClusterNetworkResponse.network:type_name -> cms.ClusterNetwork
	1,   // 83: cms.ClusterNetworkResponse.message:type_name -> cms.Message
	1,   // 84: cms.DeleteClusterNetworkResponse.message:type_name -> cms.Message
	7,   // 85: cms.DeleteClusterNetworkRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 86: cms.DeleteClusterNetworkRequest.tenant:type_name -> cms.ClusterTenant
	63,  // 87: cms.DeleteClusterNetworkRequest.network:type_name -> cms.ClusterNetwork
	7,   // 88: cms.CreateClusterNetworkRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 89: cms.CreateClusterNetworkRequest.tenant:type_name -> cms.ClusterTenant
	63,  // 90: cms.CreateClusterNetworkRequest.network:type_name -> cms.ClusterNetwork
	62,  // 91: cms.ClusterSubnetResponse.subnet:type_name -> cms.ClusterSubnet
	1,   // 92: cms.ClusterSubnetResponse.message:type_name -> cms.Message
	7,   // 93: cms.CreateClusterSubnetRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 94: cms.CreateClusterSubnetRequest.tenant:type_name -> cms.ClusterTenant
	63,  // 95: cms.CreateClusterSubnetRequest.network:type_name -> cms.ClusterNetwork
	62,  // 96: cms.CreateClusterSubnetRequest.subnet:type_name -> cms.ClusterSubnet
	7,   // 97: cms.DeleteClusterSubnetRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 98: cms.DeleteClusterSubnetRequest.tenant:type_name -> cms.ClusterTenant
	63,  // 99: cms.DeleteClusterSubnetRequest.network:type_name -> cms.ClusterNetwork
	62,  // 100: cms.DeleteClusterSubnetRequest.subnet:type_name -> cms.ClusterSubnet
	1,   // 101: cms.DeleteClusterSubnetResponse.message:type_name -> cms.Message
	7,   // 102: cms.CreateClusterFloatingIPRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 103: cms.CreateClusterFloatingIPRequest.tenant:type_name -> cms.ClusterTenant
	63,  // 104: cms.CreateClusterFloatingIPRequest.network:type_name -> cms.ClusterNetwork
	148, // 105: cms.CreateClusterFloatingIPRequest.floating_ip:type_name -> cms.ClusterFloatingIP
	148, // 106: cms.ClusterFloatingIPResponse.floating_ip:type_name -> cms.ClusterFloatingIP
	1,   // 107: cms.ClusterFloatingIPResponse.message:type_name -> cms.Message
	7,   // 108: cms.DeleteClusterFloatingIPRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 109: cms.DeleteClusterFloatingIPRequest.tenant:type_name -> cms.ClusterTenant
	148, // 110: cms.DeleteClusterFloatingIPRequest.floating_ip:type_name -> cms.ClusterFloatingIP
	1,   // 111: cms.DeleteClusterFloatingIPResponse.message:type_name -> cms.Message
	63,  // 112: cms.ClusterNetworkRoutingInterface.network:type_name -> cms.ClusterNetwork
	62,  // 113: cms.ClusterNetworkRoutingInterface.subnet:type_name -> cms.ClusterSubnet
	47,  // 114: cms.ClusterRouter.tenant:type_name -> cms.ClusterTenant
	83,  // 115: cms.ClusterRouter.internal_routing_interfaces:type_name -> cms.ClusterNetworkRoutingInterface
	83,  // 116: cms.ClusterRouter.external_routing_interfaces:type_name -> cms.ClusterNetworkRoutingInterface
	84,  // 117: cms.ClusterRouter.extra_routes:type_name -> cms.ClusterRouterExtraRoute
	7,   // 118: cms.CreateClusterRouterRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 119: cms.CreateClusterRouterRequest.tenant:type_name -> cms.ClusterTenant
	86,  // 120: cms.CreateClusterRouterRequest.router:type_name -> cms.ClusterRouter
	7,   // 121: cms.DeleteClusterRouterRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 122: cms.DeleteClusterRouterRequest.tenant:type_name -> cms.ClusterTenant
	86,  // 123: cms.DeleteClusterRouterRequest.router:type_name -> cms.ClusterRouter
	1,   // 124: cms.DeleteClusterRouterResponse.message:type_name -> cms.Message
	86,  // 125: cms.ClusterRouterListResponse.routers:type_name -> cms.ClusterRouter
	2,   // 126: cms.ClusterRouterListResponse.pagination:type_name -> cms.Pagination
	1,   // 127: cms.ClusterRouterListResponse.message:type_name -> cms.Message
	207, // 128: cms.ClusterRouterListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 129: cms.ClusterRouterListRequest.offset:type_name -> google.protobuf.UInt64Value
	86,  // 130: cms.ClusterRouterResponse.router:type_name -> cms.ClusterRouter
	1,   // 131: cms.ClusterRouterResponse.message:type_name -> cms.Message
	26,  // 132: cms.ClusterStorage.cluster:type_name -> cms.Cluster
	201, // 133: cms.ClusterStorageMetadataResponse.metadata:type_name -> cms.ClusterStorageMetadataResponse.MetadataEntry
	1,   // 134: cms.ClusterStorageMetadataResponse.message:type_name -> cms.Message
	202, // 135: cms.UpdateClusterStorageMetadataRequest.metadata:type_name -> cms.UpdateClusterStorageMetadataRequest.MetadataEntry
	95,  // 136: cms.ClusterStorageResponse.storage:type_name -> cms.ClusterStorage
	1,   // 137: cms.ClusterStorageResponse.message:type_name -> cms.Message
	95,  // 138: cms.ClusterStorageListResponse.storages:type_name -> cms.ClusterStorage
	2,   // 139: cms.ClusterStorageListResponse.pagination:type_name -> cms.Pagination
	1,   // 140: cms.ClusterStorageListResponse.message:type_name -> cms.Message
	207, // 141: cms.ClusterStorageListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 142: cms.ClusterStorageListRequest.offset:type_name -> google.protobuf.UInt64Value
	47,  // 143: cms.ClusterVolumeGroup.tenant:type_name -> cms.ClusterTenant
	95,  // 144: cms.ClusterVolumeGroup.storages:type_name -> cms.ClusterStorage
	122, // 145: cms.ClusterVolumeGroup.volumes:type_name -> cms.ClusterVolume
	102, // 146: cms.GetClusterVolumeGroupListResponse.volume_groups:type_name -> cms.ClusterVolumeGroup
	102, // 147: cms.GetClusterVolumeGroupResponse.volume_group:type_name -> cms.ClusterVolumeGroup
	7,   // 148: cms.CreateClusterVolumeGroupRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 149: cms.CreateClusterVolumeGroupRequest.tenant:type_name -> cms.ClusterTenant
	102, // 150: cms.CreateClusterVolumeGroupRequest.volume_group:type_name -> cms.ClusterVolumeGroup
	102, // 151: cms.CreateClusterVolumeGroupResponse.volume_group:type_name -> cms.ClusterVolumeGroup
	1,   // 152: cms.CreateClusterVolumeGroupResponse.message:type_name -> cms.Message
	7,   // 153: cms.DeleteClusterVolumeGroupRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 154: cms.DeleteClusterVolumeGroupRequest.tenant:type_name -> cms.ClusterTenant
	102, // 155: cms.DeleteClusterVolumeGroupRequest.volume_group:type_name -> cms.ClusterVolumeGroup
	1,   // 156: cms.DeleteClusterVolumeGroupResponse.message:type_name -> cms.Message
	7,   // 157: cms.UpdateClusterVolumeGroupRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 158: cms.UpdateClusterVolumeGroupRequest.tenant:type_name -> cms.ClusterTenant
	102, // 159: cms.UpdateClusterVolumeGroupRequest.volume_group:type_name -> cms.ClusterVolumeGroup
	122, // 160: cms.UpdateClusterVolumeGroupRequest.add_volumes:type_name -> cms.ClusterVolume
	122, // 161: cms.UpdateClusterVolumeGroupRequest.delete_volumes:type_name -> cms.ClusterVolume
	1,   // 162: cms.UpdateClusterVolumeGroupResponse.message:type_name -> cms.Message
	7,   // 163: cms.CreateClusterVolumeGroupSnapshotRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 164: cms.CreateClusterVolumeGroupSnapshotRequest.tenant:type_name -> cms.ClusterTenant
	102, // 165: cms.CreateClusterVolumeGroupSnapshotRequest.volume_group:type_name -> cms.ClusterVolumeGroup
	103, // 166: cms.CreateClusterVolumeGroupSnapshotRequest.volume_group_snapshot:type_name -> cms.ClusterVolumeGroupSnapshot
	103, // 167: cms.CreateClusterVolumeGroupSnapshotResponse.volume_group_snapshot:type_name -> cms.ClusterVolumeGroupSnapshot
	1,   // 168: cms.CreateClusterVolumeGroupSnapshotResponse.message:type_name -> cms.Message
	7,   // 169: cms.DeleteClusterVolumeGroupSnapshotRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 170: cms.DeleteClusterVolumeGroupSnapshotRequest.tenant:type_name -> cms.ClusterTenant
	102, // 171: cms.DeleteClusterVolumeGroupSnapshotRequest.volume_group:type_name -> cms.ClusterVolumeGroup
	103, // 172: cms.DeleteClusterVolumeGroupSnapshotRequest.volume_group_snapshot:type_name -> cms.ClusterVolumeGroupSnapshot
	1,   // 173: cms.DeleteClusterVolumeGroupSnapshotResponse.message:type_name -> cms.Message
	7,   // 174: cms.GetClusterVolumeGroupSnapshotListRequest.conn:type_name -> cms.ClusterConnectionInfo
	102, // 175: cms.GetClusterVolumeGroupSnapshotListResult.volume_group:type_name -> cms.ClusterVolumeGroup
	103, // 176: cms.GetClusterVolumeGroupSnapshotListResult.volume_group_snapshot:type_name -> cms.ClusterVolumeGroupSnapshot
	119, // 177: cms.GetClusterVolumeGroupSnapshotListResponse.volume_group_snapshots:type_name -> cms.GetClusterVolumeGroupSnapshotListResult
	1,   // 178: cms.GetClusterVolumeGroupSnapshotListResponse.message:type_name -> cms.Message
	26,  // 179: cms.ClusterVolume.cluster:type_name -> cms.Cluster
	47,  // 180: cms.ClusterVolume.tenant:type_name -> cms.ClusterTenant
	95,  // 181: cms.ClusterVolume.storage:type_name -> cms.ClusterStorage
	121, // 182: cms.ClusterVolume.snapshots:type_name -> cms.ClusterVolumeSnapshot
	122, // 183: cms.ClusterVolumeResponse.volume:type_name -> cms.ClusterVolume
	1,   // 184: cms.ClusterVolumeResponse.message:type_name -> cms.Message
	122, // 185: cms.ClusterVolumeListResponse.volumes:type_name -> cms.ClusterVolume
	2,   // 186: cms.ClusterVolumeListResponse.pagination:type_name -> cms.Pagination
	1,   // 187: cms.ClusterVolumeListResponse.message:type_name -> cms.Message
	207, // 188: cms.ClusterVolumeListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 189: cms.ClusterVolumeListRequest.offset:type_name -> google.protobuf.UInt64Value
	7,   // 190: cms.CreateClusterVolumeRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 191: cms.CreateClusterVolumeRequest.tenant:type_name -> cms.ClusterTenant
	95,  // 192: cms.CreateClusterVolumeRequest.storage:type_name -> cms.ClusterStorage
	122, // 193: cms.CreateClusterVolumeRequest.volume:type_name -> cms.ClusterVolume
	122, // 194: cms.CreateClusterVolumeResponse.volume:type_name -> cms.ClusterVolume
	1,   // 195: cms.CreateClusterVolumeResponse.message:type_name -> cms.Message
	7,   // 196: cms.ImportClusterVolumeRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 197: cms.ImportClusterVolumeRequest.tenant:type_name -> cms.ClusterTenant
	95,  // 198: cms.ImportClusterVolumeRequest.source_storage:type_name -> cms.ClusterStorage
	95,  // 199: cms.ImportClusterVolumeRequest.target_storage:type_name -> cms.ClusterStorage
	203, // 200: cms.ImportClusterVolumeRequest.target_metadata:type_name -> cms.ImportClusterVolumeRequest.TargetMetadataEntry
	122, // 201: cms.ImportClusterVolumeRequest.volume:type_name -> cms.ClusterVolume
	121, // 202: cms.ImportClusterVolumeRequest.snapshots:type_name -> cms.ClusterVolumeSnapshot
	95,  // 203: cms.ImportClusterVolumeResponse.source_storage:type_name -> cms.ClusterStorage
	95,  // 204: cms.ImportClusterVolumeResponse.target_storage:type_name -> cms.ClusterStorage
	142, // 205: cms.ImportClusterVolumeResponse.volume_pair:type_name -> cms.VolumePair
	143, // 206: cms.ImportClusterVolumeResponse.snapshot_pairs:type_name -> cms.SnapshotPair
	1,   // 207: cms.ImportClusterVolumeResponse.message:type_name -> cms.Message
	7,   // 208: cms.CopyClusterVolumeRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 209: cms.CopyClusterVolumeRequest.tenant:type_name -> cms.ClusterTenant
	95,  // 210: cms.CopyClusterVolumeRequest.source_storage:type_name -> cms.ClusterStorage
	95,  // 211: cms.CopyClusterVolumeRequest.target_storage:type_name -> cms.ClusterStorage
	204, // 212: cms.CopyClusterVolumeRequest.target_metadata:type_name -> cms.CopyClusterVolumeRequest.TargetMetadataEntry
	122, // 213: cms.CopyClusterVolumeRequest.volume:type_name -> cms.ClusterVolume
	121, // 214: cms.CopyClusterVolumeRequest.snapshots:type_name -> cms.ClusterVolumeSnapshot
	95,  // 215: cms.CopyClusterVolumeResponse.source_storage:type_name -> cms.ClusterStorage
	95,  // 216: cms.CopyClusterVolumeResponse.target_storage:type_name -> cms.ClusterStorage
	122, // 217: cms.CopyClusterVolumeResponse.volume:type_name -> cms.ClusterVolume
	121, // 218: cms.CopyClusterVolumeResponse.snapshots:type_name -> cms.ClusterVolumeSnapshot
	1,   // 219: cms.CopyClusterVolumeResponse.message:type_name -> cms.Message
	7,   // 220: cms.DeleteClusterVolumeCopyRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 221: cms.DeleteClusterVolumeCopyRequest.tenant:type_name -> cms.ClusterTenant
	95,  // 222: cms.DeleteClusterVolumeCopyRequest.source_storage:type_name -> cms.ClusterStorage
	95,  // 223: cms.DeleteClusterVolumeCopyRequest.target_storage:type_name -> cms.ClusterStorage
	205, // 224: cms.DeleteClusterVolumeCopyRequest.target_metadata:type_name -> cms.DeleteClusterVolumeCopyRequest.TargetMetadataEntry
	122, // 225: cms.DeleteClusterVolumeCopyRequest.volume:type_name -> cms.ClusterVolume
	121, // 226: cms.DeleteClusterVolumeCopyRequest.snapshots:type_name -> cms.ClusterVolumeSnapshot
	1,   // 227: cms.DeleteClusterVolumeCopyResponse.message:type_name -> cms.Message
	7,   // 228: cms.CreateClusterVolumeSnapshotRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 229: cms.CreateClusterVolumeSnapshotRequest.tenant:type_name -> cms.ClusterTenant
	122, // 230: cms.CreateClusterVolumeSnapshotRequest.volume:type_name -> cms.ClusterVolume
	121, // 231: cms.CreateClusterVolumeSnapshotRequest.snapshot:type_name -> cms.ClusterVolumeSnapshot
	121, // 232: cms.CreateClusterVolumeSnapshotResponse.snapshot:type_name -> cms.ClusterVolumeSnapshot
	1,   // 233: cms.CreateClusterVolumeSnapshotResponse.message:type_name -> cms.Message
	7,   // 234: cms.DeleteClusterVolumeRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 235: cms.DeleteClusterVolumeRequest.tenant:type_name -> cms.ClusterTenant
	122, // 236: cms.DeleteClusterVolumeRequest.volume:type_name -> cms.ClusterVolume
	1,   // 237: cms.DeleteClusterVolumeResponse.message:type_name -> cms.Message
	26,  // 238: cms.SyncClusterVolumeSnapshotListRequest.cluster:type_name -> cms.Cluster
	1,   // 239: cms.SyncClusterVolumeSnapshotListResponse.message:type_name -> cms.Message
	122, // 240: cms.VolumePair.source:type_name -> cms.ClusterVolume
	122, // 241: cms.VolumePair.target:type_name -> cms.ClusterVolume
	121, // 242: cms.SnapshotPair.source:type_name -> cms.ClusterVolumeSnapshot
	121, // 243: cms.SnapshotPair.target:type_name -> cms.ClusterVolumeSnapshot
	7,   // 244: cms.UnmanageClusterVolumeRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 245: cms.UnmanageClusterVolumeRequest.tenant:type_name -> cms.ClusterTenant
	95,  // 246: cms.UnmanageClusterVolumeRequest.source_storage:type_name -> cms.ClusterStorage
	95,  // 247: cms.UnmanageClusterVolumeRequest.target_storage:type_name -> cms.ClusterStorage
	206, // 248: cms.UnmanageClusterVolumeRequest.target_metadata:type_name -> cms.UnmanageClusterVolumeRequest.TargetMetadataEntry
	142, // 249: cms.UnmanageClusterVolumeRequest.volume_pair:type_name -> cms.VolumePair
	143, // 250: cms.UnmanageClusterVolumeRequest.snapshot_pairs:type_name -> cms.SnapshotPair
	1,   // 251: cms.UnmanageClusterVolumeResponse.message:type_name -> cms.Message
	7,   // 252: cms.DeleteClusterVolumeSnapshotRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 253: cms.DeleteClusterVolumeSnapshotRequest.tenant:type_name -> cms.ClusterTenant
	121, // 254: cms.DeleteClusterVolumeSnapshotRequest.snapshot:type_name -> cms.ClusterVolumeSnapshot
	1,   // 255: cms.DeleteClusterVolumeSnapshotResponse.message:type_name -> cms.Message
	47,  // 256: cms.ClusterFloatingIP.tenant:type_name -> cms.ClusterTenant
	63,  // 257: cms.ClusterFloatingIP.network:type_name -> cms.ClusterNetwork
	26,  // 258: cms.ClusterKeypair.cluster:type_name -> cms.Cluster
	26,  // 259: cms.ClusterInstanceSpec.cluster:type_name -> cms.Cluster
	150, // 260: cms.ClusterInstanceSpec.extra_specs:type_name -> cms.ClusterInstanceExtraSpec
	153, // 261: cms.ClusterSecurityGroupRule.remote_security_group:type_name -> cms.ClusterSecurityGroup
	26,  // 262: cms.ClusterSecurityGroup.cluster:type_name -> cms.Cluster
	47,  // 263: cms.ClusterSecurityGroup.tenant:type_name -> cms.ClusterTenant
	152, // 264: cms.ClusterSecurityGroup.rules:type_name -> cms.ClusterSecurityGroupRule
	63,  // 265: cms.ClusterInstanceNetwork.network:type_name -> cms.ClusterNetwork
	62,  // 266: cms.ClusterInstanceNetwork.subnet:type_name -> cms.ClusterSubnet
	148, // 267: cms.ClusterInstanceNetwork.floating_ip:type_name -> cms.ClusterFloatingIP
	95,  // 268: cms.ClusterInstanceVolume.storage:type_name -> cms.ClusterStorage
	122, // 269: cms.ClusterInstanceVolume.volume:type_name -> cms.ClusterVolume
	26,  // 270: cms.ClusterInstance.cluster:type_name -> cms.Cluster
	47,  // 271: cms.ClusterInstance.tenant:type_name -> cms.ClusterTenant
	41,  // 272: cms.ClusterInstance.availability_zone:type_name -> cms.ClusterAvailabilityZone
	35,  // 273: cms.ClusterInstance.hypervisor:type_name -> cms.ClusterHypervisor
	149, // 274: cms.ClusterInstance.keypair:type_name -> cms.ClusterKeypair
	151, // 275: cms.ClusterInstance.spec:type_name -> cms.ClusterInstanceSpec
	154, // 276: cms.ClusterInstance.networks:type_name -> cms.ClusterInstanceNetwork
	86,  // 277: cms.ClusterInstance.routers:type_name -> cms.ClusterRouter
	153, // 278: cms.ClusterInstance.security_groups:type_name -> cms.ClusterSecurityGroup
	155, // 279: cms.ClusterInstance.volumes:type_name -> cms.ClusterInstanceVolume
	156, // 280: cms.ClusterInstanceListResponse.instances:type_name -> cms.ClusterInstance
	2,   // 281: cms.ClusterInstanceListResponse.pagination:type_name -> cms.Pagination
	1,   // 282: cms.ClusterInstanceListResponse.message:type_name -> cms.Message
	207, // 283: cms.ClusterInstanceListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 284: cms.ClusterInstanceListRequest.offset:type_name -> google.protobuf.UInt64Value
	156, // 285: cms.ClusterInstanceResponse.instance:type_name -> cms.ClusterInstance
	1,   // 286: cms.ClusterInstanceResponse.message:type_name -> cms.Message
	162, // 287: cms.ClusterInstanceNumberResponse.instance_number:type_name -> cms.ClusterInstanceNumber
	1,   // 288: cms.ClusterInstanceNumberResponse.message:type_name -> cms.Message
	7,   // 289: cms.CreateClusterInstanceRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 290: cms.CreateClusterInstanceRequest.tenant:type_name -> cms.ClusterTenant
	41,  // 291: cms.CreateClusterInstanceRequest.availability_zone:type_name -> cms.ClusterAvailabilityZone
	35,  // 292: cms.CreateClusterInstanceRequest.hypervisor:type_name -> cms.ClusterHypervisor
	151, // 293: cms.CreateClusterInstanceRequest.spec:type_name -> cms.ClusterInstanceSpec
	149, // 294: cms.CreateClusterInstanceRequest.keypair:type_name -> cms.ClusterKeypair
	156, // 295: cms.CreateClusterInstanceRequest.instance:type_name -> cms.ClusterInstance
	154, // 296: cms.CreateClusterInstanceRequest.networks:type_name -> cms.ClusterInstanceNetwork
	153, // 297: cms.CreateClusterInstanceRequest.security_groups:type_name -> cms.ClusterSecurityGroup
	155, // 298: cms.CreateClusterInstanceRequest.volumes:type_name -> cms.ClusterInstanceVolume
	156, // 299: cms.CreateClusterInstanceResponse.instance:type_name -> cms.ClusterInstance
	1,   // 300: cms.CreateClusterInstanceResponse.message:type_name -> cms.Message
	7,   // 301: cms.DeleteClusterInstanceRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 302: cms.DeleteClusterInstanceRequest.tenant:type_name -> cms.ClusterTenant
	156, // 303: cms.DeleteClusterInstanceRequest.instance:type_name -> cms.ClusterInstance
	1,   // 304: cms.DeleteClusterInstanceResponse.message:type_name -> cms.Message
	207, // 305: cms.ClusterInstanceSpecListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 306: cms.ClusterInstanceSpecListRequest.offset:type_name -> google.protobuf.UInt64Value
	151, // 307: cms.ClusterInstanceSpecListResponse.specs:type_name -> cms.ClusterInstanceSpec
	2,   // 308: cms.ClusterInstanceSpecListResponse.pagination:type_name -> cms.Pagination
	1,   // 309: cms.ClusterInstanceSpecListResponse.message:type_name -> cms.Message
	151, // 310: cms.ClusterInstanceSpecResponse.spec:type_name -> cms.ClusterInstanceSpec
	1,   // 311: cms.ClusterInstanceSpecResponse.message:type_name -> cms.Message
	7,   // 312: cms.StartClusterInstanceRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 313: cms.StartClusterInstanceRequest.tenant:type_name -> cms.ClusterTenant
	156, // 314: cms.StartClusterInstanceRequest.instance:type_name -> cms.ClusterInstance
	1,   // 315: cms.StartClusterInstanceResponse.message:type_name -> cms.Message
	7,   // 316: cms.StopClusterInstanceRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 317: cms.StopClusterInstanceRequest.tenant:type_name -> cms.ClusterTenant
	156, // 318: cms.StopClusterInstanceRequest.instance:type_name -> cms.ClusterInstance
	1,   // 319: cms.StopClusterInstanceResponse.message:type_name -> cms.Message
	7,   // 320: cms.CreateClusterInstanceSpecRequest.conn:type_name -> cms.ClusterConnectionInfo
	151, // 321: cms.CreateClusterInstanceSpecRequest.spec:type_name -> cms.ClusterInstanceSpec
	150, // 322: cms.CreateClusterInstanceSpecRequest.extra_specs:type_name -> cms.ClusterInstanceExtraSpec
	151, // 323: cms.CreateClusterInstanceSpecResponse.spec:type_name -> cms.ClusterInstanceSpec
	1,   // 324: cms.CreateClusterInstanceSpecResponse.message:type_name -> cms.Message
	7,   // 325: cms.DeleteClusterInstanceSpecRequest.conn:type_name -> cms.ClusterConnectionInfo
	151, // 326: cms.DeleteClusterInstanceSpecRequest.spec:type_name -> cms.ClusterInstanceSpec
	1,   // 327: cms.DeleteClusterInstanceSpecResponse.message:type_name -> cms.Message
	149, // 328: cms.ClusterKeyPairResponse.keypair:type_name -> cms.ClusterKeypair
	1,   // 329: cms.ClusterKeyPairResponse.message:type_name -> cms.Message
	7,   // 330: cms.CreateClusterKeypairRequest.conn:type_name -> cms.ClusterConnectionInfo
	149, // 331: cms.CreateClusterKeypairRequest.keypair:type_name -> cms.ClusterKeypair
	149, // 332: cms.CreateClusterKeypairResponse.keypair:type_name -> cms.ClusterKeypair
	1,   // 333: cms.CreateClusterKeypairResponse.message:type_name -> cms.Message
	7,   // 334: cms.DeleteClusterKeypairRequest.conn:type_name -> cms.ClusterConnectionInfo
	149, // 335: cms.DeleteClusterKeypairRequest.keypair:type_name -> cms.ClusterKeypair
	1,   // 336: cms.DeleteClusterKeypairResponse.message:type_name -> cms.Message
	1,   // 337: cms.ClusterInstanceUserScriptResponse.message:type_name -> cms.Message
	1,   // 338: cms.UpdateClusterInstanceUserScriptResponse.message:type_name -> cms.Message
	153, // 339: cms.ClusterSecurityGroupListResponse.security_groups:type_name -> cms.ClusterSecurityGroup
	2,   // 340: cms.ClusterSecurityGroupListResponse.pagination:type_name -> cms.Pagination
	1,   // 341: cms.ClusterSecurityGroupListResponse.message:type_name -> cms.Message
	207, // 342: cms.ClusterSecurityGroupListRequest.limit:type_name -> google.protobuf.UInt64Value
	207, // 343: cms.ClusterSecurityGroupListRequest.offset:type_name -> google.protobuf.UInt64Value
	153, // 344: cms.ClusterSecurityGroupResponse.security_group:type_name -> cms.ClusterSecurityGroup
	1,   // 345: cms.ClusterSecurityGroupResponse.message:type_name -> cms.Message
	7,   // 346: cms.CreateClusterSecurityGroupRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 347: cms.CreateClusterSecurityGroupRequest.tenant:type_name -> cms.ClusterTenant
	153, // 348: cms.CreateClusterSecurityGroupRequest.security_group:type_name -> cms.ClusterSecurityGroup
	152, // 349: cms.ClusterSecurityGroupRuleResponse.security_group_rule:type_name -> cms.ClusterSecurityGroupRule
	1,   // 350: cms.ClusterSecurityGroupRuleResponse.message:type_name -> cms.Message
	7,   // 351: cms.CreateClusterSecurityGroupRuleRequest.conn:type_name -> cms.ClusterConnectionInfo
	47,  // 352: cms.CreateClusterSecurityGroupRuleRequest.tenant:type_name -> cms.ClusterTenant
	153, // 353: cms.CreateClusterSecurityGroupRuleRequest.security_group:type_name -> cms.ClusterSecurityGroup
	152, // 354: cms.CreateClusterSecurityGroupRuleRequest.security_group_rule:type_name -> cms.ClusterSecurityGroupRule
	0,   // 355: cms.ClusterManager.GetPublicKey:input_type -> cms.Empty
	7,   // 356: cms.ClusterManager.CheckConnection:input_type -> cms.ClusterConnectionInfo
	9,   // 357: cms.ClusterManager.GetCenterConfig:input_type -> cms.GetCenterConfigRequest
	11,  // 358: cms.ClusterManager.UpdateCenterConfig:input_type -> cms.UpdateCenterConfigRequest
	17,  // 359: cms.ClusterManager.CheckCluster:input_type -> cms.CheckClusterRequest
	5,   // 360: cms.ClusterManager.UpdateCredential:input_type -> cms.UpdateCredentialRequest
	19,  // 361: cms.ClusterManager.SyncCluster:input_type -> cms.SyncClusterRequest
	19,  // 362: cms.ClusterManager.GetClusterSyncStatus:input_type -> cms.SyncClusterRequest
	23,  // 363: cms.ClusterManager.SyncException:input_type -> cms.SyncExceptionRequest
	28,  // 364: cms.ClusterManager.GetClusterList:input_type -> cms.ClusterListRequest
	31,  // 365: cms.ClusterManager.AddCluster:input_type -> cms.AddClusterRequest
	30,  // 366: cms.ClusterManager.GetCluster:input_type -> cms.ClusterRequest
	32,  // 367: cms.ClusterManager.UpdateCluster:input_type -> cms.UpdateClusterRequest
	34,  // 368: cms.ClusterManager.DeleteCluster:input_type -> cms.DeleteClusterRequest
	37,  // 369: cms.ClusterManager.GetClusterHypervisorList:input_type -> cms.ClusterHypervisorListRequest
	39,  // 370: cms.ClusterManager.GetClusterHypervisor:input_type -> cms.ClusterHypervisorRequest
	40,  // 371: cms.ClusterManager.UpdateClusterHypervisor:input_type -> cms.UpdateClusterHypervisorRequest
	43,  // 372: cms.ClusterManager.GetClusterAvailabilityZoneList:input_type -> cms.ClusterAvailabilityZoneListRequest
	45,  // 373: cms.ClusterManager.GetClusterAvailabilityZone:input_type -> cms.ClusterAvailabilityZoneRequest
	51,  // 374: cms.ClusterManager.GetClusterTenantList:input_type -> cms.ClusterTenantListRequest
	55,  // 375: cms.ClusterManager.CreateClusterTenant:input_type -> cms.CreateClusterTenantRequest
	53,  // 376: cms.ClusterManager.GetClusterTenant:input_type -> cms.ClusterTenantRequest
	49,  // 377: cms.ClusterManager.DeleteClusterTenant:input_type -> cms.DeleteClusterTenantRequest
	56,  // 378: cms.ClusterManager.CheckIsExistClusterTenant:input_type -> cms.CheckIsExistByNameRequest
	65,  // 379: cms.ClusterManager.GetClusterNetworkList:input_type -> cms.ClusterNetworkListRequest
	69,  // 380: cms.ClusterManager.CreateClusterNetwork:input_type -> cms.CreateClusterNetworkRequest
	68,  // 381: cms.ClusterManager.DeleteClusterNetwork:input_type -> cms.DeleteClusterNetworkRequest
	70,  // 382: cms.ClusterManager.GetClusterNetwork:input_type -> cms.ClusterNetworkRequest
	71,  // 383: cms.ClusterManager.GetClusterNetworkByUUID:input_type -> cms.ClusterNetworkByUUIDRequest
	73,  // 384: cms.ClusterManager.CreateClusterSubnet:input_type -> cms.CreateClusterSubnetRequest
	76,  // 385: cms.ClusterManager.GetClusterSubnet:input_type -> cms.ClusterSubnetRequest
	77,  // 386: cms.ClusterManager.CreateClusterFloatingIP:input_type -> cms.CreateClusterFloatingIPRequest
	81,  // 387: cms.ClusterManager.DeleteClusterFloatingIP:input_type -> cms.DeleteClusterFloatingIPRequest
	79,  // 388: cms.ClusterManager.GetClusterFloatingIP:input_type -> cms.ClusterFloatingIPRequest
	80,  // 389: cms.ClusterManager.CheckIsExistClusterFloatingIP:input_type -> cms.CheckIsExistClusterFloatingIPRequest
	87,  // 390: cms.ClusterManager.CreateClusterRouter:input_type -> cms.CreateClusterRouterRequest
	88,  // 391: cms.ClusterManager.DeleteClusterRouter:input_type -> cms.DeleteClusterRouterRequest
	91,  // 392: cms.ClusterManager.GetClusterRouterList:input_type -> cms.ClusterRouterListRequest
	93,  // 393: cms.ClusterManager.GetClusterRouter:input_type -> cms.ClusterRouterRequest
	85,  // 394: cms.ClusterManager.CheckIsExistClusterRoutingInterface:input_type -> cms.CheckIsExistClusterRoutingInterfaceRequest
	101, // 395: cms.ClusterManager.GetClusterStorageList:input_type -> cms.ClusterStorageListRequest
	99,  // 396: cms.ClusterManager.GetClusterStorage:input_type -> cms.ClusterStorageRequest
	97,  // 397: cms.ClusterManager.UpdateClusterStorageMetadata:input_type -> cms.UpdateClusterStorageMetadataRequest
	104, // 398: cms.ClusterManager.GetClusterVolumeGroupList:input_type -> cms.GetClusterVolumeGroupListRequest
	106, // 399: cms.ClusterManager.GetClusterVolumeGroupByUUID:input_type -> cms.GetClusterVolumeGroupByUUIDRequest
	108, // 400: cms.ClusterManager.CreateClusterVolumeGroup:input_type -> cms.CreateClusterVolumeGroupRequest
	110, // 401: cms.ClusterManager.DeleteClusterVolumeGroup:input_type -> cms.DeleteClusterVolumeGroupRequest
	112, // 402: cms.ClusterManager.UpdateClusterVolumeGroup:input_type -> cms.UpdateClusterVolumeGroupRequest
	114, // 403: cms.ClusterManager.CreateClusterVolumeGroupSnapshot:input_type -> cms.CreateClusterVolumeGroupSnapshotRequest
	118, // 404: cms.ClusterManager.GetClusterVolumeGroupSnapshotList:input_type -> cms.GetClusterVolumeGroupSnapshotListRequest
	116, // 405: cms.ClusterManager.DeleteClusterVolumeGroupSnapshot:input_type -> cms.DeleteClusterVolumeGroupSnapshotRequest
	127, // 406: cms.ClusterManager.GetClusterVolumeList:input_type -> cms.ClusterVolumeListRequest
	124, // 407: cms.ClusterManager.GetClusterVolume:input_type -> cms.ClusterVolumeRequest
	130, // 408: cms.ClusterManager.ImportClusterVolume:input_type -> cms.ImportClusterVolumeRequest
	132, // 409: cms.ClusterManager.CopyClusterVolume:input_type -> cms.CopyClusterVolumeRequest
	134, // 410: cms.ClusterManager.DeleteClusterVolumeCopy:input_type -> cms.DeleteClusterVolumeCopyRequest
	144, // 411: cms.ClusterManager.UnmanageClusterVolume:input_type -> cms.UnmanageClusterVolumeRequest
	140, // 412: cms.ClusterManager.SyncClusterVolumeSnapshotList:input_type -> cms.SyncClusterVolumeSnapshotListRequest
	158, // 413: cms.ClusterManager.GetClusterInstanceList:input_type -> cms.ClusterInstanceListRequest
	160, // 414: cms.ClusterManager.GetClusterInstance:input_type -> cms.ClusterInstanceRequest
	161, // 415: cms.ClusterManager.GetClusterInstanceByUUID:input_type -> cms.ClusterInstanceByUUIDRequest
	164, // 416: cms.ClusterManager.GetClusterInstanceNumber:input_type -> cms.ClusterInstanceNumberRequest
	165, // 417: cms.ClusterManager.CheckIsExistClusterInstance:input_type -> cms.CheckIsExistClusterInstanceRequest
	166, // 418: cms.ClusterManager.CreateClusterInstance:input_type -> cms.CreateClusterInstanceRequest
	168, // 419: cms.ClusterManager.DeleteClusterInstance:input_type -> cms.DeleteClusterInstanceRequest
	177, // 420: cms.ClusterManager.StopClusterInstance:input_type -> cms.StopClusterInstanceRequest
	173, // 421: cms.ClusterManager.GetClusterInstanceSpecByUUID:input_type -> cms.ClusterInstanceSpecByUUIDRequest
	56,  // 422: cms.ClusterManager.CheckIsExistClusterInstanceSpec:input_type -> cms.CheckIsExistByNameRequest
	179, // 423: cms.ClusterManager.CreateClusterInstanceSpec:input_type -> cms.CreateClusterInstanceSpecRequest
	181, // 424: cms.ClusterManager.DeleteClusterInstanceSpec:input_type -> cms.DeleteClusterInstanceSpecRequest
	184, // 425: cms.ClusterManager.GetClusterKeyPair:input_type -> cms.ClusterKeyPairRequest
	56,  // 426: cms.ClusterManager.CheckIsExistClusterKeypair:input_type -> cms.CheckIsExistByNameRequest
	185, // 427: cms.ClusterManager.CreateClusterKeypair:input_type -> cms.CreateClusterKeypairRequest
	187, // 428: cms.ClusterManager.DeleteClusterKeypair:input_type -> cms.DeleteClusterKeypairRequest
	189, // 429: cms.ClusterManager.GetClusterInstanceUserScript:input_type -> cms.ClusterInstanceUserScriptRequest
	191, // 430: cms.ClusterManager.UpdateClusterInstanceUserScript:input_type -> cms.UpdateClusterInstanceUserScriptRequest
	196, // 431: cms.ClusterManager.CreateClusterSecurityGroup:input_type -> cms.CreateClusterSecurityGroupRequest
	198, // 432: cms.ClusterManager.CreateClusterSecurityGroupRule:input_type -> cms.CreateClusterSecurityGroupRuleRequest
	58,  // 433: cms.ClusterManager.DeleteClusterSecurityGroup:input_type -> cms.DeleteClusterSecurityGroupRequest
	194, // 434: cms.ClusterManager.GetClusterSecurityGroupList:input_type -> cms.ClusterSecurityGroupListRequest
	199, // 435: cms.ClusterManager.GetClusterSecurityGroup:input_type -> cms.ClusterSecurityGroupRequest
	56,  // 436: cms.ClusterManager.CheckIsExistClusterSecurityGroup:input_type -> cms.CheckIsExistByNameRequest
	3,   // 437: cms.ClusterManager.GetPublicKey:output_type -> cms.PublicKey
	4,   // 438: cms.ClusterManager.CheckConnection:output_type -> cms.ClusterConnectionResponse
	10,  // 439: cms.ClusterManager.GetCenterConfig:output_type -> cms.GetCenterConfigResponse
	12,  // 440: cms.ClusterManager.UpdateCenterConfig:output_type -> cms.UpdateCenterConfigResponse
	18,  // 441: cms.ClusterManager.CheckCluster:output_type -> cms.CheckClusterResponse
	6,   // 442: cms.ClusterManager.UpdateCredential:output_type -> cms.UpdateCredentialResponse
	20,  // 443: cms.ClusterManager.SyncCluster:output_type -> cms.SyncClusterResponse
	21,  // 444: cms.ClusterManager.GetClusterSyncStatus:output_type -> cms.GetClusterSyncStatusResponse
	22,  // 445: cms.ClusterManager.SyncException:output_type -> cms.SyncExceptionResponse
	27,  // 446: cms.ClusterManager.GetClusterList:output_type -> cms.ClusterListResponse
	29,  // 447: cms.ClusterManager.AddCluster:output_type -> cms.ClusterResponse
	29,  // 448: cms.ClusterManager.GetCluster:output_type -> cms.ClusterResponse
	29,  // 449: cms.ClusterManager.UpdateCluster:output_type -> cms.ClusterResponse
	33,  // 450: cms.ClusterManager.DeleteCluster:output_type -> cms.DeleteClusterResponse
	36,  // 451: cms.ClusterManager.GetClusterHypervisorList:output_type -> cms.ClusterHypervisorListResponse
	38,  // 452: cms.ClusterManager.GetClusterHypervisor:output_type -> cms.ClusterHypervisorResponse
	38,  // 453: cms.ClusterManager.UpdateClusterHypervisor:output_type -> cms.ClusterHypervisorResponse
	42,  // 454: cms.ClusterManager.GetClusterAvailabilityZoneList:output_type -> cms.ClusterAvailabilityZoneListResponse
	44,  // 455: cms.ClusterManager.GetClusterAvailabilityZone:output_type -> cms.ClusterAvailabilityZoneResponse
	48,  // 456: cms.ClusterManager.GetClusterTenantList:output_type -> cms.ClusterTenantListResponse
	52,  // 457: cms.ClusterManager.CreateClusterTenant:output_type -> cms.ClusterTenantResponse
	52,  // 458: cms.ClusterManager.GetClusterTenant:output_type -> cms.ClusterTenantResponse
	50,  // 459: cms.ClusterManager.DeleteClusterTenant:output_type -> cms.DeleteClusterTenantResponse
	57,  // 460: cms.ClusterManager.CheckIsExistClusterTenant:output_type -> cms.CheckIsExistResponse
	64,  // 461: cms.ClusterManager.GetClusterNetworkList:output_type -> cms.ClusterNetworkListResponse
	66,  // 462: cms.ClusterManager.CreateClusterNetwork:output_type -> cms.ClusterNetworkResponse
	67,  // 463: cms.ClusterManager.DeleteClusterNetwork:output_type -> cms.DeleteClusterNetworkResponse
	66,  // 464: cms.ClusterManager.GetClusterNetwork:output_type -> cms.ClusterNetworkResponse
	66,  // 465: cms.ClusterManager.GetClusterNetworkByUUID:output_type -> cms.ClusterNetworkResponse
	72,  // 466: cms.ClusterManager.CreateClusterSubnet:output_type -> cms.ClusterSubnetResponse
	72,  // 467: cms.ClusterManager.GetClusterSubnet:output_type -> cms.ClusterSubnetResponse
	78,  // 468: cms.ClusterManager.CreateClusterFloatingIP:output_type -> cms.ClusterFloatingIPResponse
	82,  // 469: cms.ClusterManager.DeleteClusterFloatingIP:output_type -> cms.DeleteClusterFloatingIPResponse
	78,  // 470: cms.ClusterManager.GetClusterFloatingIP:output_type -> cms.ClusterFloatingIPResponse
	57,  // 471: cms.ClusterManager.CheckIsExistClusterFloatingIP:output_type -> cms.CheckIsExistResponse
	92,  // 472: cms.ClusterManager.CreateClusterRouter:output_type -> cms.ClusterRouterResponse
	89,  // 473: cms.ClusterManager.DeleteClusterRouter:output_type -> cms.DeleteClusterRouterResponse
	90,  // 474: cms.ClusterManager.GetClusterRouterList:output_type -> cms.ClusterRouterListResponse
	92,  // 475: cms.ClusterManager.GetClusterRouter:output_type -> cms.ClusterRouterResponse
	57,  // 476: cms.ClusterManager.CheckIsExistClusterRoutingInterface:output_type -> cms.CheckIsExistResponse
	100, // 477: cms.ClusterManager.GetClusterStorageList:output_type -> cms.ClusterStorageListResponse
	98,  // 478: cms.ClusterManager.GetClusterStorage:output_type -> cms.ClusterStorageResponse
	96,  // 479: cms.ClusterManager.UpdateClusterStorageMetadata:output_type -> cms.ClusterStorageMetadataResponse
	105, // 480: cms.ClusterManager.GetClusterVolumeGroupList:output_type -> cms.GetClusterVolumeGroupListResponse
	107, // 481: cms.ClusterManager.GetClusterVolumeGroupByUUID:output_type -> cms.GetClusterVolumeGroupResponse
	109, // 482: cms.ClusterManager.CreateClusterVolumeGroup:output_type -> cms.CreateClusterVolumeGroupResponse
	111, // 483: cms.ClusterManager.DeleteClusterVolumeGroup:output_type -> cms.DeleteClusterVolumeGroupResponse
	113, // 484: cms.ClusterManager.UpdateClusterVolumeGroup:output_type -> cms.UpdateClusterVolumeGroupResponse
	115, // 485: cms.ClusterManager.CreateClusterVolumeGroupSnapshot:output_type -> cms.CreateClusterVolumeGroupSnapshotResponse
	120, // 486: cms.ClusterManager.GetClusterVolumeGroupSnapshotList:output_type -> cms.GetClusterVolumeGroupSnapshotListResponse
	117, // 487: cms.ClusterManager.DeleteClusterVolumeGroupSnapshot:output_type -> cms.DeleteClusterVolumeGroupSnapshotResponse
	126, // 488: cms.ClusterManager.GetClusterVolumeList:output_type -> cms.ClusterVolumeListResponse
	123, // 489: cms.ClusterManager.GetClusterVolume:output_type -> cms.ClusterVolumeResponse
	131, // 490: cms.ClusterManager.ImportClusterVolume:output_type -> cms.ImportClusterVolumeResponse
	133, // 491: cms.ClusterManager.CopyClusterVolume:output_type -> cms.CopyClusterVolumeResponse
	135, // 492: cms.ClusterManager.DeleteClusterVolumeCopy:output_type -> cms.DeleteClusterVolumeCopyResponse
	145, // 493: cms.ClusterManager.UnmanageClusterVolume:output_type -> cms.UnmanageClusterVolumeResponse
	141, // 494: cms.ClusterManager.SyncClusterVolumeSnapshotList:output_type -> cms.SyncClusterVolumeSnapshotListResponse
	157, // 495: cms.ClusterManager.GetClusterInstanceList:output_type -> cms.ClusterInstanceListResponse
	159, // 496: cms.ClusterManager.GetClusterInstance:output_type -> cms.ClusterInstanceResponse
	159, // 497: cms.ClusterManager.GetClusterInstanceByUUID:output_type -> cms.ClusterInstanceResponse
	163, // 498: cms.ClusterManager.GetClusterInstanceNumber:output_type -> cms.ClusterInstanceNumberResponse
	57,  // 499: cms.ClusterManager.CheckIsExistClusterInstance:output_type -> cms.CheckIsExistResponse
	167, // 500: cms.ClusterManager.CreateClusterInstance:output_type -> cms.CreateClusterInstanceResponse
	169, // 501: cms.ClusterManager.DeleteClusterInstance:output_type -> cms.DeleteClusterInstanceResponse
	178, // 502: cms.ClusterManager.StopClusterInstance:output_type -> cms.StopClusterInstanceResponse
	174, // 503: cms.ClusterManager.GetClusterInstanceSpecByUUID:output_type -> cms.ClusterInstanceSpecResponse
	57,  // 504: cms.ClusterManager.CheckIsExistClusterInstanceSpec:output_type -> cms.CheckIsExistResponse
	180, // 505: cms.ClusterManager.CreateClusterInstanceSpec:output_type -> cms.CreateClusterInstanceSpecResponse
	182, // 506: cms.ClusterManager.DeleteClusterInstanceSpec:output_type -> cms.DeleteClusterInstanceSpecResponse
	183, // 507: cms.ClusterManager.GetClusterKeyPair:output_type -> cms.ClusterKeyPairResponse
	57,  // 508: cms.ClusterManager.CheckIsExistClusterKeypair:output_type -> cms.CheckIsExistResponse
	186, // 509: cms.ClusterManager.CreateClusterKeypair:output_type -> cms.CreateClusterKeypairResponse
	188, // 510: cms.ClusterManager.DeleteClusterKeypair:output_type -> cms.DeleteClusterKeypairResponse
	190, // 511: cms.ClusterManager.GetClusterInstanceUserScript:output_type -> cms.ClusterInstanceUserScriptResponse
	192, // 512: cms.ClusterManager.UpdateClusterInstanceUserScript:output_type -> cms.UpdateClusterInstanceUserScriptResponse
	195, // 513: cms.ClusterManager.CreateClusterSecurityGroup:output_type -> cms.ClusterSecurityGroupResponse
	197, // 514: cms.ClusterManager.CreateClusterSecurityGroupRule:output_type -> cms.ClusterSecurityGroupRuleResponse
	59,  // 515: cms.ClusterManager.DeleteClusterSecurityGroup:output_type -> cms.DeleteClusterSecurityGroupResponse
	193, // 516: cms.ClusterManager.GetClusterSecurityGroupList:output_type -> cms.ClusterSecurityGroupListResponse
	195, // 517: cms.ClusterManager.GetClusterSecurityGroup:output_type -> cms.ClusterSecurityGroupResponse
	57,  // 518: cms.ClusterManager.CheckIsExistClusterSecurityGroup:output_type -> cms.CheckIsExistResponse
	437, // [437:519] is the sub-list for method output_type
	355, // [355:437] is the sub-list for method input_type
	355, // [355:355] is the sub-list for extension type_name
	355, // [355:355] is the sub-list for extension extendee
	0,   // [0:355] is the sub-list for field type_name
}

func init() { file_proto_cluster_manager_proto_init() }
func file_proto_cluster_manager_proto_init() {
	if File_proto_cluster_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cluster_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCenterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCenterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCenterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCenterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterSyncStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncExceptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncExceptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHypervisor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHypervisorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHypervisorListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHypervisorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHypervisorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterHypervisorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAvailabilityZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAvailabilityZoneListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAvailabilityZoneListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAvailabilityZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAvailabilityZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTenantListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTenantListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTenantByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsExistByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSubnetDHCPPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSubnetNameserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterFloatingIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterFloatingIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterFloatingIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsExistClusterFloatingIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterFloatingIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterFloatingIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkRoutingInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouterExtraRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsExistClusterRoutingInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouterListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRouterByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterStorageMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStorageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeGroupSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterVolumeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeGroupSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeGroupSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeGroupSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeGroupSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupSnapshotListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupSnapshotListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterVolumeGroupSnapshotListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVolumeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportClusterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportClusterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyClusterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyClusterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeCopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeCopyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterVolumeSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncClusterVolumeSnapshotListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncClusterVolumeSnapshotListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmanageClusterVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmanageClusterVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterVolumeSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterFloatingIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterKeypair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceExtraSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsExistClusterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceSpecListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceSpecListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceSpecByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartClusterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartClusterInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopClusterInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopClusterInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterInstanceSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterInstanceSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterInstanceSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterInstanceSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterKeyPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterKeyPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterKeypairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterKeypairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterKeypairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterKeypairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceUserScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceUserScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterInstanceUserScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterInstanceUserScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterSecurityGroupRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_manager_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecurityGroupByUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cluster_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   207,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cluster_manager_proto_goTypes,
		DependencyIndexes: file_proto_cluster_manager_proto_depIdxs,
		MessageInfos:      file_proto_cluster_manager_proto_msgTypes,
	}.Build()
	File_proto_cluster_manager_proto = out.File
	file_proto_cluster_manager_proto_rawDesc = nil
	file_proto_cluster_manager_proto_goTypes = nil
	file_proto_cluster_manager_proto_depIdxs = nil
}
