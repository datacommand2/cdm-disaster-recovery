// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cluster-manager.proto

package cms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ClusterManager service

func NewClusterManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "ClusterManager.GetPublicKey",
			Path:    []string{"/management/clusters/pbkey"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CheckConnection",
			Path:    []string{"/management/clusters/check"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetCenterConfig",
			Path:    []string{"/management/clusters/{cluster_id}/config"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCenterConfig",
			Path:    []string{"/management/clusters/{cluster_id}/config"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CheckCluster",
			Path:    []string{"/management/clusters/{cluster_id}/check"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCredential",
			Path:    []string{"/management/clusters/{cluster_id}/credential"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.SyncCluster",
			Path:    []string{"/management/clusters/{cluster_id}/sync"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterSyncStatus",
			Path:    []string{"/management/clusters/{cluster_id}/sync-status"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.SyncException",
			Path:    []string{"/management/clusters/{cluster_id}/sync-exception"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterList",
			Path:    []string{"/management/clusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.AddCluster",
			Path:    []string{"/management/clusters"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetCluster",
			Path:    []string{"/management/clusters/{cluster_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCluster",
			Path:    []string{"/management/clusters/{cluster_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteCluster",
			Path:    []string{"/management/clusters/{cluster_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterHypervisorList",
			Path:    []string{"/management/clusters/{cluster_id}/hypervisors"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterHypervisor",
			Path:    []string{"/management/clusters/{cluster_id}/hypervisors/{cluster_hypervisor_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateClusterHypervisor",
			Path:    []string{"/management/clusters/{cluster_id}/hypervisors/{cluster_hypervisor_id}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterAvailabilityZoneList",
			Path:    []string{"/management/clusters/{cluster_id}/availability-zones"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterAvailabilityZone",
			Path:    []string{"/management/clusters/{cluster_id}/availability-zones/{cluster_availability_zone_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterTenantList",
			Path:    []string{"/management/clusters/{cluster_id}/tenants"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterTenant",
			Path:    []string{"/management/clusters/{cluster_id}/tenants/{cluster_tenant_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterNetworkList",
			Path:    []string{"/management/clusters/{cluster_id}/networks"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterNetwork",
			Path:    []string{"/management/clusters/{cluster_id}/networks/{cluster_network_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterSubnet",
			Path:    []string{"/management/clusters/{cluster_id}/subnets/{cluster_subnet_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterFloatingIP",
			Path:    []string{"/management/clusters/{cluster_id}/floating-ips/{cluster_floating_ip_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterRouterList",
			Path:    []string{"/management/clusters/{cluster_id}/routers"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterRouter",
			Path:    []string{"/management/clusters/{cluster_id}/routers/{cluster_router_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterStorageList",
			Path:    []string{"/management/clusters/{cluster_id}/storages"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterStorage",
			Path:    []string{"/management/clusters/{cluster_id}/storages/{cluster_storage_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateClusterStorageMetadata",
			Path:    []string{"/management/clusters/{cluster_id}/storages/{cluster_storage_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterVolumeList",
			Path:    []string{"/management/clusters/{cluster_id}/volumes"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterVolume",
			Path:    []string{"/management/clusters/{cluster_id}/volumes/{cluster_volume_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterInstanceList",
			Path:    []string{"/management/clusters/{cluster_id}/instances"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterInstance",
			Path:    []string{"/management/clusters/{cluster_id}/instances/{cluster_instance_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterKeyPair",
			Path:    []string{"/management/clusters/{cluster_id}/keypairs/{cluster_keypair_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterInstanceUserScript",
			Path:    []string{"/management/clusters/{cluster_id}/user-scripts/{cluster_instance_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateClusterInstanceUserScript",
			Path:    []string{"/management/clusters/{cluster_id}/user-scripts/{cluster_instance_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterSecurityGroupList",
			Path:    []string{"/management/clusters/{cluster_id}/security-groups"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterSecurityGroup",
			Path:    []string{"/management/clusters/{cluster_id}/security-groups/{cluster_security_group_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for ClusterManager service

type ClusterManagerService interface {
	// 공개키 조회
	GetPublicKey(ctx context.Context, in *Empty, opts ...client.CallOption) (*PublicKey, error)
	// 클러스터 연결 확인
	CheckConnection(ctx context.Context, in *ClusterConnectionInfo, opts ...client.CallOption) (*ClusterConnectionResponse, error)
	// CDM-Center 동작 config 조회
	GetCenterConfig(ctx context.Context, in *GetCenterConfigRequest, opts ...client.CallOption) (*GetCenterConfigResponse, error)
	// CDM-Center 동작 config 수정
	UpdateCenterConfig(ctx context.Context, in *UpdateCenterConfigRequest, opts ...client.CallOption) (*UpdateCenterConfigResponse, error)
	// 클러스터 상태 확인
	CheckCluster(ctx context.Context, in *CheckClusterRequest, opts ...client.CallOption) (*CheckClusterResponse, error)
	// 인증 정보 수정
	UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...client.CallOption) (*UpdateCredentialResponse, error)
	// 클러스터 동기화
	SyncCluster(ctx context.Context, in *SyncClusterRequest, opts ...client.CallOption) (*SyncClusterResponse, error)
	// 클러스터 동기화 상태 조회
	GetClusterSyncStatus(ctx context.Context, in *SyncClusterRequest, opts ...client.CallOption) (*GetClusterSyncStatusResponse, error)
	// 클러스터 상태 제외 대상
	SyncException(ctx context.Context, in *SyncExceptionRequest, opts ...client.CallOption) (*SyncExceptionResponse, error)
	// 클러스터 목록 조회
	GetClusterList(ctx context.Context, in *ClusterListRequest, opts ...client.CallOption) (*ClusterListResponse, error)
	// 클러스터 등록
	AddCluster(ctx context.Context, in *AddClusterRequest, opts ...client.CallOption) (*ClusterResponse, error)
	// 클러스터 조회
	GetCluster(ctx context.Context, in *ClusterRequest, opts ...client.CallOption) (*ClusterResponse, error)
	// 클러스터 수정
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...client.CallOption) (*ClusterResponse, error)
	// 클러스터 제거
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...client.CallOption) (*DeleteClusterResponse, error)
	// 클러스터 하이퍼바이저 목록 조회
	GetClusterHypervisorList(ctx context.Context, in *ClusterHypervisorListRequest, opts ...client.CallOption) (*ClusterHypervisorListResponse, error)
	// 클러스터 하이퍼바이저 조회
	GetClusterHypervisor(ctx context.Context, in *ClusterHypervisorRequest, opts ...client.CallOption) (*ClusterHypervisorResponse, error)
	// 클러스터 하이퍼바이저 추가정보 수정
	UpdateClusterHypervisor(ctx context.Context, in *UpdateClusterHypervisorRequest, opts ...client.CallOption) (*ClusterHypervisorResponse, error)
	// 클러스터 가용구역 목록 조회
	GetClusterAvailabilityZoneList(ctx context.Context, in *ClusterAvailabilityZoneListRequest, opts ...client.CallOption) (*ClusterAvailabilityZoneListResponse, error)
	// 클러스터 가용구역 조회
	GetClusterAvailabilityZone(ctx context.Context, in *ClusterAvailabilityZoneRequest, opts ...client.CallOption) (*ClusterAvailabilityZoneResponse, error)
	// 클러스터 테넌트 목록 조회
	GetClusterTenantList(ctx context.Context, in *ClusterTenantListRequest, opts ...client.CallOption) (*ClusterTenantListResponse, error)
	// 클러스터 테넌트 생성
	CreateClusterTenant(ctx context.Context, in *CreateClusterTenantRequest, opts ...client.CallOption) (*ClusterTenantResponse, error)
	// 클러스터 테넌트 조회
	GetClusterTenant(ctx context.Context, in *ClusterTenantRequest, opts ...client.CallOption) (*ClusterTenantResponse, error)
	// 클러스터 테넌트 제거
	DeleteClusterTenant(ctx context.Context, in *DeleteClusterTenantRequest, opts ...client.CallOption) (*DeleteClusterTenantResponse, error)
	// 클러스터 테넌트 존재유무 확인(Name)
	CheckIsExistClusterTenant(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
	// 클러스터 네트워크 목록 조회
	GetClusterNetworkList(ctx context.Context, in *ClusterNetworkListRequest, opts ...client.CallOption) (*ClusterNetworkListResponse, error)
	// 클러스터 네트워크 생성
	CreateClusterNetwork(ctx context.Context, in *CreateClusterNetworkRequest, opts ...client.CallOption) (*ClusterNetworkResponse, error)
	// 클러스터 네트워크 삭제
	DeleteClusterNetwork(ctx context.Context, in *DeleteClusterNetworkRequest, opts ...client.CallOption) (*DeleteClusterNetworkResponse, error)
	// 클러스터 네트워크 조회
	GetClusterNetwork(ctx context.Context, in *ClusterNetworkRequest, opts ...client.CallOption) (*ClusterNetworkResponse, error)
	// 클러스터 네트워크 조회(UUID)
	GetClusterNetworkByUUID(ctx context.Context, in *ClusterNetworkByUUIDRequest, opts ...client.CallOption) (*ClusterNetworkResponse, error)
	// 클러스터 서브넷 생성
	CreateClusterSubnet(ctx context.Context, in *CreateClusterSubnetRequest, opts ...client.CallOption) (*ClusterSubnetResponse, error)
	// 클러스터 서브넷 조회
	GetClusterSubnet(ctx context.Context, in *ClusterSubnetRequest, opts ...client.CallOption) (*ClusterSubnetResponse, error)
	// 클러스터 FloatingIP 생성
	CreateClusterFloatingIP(ctx context.Context, in *CreateClusterFloatingIPRequest, opts ...client.CallOption) (*ClusterFloatingIPResponse, error)
	// 클러스터 FloatingIP 삭제
	DeleteClusterFloatingIP(ctx context.Context, in *DeleteClusterFloatingIPRequest, opts ...client.CallOption) (*DeleteClusterFloatingIPResponse, error)
	// 클러스터 FloatingIP 조회
	GetClusterFloatingIP(ctx context.Context, in *ClusterFloatingIPRequest, opts ...client.CallOption) (*ClusterFloatingIPResponse, error)
	// 클러스터 FloatingIP 존재유무 확인(IPAddress)
	CheckIsExistClusterFloatingIP(ctx context.Context, in *CheckIsExistClusterFloatingIPRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
	// 클러스터 라우터 생성
	CreateClusterRouter(ctx context.Context, in *CreateClusterRouterRequest, opts ...client.CallOption) (*ClusterRouterResponse, error)
	// 클러스터 라우터 삭제
	DeleteClusterRouter(ctx context.Context, in *DeleteClusterRouterRequest, opts ...client.CallOption) (*DeleteClusterRouterResponse, error)
	// 클러스터 네트워크 라우터 목록 조회
	GetClusterRouterList(ctx context.Context, in *ClusterRouterListRequest, opts ...client.CallOption) (*ClusterRouterListResponse, error)
	// 클러스터 네트워크 라우터 조회
	GetClusterRouter(ctx context.Context, in *ClusterRouterRequest, opts ...client.CallOption) (*ClusterRouterResponse, error)
	// 클러스터 Routing Interface 존재유무 확인(IPAddress)
	CheckIsExistClusterRoutingInterface(ctx context.Context, in *CheckIsExistClusterRoutingInterfaceRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
	// 클러스터 볼륨타입 목록 조회
	GetClusterStorageList(ctx context.Context, in *ClusterStorageListRequest, opts ...client.CallOption) (*ClusterStorageListResponse, error)
	// 클러스터 볼륨타입 조회
	GetClusterStorage(ctx context.Context, in *ClusterStorageRequest, opts ...client.CallOption) (*ClusterStorageResponse, error)
	// 클러스터 볼륨타입 메타데이터 수정
	UpdateClusterStorageMetadata(ctx context.Context, in *UpdateClusterStorageMetadataRequest, opts ...client.CallOption) (*ClusterStorageMetadataResponse, error)
	// 클러스터 볼륨 그룹 목록 조회
	GetClusterVolumeGroupList(ctx context.Context, in *GetClusterVolumeGroupListRequest, opts ...client.CallOption) (*GetClusterVolumeGroupListResponse, error)
	// 클러스터 볼륨 그룹 조회 (UUID)
	GetClusterVolumeGroupByUUID(ctx context.Context, in *GetClusterVolumeGroupByUUIDRequest, opts ...client.CallOption) (*GetClusterVolumeGroupResponse, error)
	// 클러스터 볼륨 그룹 생성
	CreateClusterVolumeGroup(ctx context.Context, in *CreateClusterVolumeGroupRequest, opts ...client.CallOption) (*CreateClusterVolumeGroupResponse, error)
	// 클러스터 볼륨 그룹 삭제
	DeleteClusterVolumeGroup(ctx context.Context, in *DeleteClusterVolumeGroupRequest, opts ...client.CallOption) (*DeleteClusterVolumeGroupResponse, error)
	// 클러스터 볼륨 그룹 수정
	UpdateClusterVolumeGroup(ctx context.Context, in *UpdateClusterVolumeGroupRequest, opts ...client.CallOption) (*UpdateClusterVolumeGroupResponse, error)
	// 클러스터 볼륨 그룹 스냅샷 생성
	CreateClusterVolumeGroupSnapshot(ctx context.Context, in *CreateClusterVolumeGroupSnapshotRequest, opts ...client.CallOption) (*CreateClusterVolumeGroupSnapshotResponse, error)
	// 클러스터 볼륨 그룹 스냅샷 목록 조회
	GetClusterVolumeGroupSnapshotList(ctx context.Context, in *GetClusterVolumeGroupSnapshotListRequest, opts ...client.CallOption) (*GetClusterVolumeGroupSnapshotListResponse, error)
	// 클러스터 볼륨 그룹 스냅샷 삭제
	DeleteClusterVolumeGroupSnapshot(ctx context.Context, in *DeleteClusterVolumeGroupSnapshotRequest, opts ...client.CallOption) (*DeleteClusterVolumeGroupSnapshotResponse, error)
	// 클러스터 볼륨 목록 조회
	GetClusterVolumeList(ctx context.Context, in *ClusterVolumeListRequest, opts ...client.CallOption) (*ClusterVolumeListResponse, error)
	// 클러스터 볼륨 조회
	GetClusterVolume(ctx context.Context, in *ClusterVolumeRequest, opts ...client.CallOption) (*ClusterVolumeResponse, error)
	// 클러스터 볼륨 import
	ImportClusterVolume(ctx context.Context, in *ImportClusterVolumeRequest, opts ...client.CallOption) (*ImportClusterVolumeResponse, error)
	// 클러스터 볼륨 copy
	CopyClusterVolume(ctx context.Context, in *CopyClusterVolumeRequest, opts ...client.CallOption) (*CopyClusterVolumeResponse, error)
	// 클러스터 볼륨 copy 삭제
	DeleteClusterVolumeCopy(ctx context.Context, in *DeleteClusterVolumeCopyRequest, opts ...client.CallOption) (*DeleteClusterVolumeCopyResponse, error)
	// 클러스터 볼륨 unmanage
	UnmanageClusterVolume(ctx context.Context, in *UnmanageClusterVolumeRequest, opts ...client.CallOption) (*UnmanageClusterVolumeResponse, error)
	// 클러스터 볼륨 스냅샷 목록 동기화
	SyncClusterVolumeSnapshotList(ctx context.Context, in *SyncClusterVolumeSnapshotListRequest, opts ...client.CallOption) (*SyncClusterVolumeSnapshotListResponse, error)
	// 클러스터 인스턴스 목록 조회
	GetClusterInstanceList(ctx context.Context, in *ClusterInstanceListRequest, opts ...client.CallOption) (*ClusterInstanceListResponse, error)
	// 클러스터 인스턴스 조회
	GetClusterInstance(ctx context.Context, in *ClusterInstanceRequest, opts ...client.CallOption) (*ClusterInstanceResponse, error)
	// 클러스터 인스턴스 조회(UUID)
	GetClusterInstanceByUUID(ctx context.Context, in *ClusterInstanceByUUIDRequest, opts ...client.CallOption) (*ClusterInstanceResponse, error)
	// 클러스터 인스턴스 수 조회
	GetClusterInstanceNumber(ctx context.Context, in *ClusterInstanceNumberRequest, opts ...client.CallOption) (*ClusterInstanceNumberResponse, error)
	// 클러스터 인스턴스 존재유무 확인(UUID)
	CheckIsExistClusterInstance(ctx context.Context, in *CheckIsExistClusterInstanceRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
	// 클러스터 인스턴스 생성
	CreateClusterInstance(ctx context.Context, in *CreateClusterInstanceRequest, opts ...client.CallOption) (*CreateClusterInstanceResponse, error)
	// 클러스터 인스턴스 삭제
	DeleteClusterInstance(ctx context.Context, in *DeleteClusterInstanceRequest, opts ...client.CallOption) (*DeleteClusterInstanceResponse, error)
	// 클러스터 인스턴스 중지
	StopClusterInstance(ctx context.Context, in *StopClusterInstanceRequest, opts ...client.CallOption) (*StopClusterInstanceResponse, error)
	// 클러스터 인스턴스 Spec 조회(UUID)
	GetClusterInstanceSpecByUUID(ctx context.Context, in *ClusterInstanceSpecByUUIDRequest, opts ...client.CallOption) (*ClusterInstanceSpecResponse, error)
	// 클러스터 인스턴스 Spec 존재유무 확인(Name)
	CheckIsExistClusterInstanceSpec(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
	// 클러스터 인스턴스 Spec 생성
	CreateClusterInstanceSpec(ctx context.Context, in *CreateClusterInstanceSpecRequest, opts ...client.CallOption) (*CreateClusterInstanceSpecResponse, error)
	// 클러스터 인스턴스 Spec 삭제
	DeleteClusterInstanceSpec(ctx context.Context, in *DeleteClusterInstanceSpecRequest, opts ...client.CallOption) (*DeleteClusterInstanceSpecResponse, error)
	// 클러스터 KeyPair 조회
	GetClusterKeyPair(ctx context.Context, in *ClusterKeyPairRequest, opts ...client.CallOption) (*ClusterKeyPairResponse, error)
	// 클러스터 Keypair 존재유무 확인(Name)
	CheckIsExistClusterKeypair(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
	// 클러스터 Keypair 생성
	CreateClusterKeypair(ctx context.Context, in *CreateClusterKeypairRequest, opts ...client.CallOption) (*CreateClusterKeypairResponse, error)
	// 클러스터 Keypair 삭제
	DeleteClusterKeypair(ctx context.Context, in *DeleteClusterKeypairRequest, opts ...client.CallOption) (*DeleteClusterKeypairResponse, error)
	// 클러스터 Instance User Script 조회
	GetClusterInstanceUserScript(ctx context.Context, in *ClusterInstanceUserScriptRequest, opts ...client.CallOption) (*ClusterInstanceUserScriptResponse, error)
	// 클러스터 Instance User Script 수정
	UpdateClusterInstanceUserScript(ctx context.Context, in *UpdateClusterInstanceUserScriptRequest, opts ...client.CallOption) (*UpdateClusterInstanceUserScriptResponse, error)
	// 클러스터 보안 그룹 생성
	CreateClusterSecurityGroup(ctx context.Context, in *CreateClusterSecurityGroupRequest, opts ...client.CallOption) (*ClusterSecurityGroupResponse, error)
	// 클러스터 보안 그룹 규칙 생성
	CreateClusterSecurityGroupRule(ctx context.Context, in *CreateClusterSecurityGroupRuleRequest, opts ...client.CallOption) (*ClusterSecurityGroupRuleResponse, error)
	// 클러스터 보안 그룹 제거
	DeleteClusterSecurityGroup(ctx context.Context, in *DeleteClusterSecurityGroupRequest, opts ...client.CallOption) (*DeleteClusterSecurityGroupResponse, error)
	// 클러스터 보안그룹 목록 조회
	GetClusterSecurityGroupList(ctx context.Context, in *ClusterSecurityGroupListRequest, opts ...client.CallOption) (*ClusterSecurityGroupListResponse, error)
	// 클러스터 보안그룹 조회
	GetClusterSecurityGroup(ctx context.Context, in *ClusterSecurityGroupRequest, opts ...client.CallOption) (*ClusterSecurityGroupResponse, error)
	// 클러스터 보안 그룹 존재유무 확인(Name)
	CheckIsExistClusterSecurityGroup(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error)
}

type clusterManagerService struct {
	c    client.Client
	name string
}

func NewClusterManagerService(name string, c client.Client) ClusterManagerService {
	return &clusterManagerService{
		c:    c,
		name: name,
	}
}

func (c *clusterManagerService) GetPublicKey(ctx context.Context, in *Empty, opts ...client.CallOption) (*PublicKey, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetPublicKey", in)
	out := new(PublicKey)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckConnection(ctx context.Context, in *ClusterConnectionInfo, opts ...client.CallOption) (*ClusterConnectionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckConnection", in)
	out := new(ClusterConnectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetCenterConfig(ctx context.Context, in *GetCenterConfigRequest, opts ...client.CallOption) (*GetCenterConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetCenterConfig", in)
	out := new(GetCenterConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCenterConfig(ctx context.Context, in *UpdateCenterConfigRequest, opts ...client.CallOption) (*UpdateCenterConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCenterConfig", in)
	out := new(UpdateCenterConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckCluster(ctx context.Context, in *CheckClusterRequest, opts ...client.CallOption) (*CheckClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckCluster", in)
	out := new(CheckClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...client.CallOption) (*UpdateCredentialResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCredential", in)
	out := new(UpdateCredentialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) SyncCluster(ctx context.Context, in *SyncClusterRequest, opts ...client.CallOption) (*SyncClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.SyncCluster", in)
	out := new(SyncClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterSyncStatus(ctx context.Context, in *SyncClusterRequest, opts ...client.CallOption) (*GetClusterSyncStatusResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterSyncStatus", in)
	out := new(GetClusterSyncStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) SyncException(ctx context.Context, in *SyncExceptionRequest, opts ...client.CallOption) (*SyncExceptionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.SyncException", in)
	out := new(SyncExceptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterList(ctx context.Context, in *ClusterListRequest, opts ...client.CallOption) (*ClusterListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterList", in)
	out := new(ClusterListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) AddCluster(ctx context.Context, in *AddClusterRequest, opts ...client.CallOption) (*ClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.AddCluster", in)
	out := new(ClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetCluster(ctx context.Context, in *ClusterRequest, opts ...client.CallOption) (*ClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetCluster", in)
	out := new(ClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...client.CallOption) (*ClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCluster", in)
	out := new(ClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...client.CallOption) (*DeleteClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteCluster", in)
	out := new(DeleteClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterHypervisorList(ctx context.Context, in *ClusterHypervisorListRequest, opts ...client.CallOption) (*ClusterHypervisorListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterHypervisorList", in)
	out := new(ClusterHypervisorListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterHypervisor(ctx context.Context, in *ClusterHypervisorRequest, opts ...client.CallOption) (*ClusterHypervisorResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterHypervisor", in)
	out := new(ClusterHypervisorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateClusterHypervisor(ctx context.Context, in *UpdateClusterHypervisorRequest, opts ...client.CallOption) (*ClusterHypervisorResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateClusterHypervisor", in)
	out := new(ClusterHypervisorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterAvailabilityZoneList(ctx context.Context, in *ClusterAvailabilityZoneListRequest, opts ...client.CallOption) (*ClusterAvailabilityZoneListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterAvailabilityZoneList", in)
	out := new(ClusterAvailabilityZoneListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterAvailabilityZone(ctx context.Context, in *ClusterAvailabilityZoneRequest, opts ...client.CallOption) (*ClusterAvailabilityZoneResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterAvailabilityZone", in)
	out := new(ClusterAvailabilityZoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterTenantList(ctx context.Context, in *ClusterTenantListRequest, opts ...client.CallOption) (*ClusterTenantListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterTenantList", in)
	out := new(ClusterTenantListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterTenant(ctx context.Context, in *CreateClusterTenantRequest, opts ...client.CallOption) (*ClusterTenantResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterTenant", in)
	out := new(ClusterTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterTenant(ctx context.Context, in *ClusterTenantRequest, opts ...client.CallOption) (*ClusterTenantResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterTenant", in)
	out := new(ClusterTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterTenant(ctx context.Context, in *DeleteClusterTenantRequest, opts ...client.CallOption) (*DeleteClusterTenantResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterTenant", in)
	out := new(DeleteClusterTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterTenant(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterTenant", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterNetworkList(ctx context.Context, in *ClusterNetworkListRequest, opts ...client.CallOption) (*ClusterNetworkListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterNetworkList", in)
	out := new(ClusterNetworkListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterNetwork(ctx context.Context, in *CreateClusterNetworkRequest, opts ...client.CallOption) (*ClusterNetworkResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterNetwork", in)
	out := new(ClusterNetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterNetwork(ctx context.Context, in *DeleteClusterNetworkRequest, opts ...client.CallOption) (*DeleteClusterNetworkResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterNetwork", in)
	out := new(DeleteClusterNetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterNetwork(ctx context.Context, in *ClusterNetworkRequest, opts ...client.CallOption) (*ClusterNetworkResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterNetwork", in)
	out := new(ClusterNetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterNetworkByUUID(ctx context.Context, in *ClusterNetworkByUUIDRequest, opts ...client.CallOption) (*ClusterNetworkResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterNetworkByUUID", in)
	out := new(ClusterNetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterSubnet(ctx context.Context, in *CreateClusterSubnetRequest, opts ...client.CallOption) (*ClusterSubnetResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterSubnet", in)
	out := new(ClusterSubnetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterSubnet(ctx context.Context, in *ClusterSubnetRequest, opts ...client.CallOption) (*ClusterSubnetResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterSubnet", in)
	out := new(ClusterSubnetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterFloatingIP(ctx context.Context, in *CreateClusterFloatingIPRequest, opts ...client.CallOption) (*ClusterFloatingIPResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterFloatingIP", in)
	out := new(ClusterFloatingIPResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterFloatingIP(ctx context.Context, in *DeleteClusterFloatingIPRequest, opts ...client.CallOption) (*DeleteClusterFloatingIPResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterFloatingIP", in)
	out := new(DeleteClusterFloatingIPResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterFloatingIP(ctx context.Context, in *ClusterFloatingIPRequest, opts ...client.CallOption) (*ClusterFloatingIPResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterFloatingIP", in)
	out := new(ClusterFloatingIPResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterFloatingIP(ctx context.Context, in *CheckIsExistClusterFloatingIPRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterFloatingIP", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterRouter(ctx context.Context, in *CreateClusterRouterRequest, opts ...client.CallOption) (*ClusterRouterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterRouter", in)
	out := new(ClusterRouterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterRouter(ctx context.Context, in *DeleteClusterRouterRequest, opts ...client.CallOption) (*DeleteClusterRouterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterRouter", in)
	out := new(DeleteClusterRouterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterRouterList(ctx context.Context, in *ClusterRouterListRequest, opts ...client.CallOption) (*ClusterRouterListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterRouterList", in)
	out := new(ClusterRouterListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterRouter(ctx context.Context, in *ClusterRouterRequest, opts ...client.CallOption) (*ClusterRouterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterRouter", in)
	out := new(ClusterRouterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterRoutingInterface(ctx context.Context, in *CheckIsExistClusterRoutingInterfaceRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterRoutingInterface", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterStorageList(ctx context.Context, in *ClusterStorageListRequest, opts ...client.CallOption) (*ClusterStorageListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterStorageList", in)
	out := new(ClusterStorageListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterStorage(ctx context.Context, in *ClusterStorageRequest, opts ...client.CallOption) (*ClusterStorageResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterStorage", in)
	out := new(ClusterStorageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateClusterStorageMetadata(ctx context.Context, in *UpdateClusterStorageMetadataRequest, opts ...client.CallOption) (*ClusterStorageMetadataResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateClusterStorageMetadata", in)
	out := new(ClusterStorageMetadataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterVolumeGroupList(ctx context.Context, in *GetClusterVolumeGroupListRequest, opts ...client.CallOption) (*GetClusterVolumeGroupListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterVolumeGroupList", in)
	out := new(GetClusterVolumeGroupListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterVolumeGroupByUUID(ctx context.Context, in *GetClusterVolumeGroupByUUIDRequest, opts ...client.CallOption) (*GetClusterVolumeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterVolumeGroupByUUID", in)
	out := new(GetClusterVolumeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterVolumeGroup(ctx context.Context, in *CreateClusterVolumeGroupRequest, opts ...client.CallOption) (*CreateClusterVolumeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterVolumeGroup", in)
	out := new(CreateClusterVolumeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterVolumeGroup(ctx context.Context, in *DeleteClusterVolumeGroupRequest, opts ...client.CallOption) (*DeleteClusterVolumeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterVolumeGroup", in)
	out := new(DeleteClusterVolumeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateClusterVolumeGroup(ctx context.Context, in *UpdateClusterVolumeGroupRequest, opts ...client.CallOption) (*UpdateClusterVolumeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateClusterVolumeGroup", in)
	out := new(UpdateClusterVolumeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterVolumeGroupSnapshot(ctx context.Context, in *CreateClusterVolumeGroupSnapshotRequest, opts ...client.CallOption) (*CreateClusterVolumeGroupSnapshotResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterVolumeGroupSnapshot", in)
	out := new(CreateClusterVolumeGroupSnapshotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterVolumeGroupSnapshotList(ctx context.Context, in *GetClusterVolumeGroupSnapshotListRequest, opts ...client.CallOption) (*GetClusterVolumeGroupSnapshotListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterVolumeGroupSnapshotList", in)
	out := new(GetClusterVolumeGroupSnapshotListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterVolumeGroupSnapshot(ctx context.Context, in *DeleteClusterVolumeGroupSnapshotRequest, opts ...client.CallOption) (*DeleteClusterVolumeGroupSnapshotResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterVolumeGroupSnapshot", in)
	out := new(DeleteClusterVolumeGroupSnapshotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterVolumeList(ctx context.Context, in *ClusterVolumeListRequest, opts ...client.CallOption) (*ClusterVolumeListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterVolumeList", in)
	out := new(ClusterVolumeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterVolume(ctx context.Context, in *ClusterVolumeRequest, opts ...client.CallOption) (*ClusterVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterVolume", in)
	out := new(ClusterVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ImportClusterVolume(ctx context.Context, in *ImportClusterVolumeRequest, opts ...client.CallOption) (*ImportClusterVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ImportClusterVolume", in)
	out := new(ImportClusterVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CopyClusterVolume(ctx context.Context, in *CopyClusterVolumeRequest, opts ...client.CallOption) (*CopyClusterVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CopyClusterVolume", in)
	out := new(CopyClusterVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterVolumeCopy(ctx context.Context, in *DeleteClusterVolumeCopyRequest, opts ...client.CallOption) (*DeleteClusterVolumeCopyResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterVolumeCopy", in)
	out := new(DeleteClusterVolumeCopyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UnmanageClusterVolume(ctx context.Context, in *UnmanageClusterVolumeRequest, opts ...client.CallOption) (*UnmanageClusterVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UnmanageClusterVolume", in)
	out := new(UnmanageClusterVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) SyncClusterVolumeSnapshotList(ctx context.Context, in *SyncClusterVolumeSnapshotListRequest, opts ...client.CallOption) (*SyncClusterVolumeSnapshotListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.SyncClusterVolumeSnapshotList", in)
	out := new(SyncClusterVolumeSnapshotListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterInstanceList(ctx context.Context, in *ClusterInstanceListRequest, opts ...client.CallOption) (*ClusterInstanceListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterInstanceList", in)
	out := new(ClusterInstanceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterInstance(ctx context.Context, in *ClusterInstanceRequest, opts ...client.CallOption) (*ClusterInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterInstance", in)
	out := new(ClusterInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterInstanceByUUID(ctx context.Context, in *ClusterInstanceByUUIDRequest, opts ...client.CallOption) (*ClusterInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterInstanceByUUID", in)
	out := new(ClusterInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterInstanceNumber(ctx context.Context, in *ClusterInstanceNumberRequest, opts ...client.CallOption) (*ClusterInstanceNumberResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterInstanceNumber", in)
	out := new(ClusterInstanceNumberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterInstance(ctx context.Context, in *CheckIsExistClusterInstanceRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterInstance", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterInstance(ctx context.Context, in *CreateClusterInstanceRequest, opts ...client.CallOption) (*CreateClusterInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterInstance", in)
	out := new(CreateClusterInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterInstance(ctx context.Context, in *DeleteClusterInstanceRequest, opts ...client.CallOption) (*DeleteClusterInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterInstance", in)
	out := new(DeleteClusterInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) StopClusterInstance(ctx context.Context, in *StopClusterInstanceRequest, opts ...client.CallOption) (*StopClusterInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.StopClusterInstance", in)
	out := new(StopClusterInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterInstanceSpecByUUID(ctx context.Context, in *ClusterInstanceSpecByUUIDRequest, opts ...client.CallOption) (*ClusterInstanceSpecResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterInstanceSpecByUUID", in)
	out := new(ClusterInstanceSpecResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterInstanceSpec(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterInstanceSpec", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterInstanceSpec(ctx context.Context, in *CreateClusterInstanceSpecRequest, opts ...client.CallOption) (*CreateClusterInstanceSpecResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterInstanceSpec", in)
	out := new(CreateClusterInstanceSpecResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterInstanceSpec(ctx context.Context, in *DeleteClusterInstanceSpecRequest, opts ...client.CallOption) (*DeleteClusterInstanceSpecResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterInstanceSpec", in)
	out := new(DeleteClusterInstanceSpecResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterKeyPair(ctx context.Context, in *ClusterKeyPairRequest, opts ...client.CallOption) (*ClusterKeyPairResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterKeyPair", in)
	out := new(ClusterKeyPairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterKeypair(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterKeypair", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterKeypair(ctx context.Context, in *CreateClusterKeypairRequest, opts ...client.CallOption) (*CreateClusterKeypairResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterKeypair", in)
	out := new(CreateClusterKeypairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterKeypair(ctx context.Context, in *DeleteClusterKeypairRequest, opts ...client.CallOption) (*DeleteClusterKeypairResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterKeypair", in)
	out := new(DeleteClusterKeypairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterInstanceUserScript(ctx context.Context, in *ClusterInstanceUserScriptRequest, opts ...client.CallOption) (*ClusterInstanceUserScriptResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterInstanceUserScript", in)
	out := new(ClusterInstanceUserScriptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateClusterInstanceUserScript(ctx context.Context, in *UpdateClusterInstanceUserScriptRequest, opts ...client.CallOption) (*UpdateClusterInstanceUserScriptResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateClusterInstanceUserScript", in)
	out := new(UpdateClusterInstanceUserScriptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterSecurityGroup(ctx context.Context, in *CreateClusterSecurityGroupRequest, opts ...client.CallOption) (*ClusterSecurityGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterSecurityGroup", in)
	out := new(ClusterSecurityGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateClusterSecurityGroupRule(ctx context.Context, in *CreateClusterSecurityGroupRuleRequest, opts ...client.CallOption) (*ClusterSecurityGroupRuleResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateClusterSecurityGroupRule", in)
	out := new(ClusterSecurityGroupRuleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterSecurityGroup(ctx context.Context, in *DeleteClusterSecurityGroupRequest, opts ...client.CallOption) (*DeleteClusterSecurityGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterSecurityGroup", in)
	out := new(DeleteClusterSecurityGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterSecurityGroupList(ctx context.Context, in *ClusterSecurityGroupListRequest, opts ...client.CallOption) (*ClusterSecurityGroupListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterSecurityGroupList", in)
	out := new(ClusterSecurityGroupListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterSecurityGroup(ctx context.Context, in *ClusterSecurityGroupRequest, opts ...client.CallOption) (*ClusterSecurityGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterSecurityGroup", in)
	out := new(ClusterSecurityGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckIsExistClusterSecurityGroup(ctx context.Context, in *CheckIsExistByNameRequest, opts ...client.CallOption) (*CheckIsExistResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckIsExistClusterSecurityGroup", in)
	out := new(CheckIsExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterManager service

type ClusterManagerHandler interface {
	// 공개키 조회
	GetPublicKey(context.Context, *Empty, *PublicKey) error
	// 클러스터 연결 확인
	CheckConnection(context.Context, *ClusterConnectionInfo, *ClusterConnectionResponse) error
	// CDM-Center 동작 config 조회
	GetCenterConfig(context.Context, *GetCenterConfigRequest, *GetCenterConfigResponse) error
	// CDM-Center 동작 config 수정
	UpdateCenterConfig(context.Context, *UpdateCenterConfigRequest, *UpdateCenterConfigResponse) error
	// 클러스터 상태 확인
	CheckCluster(context.Context, *CheckClusterRequest, *CheckClusterResponse) error
	// 인증 정보 수정
	UpdateCredential(context.Context, *UpdateCredentialRequest, *UpdateCredentialResponse) error
	// 클러스터 동기화
	SyncCluster(context.Context, *SyncClusterRequest, *SyncClusterResponse) error
	// 클러스터 동기화 상태 조회
	GetClusterSyncStatus(context.Context, *SyncClusterRequest, *GetClusterSyncStatusResponse) error
	// 클러스터 상태 제외 대상
	SyncException(context.Context, *SyncExceptionRequest, *SyncExceptionResponse) error
	// 클러스터 목록 조회
	GetClusterList(context.Context, *ClusterListRequest, *ClusterListResponse) error
	// 클러스터 등록
	AddCluster(context.Context, *AddClusterRequest, *ClusterResponse) error
	// 클러스터 조회
	GetCluster(context.Context, *ClusterRequest, *ClusterResponse) error
	// 클러스터 수정
	UpdateCluster(context.Context, *UpdateClusterRequest, *ClusterResponse) error
	// 클러스터 제거
	DeleteCluster(context.Context, *DeleteClusterRequest, *DeleteClusterResponse) error
	// 클러스터 하이퍼바이저 목록 조회
	GetClusterHypervisorList(context.Context, *ClusterHypervisorListRequest, *ClusterHypervisorListResponse) error
	// 클러스터 하이퍼바이저 조회
	GetClusterHypervisor(context.Context, *ClusterHypervisorRequest, *ClusterHypervisorResponse) error
	// 클러스터 하이퍼바이저 추가정보 수정
	UpdateClusterHypervisor(context.Context, *UpdateClusterHypervisorRequest, *ClusterHypervisorResponse) error
	// 클러스터 가용구역 목록 조회
	GetClusterAvailabilityZoneList(context.Context, *ClusterAvailabilityZoneListRequest, *ClusterAvailabilityZoneListResponse) error
	// 클러스터 가용구역 조회
	GetClusterAvailabilityZone(context.Context, *ClusterAvailabilityZoneRequest, *ClusterAvailabilityZoneResponse) error
	// 클러스터 테넌트 목록 조회
	GetClusterTenantList(context.Context, *ClusterTenantListRequest, *ClusterTenantListResponse) error
	// 클러스터 테넌트 생성
	CreateClusterTenant(context.Context, *CreateClusterTenantRequest, *ClusterTenantResponse) error
	// 클러스터 테넌트 조회
	GetClusterTenant(context.Context, *ClusterTenantRequest, *ClusterTenantResponse) error
	// 클러스터 테넌트 제거
	DeleteClusterTenant(context.Context, *DeleteClusterTenantRequest, *DeleteClusterTenantResponse) error
	// 클러스터 테넌트 존재유무 확인(Name)
	CheckIsExistClusterTenant(context.Context, *CheckIsExistByNameRequest, *CheckIsExistResponse) error
	// 클러스터 네트워크 목록 조회
	GetClusterNetworkList(context.Context, *ClusterNetworkListRequest, *ClusterNetworkListResponse) error
	// 클러스터 네트워크 생성
	CreateClusterNetwork(context.Context, *CreateClusterNetworkRequest, *ClusterNetworkResponse) error
	// 클러스터 네트워크 삭제
	DeleteClusterNetwork(context.Context, *DeleteClusterNetworkRequest, *DeleteClusterNetworkResponse) error
	// 클러스터 네트워크 조회
	GetClusterNetwork(context.Context, *ClusterNetworkRequest, *ClusterNetworkResponse) error
	// 클러스터 네트워크 조회(UUID)
	GetClusterNetworkByUUID(context.Context, *ClusterNetworkByUUIDRequest, *ClusterNetworkResponse) error
	// 클러스터 서브넷 생성
	CreateClusterSubnet(context.Context, *CreateClusterSubnetRequest, *ClusterSubnetResponse) error
	// 클러스터 서브넷 조회
	GetClusterSubnet(context.Context, *ClusterSubnetRequest, *ClusterSubnetResponse) error
	// 클러스터 FloatingIP 생성
	CreateClusterFloatingIP(context.Context, *CreateClusterFloatingIPRequest, *ClusterFloatingIPResponse) error
	// 클러스터 FloatingIP 삭제
	DeleteClusterFloatingIP(context.Context, *DeleteClusterFloatingIPRequest, *DeleteClusterFloatingIPResponse) error
	// 클러스터 FloatingIP 조회
	GetClusterFloatingIP(context.Context, *ClusterFloatingIPRequest, *ClusterFloatingIPResponse) error
	// 클러스터 FloatingIP 존재유무 확인(IPAddress)
	CheckIsExistClusterFloatingIP(context.Context, *CheckIsExistClusterFloatingIPRequest, *CheckIsExistResponse) error
	// 클러스터 라우터 생성
	CreateClusterRouter(context.Context, *CreateClusterRouterRequest, *ClusterRouterResponse) error
	// 클러스터 라우터 삭제
	DeleteClusterRouter(context.Context, *DeleteClusterRouterRequest, *DeleteClusterRouterResponse) error
	// 클러스터 네트워크 라우터 목록 조회
	GetClusterRouterList(context.Context, *ClusterRouterListRequest, *ClusterRouterListResponse) error
	// 클러스터 네트워크 라우터 조회
	GetClusterRouter(context.Context, *ClusterRouterRequest, *ClusterRouterResponse) error
	// 클러스터 Routing Interface 존재유무 확인(IPAddress)
	CheckIsExistClusterRoutingInterface(context.Context, *CheckIsExistClusterRoutingInterfaceRequest, *CheckIsExistResponse) error
	// 클러스터 볼륨타입 목록 조회
	GetClusterStorageList(context.Context, *ClusterStorageListRequest, *ClusterStorageListResponse) error
	// 클러스터 볼륨타입 조회
	GetClusterStorage(context.Context, *ClusterStorageRequest, *ClusterStorageResponse) error
	// 클러스터 볼륨타입 메타데이터 수정
	UpdateClusterStorageMetadata(context.Context, *UpdateClusterStorageMetadataRequest, *ClusterStorageMetadataResponse) error
	// 클러스터 볼륨 그룹 목록 조회
	GetClusterVolumeGroupList(context.Context, *GetClusterVolumeGroupListRequest, *GetClusterVolumeGroupListResponse) error
	// 클러스터 볼륨 그룹 조회 (UUID)
	GetClusterVolumeGroupByUUID(context.Context, *GetClusterVolumeGroupByUUIDRequest, *GetClusterVolumeGroupResponse) error
	// 클러스터 볼륨 그룹 생성
	CreateClusterVolumeGroup(context.Context, *CreateClusterVolumeGroupRequest, *CreateClusterVolumeGroupResponse) error
	// 클러스터 볼륨 그룹 삭제
	DeleteClusterVolumeGroup(context.Context, *DeleteClusterVolumeGroupRequest, *DeleteClusterVolumeGroupResponse) error
	// 클러스터 볼륨 그룹 수정
	UpdateClusterVolumeGroup(context.Context, *UpdateClusterVolumeGroupRequest, *UpdateClusterVolumeGroupResponse) error
	// 클러스터 볼륨 그룹 스냅샷 생성
	CreateClusterVolumeGroupSnapshot(context.Context, *CreateClusterVolumeGroupSnapshotRequest, *CreateClusterVolumeGroupSnapshotResponse) error
	// 클러스터 볼륨 그룹 스냅샷 목록 조회
	GetClusterVolumeGroupSnapshotList(context.Context, *GetClusterVolumeGroupSnapshotListRequest, *GetClusterVolumeGroupSnapshotListResponse) error
	// 클러스터 볼륨 그룹 스냅샷 삭제
	DeleteClusterVolumeGroupSnapshot(context.Context, *DeleteClusterVolumeGroupSnapshotRequest, *DeleteClusterVolumeGroupSnapshotResponse) error
	// 클러스터 볼륨 목록 조회
	GetClusterVolumeList(context.Context, *ClusterVolumeListRequest, *ClusterVolumeListResponse) error
	// 클러스터 볼륨 조회
	GetClusterVolume(context.Context, *ClusterVolumeRequest, *ClusterVolumeResponse) error
	// 클러스터 볼륨 import
	ImportClusterVolume(context.Context, *ImportClusterVolumeRequest, *ImportClusterVolumeResponse) error
	// 클러스터 볼륨 copy
	CopyClusterVolume(context.Context, *CopyClusterVolumeRequest, *CopyClusterVolumeResponse) error
	// 클러스터 볼륨 copy 삭제
	DeleteClusterVolumeCopy(context.Context, *DeleteClusterVolumeCopyRequest, *DeleteClusterVolumeCopyResponse) error
	// 클러스터 볼륨 unmanage
	UnmanageClusterVolume(context.Context, *UnmanageClusterVolumeRequest, *UnmanageClusterVolumeResponse) error
	// 클러스터 볼륨 스냅샷 목록 동기화
	SyncClusterVolumeSnapshotList(context.Context, *SyncClusterVolumeSnapshotListRequest, *SyncClusterVolumeSnapshotListResponse) error
	// 클러스터 인스턴스 목록 조회
	GetClusterInstanceList(context.Context, *ClusterInstanceListRequest, *ClusterInstanceListResponse) error
	// 클러스터 인스턴스 조회
	GetClusterInstance(context.Context, *ClusterInstanceRequest, *ClusterInstanceResponse) error
	// 클러스터 인스턴스 조회(UUID)
	GetClusterInstanceByUUID(context.Context, *ClusterInstanceByUUIDRequest, *ClusterInstanceResponse) error
	// 클러스터 인스턴스 수 조회
	GetClusterInstanceNumber(context.Context, *ClusterInstanceNumberRequest, *ClusterInstanceNumberResponse) error
	// 클러스터 인스턴스 존재유무 확인(UUID)
	CheckIsExistClusterInstance(context.Context, *CheckIsExistClusterInstanceRequest, *CheckIsExistResponse) error
	// 클러스터 인스턴스 생성
	CreateClusterInstance(context.Context, *CreateClusterInstanceRequest, *CreateClusterInstanceResponse) error
	// 클러스터 인스턴스 삭제
	DeleteClusterInstance(context.Context, *DeleteClusterInstanceRequest, *DeleteClusterInstanceResponse) error
	// 클러스터 인스턴스 중지
	StopClusterInstance(context.Context, *StopClusterInstanceRequest, *StopClusterInstanceResponse) error
	// 클러스터 인스턴스 Spec 조회(UUID)
	GetClusterInstanceSpecByUUID(context.Context, *ClusterInstanceSpecByUUIDRequest, *ClusterInstanceSpecResponse) error
	// 클러스터 인스턴스 Spec 존재유무 확인(Name)
	CheckIsExistClusterInstanceSpec(context.Context, *CheckIsExistByNameRequest, *CheckIsExistResponse) error
	// 클러스터 인스턴스 Spec 생성
	CreateClusterInstanceSpec(context.Context, *CreateClusterInstanceSpecRequest, *CreateClusterInstanceSpecResponse) error
	// 클러스터 인스턴스 Spec 삭제
	DeleteClusterInstanceSpec(context.Context, *DeleteClusterInstanceSpecRequest, *DeleteClusterInstanceSpecResponse) error
	// 클러스터 KeyPair 조회
	GetClusterKeyPair(context.Context, *ClusterKeyPairRequest, *ClusterKeyPairResponse) error
	// 클러스터 Keypair 존재유무 확인(Name)
	CheckIsExistClusterKeypair(context.Context, *CheckIsExistByNameRequest, *CheckIsExistResponse) error
	// 클러스터 Keypair 생성
	CreateClusterKeypair(context.Context, *CreateClusterKeypairRequest, *CreateClusterKeypairResponse) error
	// 클러스터 Keypair 삭제
	DeleteClusterKeypair(context.Context, *DeleteClusterKeypairRequest, *DeleteClusterKeypairResponse) error
	// 클러스터 Instance User Script 조회
	GetClusterInstanceUserScript(context.Context, *ClusterInstanceUserScriptRequest, *ClusterInstanceUserScriptResponse) error
	// 클러스터 Instance User Script 수정
	UpdateClusterInstanceUserScript(context.Context, *UpdateClusterInstanceUserScriptRequest, *UpdateClusterInstanceUserScriptResponse) error
	// 클러스터 보안 그룹 생성
	CreateClusterSecurityGroup(context.Context, *CreateClusterSecurityGroupRequest, *ClusterSecurityGroupResponse) error
	// 클러스터 보안 그룹 규칙 생성
	CreateClusterSecurityGroupRule(context.Context, *CreateClusterSecurityGroupRuleRequest, *ClusterSecurityGroupRuleResponse) error
	// 클러스터 보안 그룹 제거
	DeleteClusterSecurityGroup(context.Context, *DeleteClusterSecurityGroupRequest, *DeleteClusterSecurityGroupResponse) error
	// 클러스터 보안그룹 목록 조회
	GetClusterSecurityGroupList(context.Context, *ClusterSecurityGroupListRequest, *ClusterSecurityGroupListResponse) error
	// 클러스터 보안그룹 조회
	GetClusterSecurityGroup(context.Context, *ClusterSecurityGroupRequest, *ClusterSecurityGroupResponse) error
	// 클러스터 보안 그룹 존재유무 확인(Name)
	CheckIsExistClusterSecurityGroup(context.Context, *CheckIsExistByNameRequest, *CheckIsExistResponse) error
}

func RegisterClusterManagerHandler(s server.Server, hdlr ClusterManagerHandler, opts ...server.HandlerOption) error {
	type clusterManager interface {
		GetPublicKey(ctx context.Context, in *Empty, out *PublicKey) error
		CheckConnection(ctx context.Context, in *ClusterConnectionInfo, out *ClusterConnectionResponse) error
		GetCenterConfig(ctx context.Context, in *GetCenterConfigRequest, out *GetCenterConfigResponse) error
		UpdateCenterConfig(ctx context.Context, in *UpdateCenterConfigRequest, out *UpdateCenterConfigResponse) error
		CheckCluster(ctx context.Context, in *CheckClusterRequest, out *CheckClusterResponse) error
		UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, out *UpdateCredentialResponse) error
		SyncCluster(ctx context.Context, in *SyncClusterRequest, out *SyncClusterResponse) error
		GetClusterSyncStatus(ctx context.Context, in *SyncClusterRequest, out *GetClusterSyncStatusResponse) error
		SyncException(ctx context.Context, in *SyncExceptionRequest, out *SyncExceptionResponse) error
		GetClusterList(ctx context.Context, in *ClusterListRequest, out *ClusterListResponse) error
		AddCluster(ctx context.Context, in *AddClusterRequest, out *ClusterResponse) error
		GetCluster(ctx context.Context, in *ClusterRequest, out *ClusterResponse) error
		UpdateCluster(ctx context.Context, in *UpdateClusterRequest, out *ClusterResponse) error
		DeleteCluster(ctx context.Context, in *DeleteClusterRequest, out *DeleteClusterResponse) error
		GetClusterHypervisorList(ctx context.Context, in *ClusterHypervisorListRequest, out *ClusterHypervisorListResponse) error
		GetClusterHypervisor(ctx context.Context, in *ClusterHypervisorRequest, out *ClusterHypervisorResponse) error
		UpdateClusterHypervisor(ctx context.Context, in *UpdateClusterHypervisorRequest, out *ClusterHypervisorResponse) error
		GetClusterAvailabilityZoneList(ctx context.Context, in *ClusterAvailabilityZoneListRequest, out *ClusterAvailabilityZoneListResponse) error
		GetClusterAvailabilityZone(ctx context.Context, in *ClusterAvailabilityZoneRequest, out *ClusterAvailabilityZoneResponse) error
		GetClusterTenantList(ctx context.Context, in *ClusterTenantListRequest, out *ClusterTenantListResponse) error
		CreateClusterTenant(ctx context.Context, in *CreateClusterTenantRequest, out *ClusterTenantResponse) error
		GetClusterTenant(ctx context.Context, in *ClusterTenantRequest, out *ClusterTenantResponse) error
		DeleteClusterTenant(ctx context.Context, in *DeleteClusterTenantRequest, out *DeleteClusterTenantResponse) error
		CheckIsExistClusterTenant(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error
		GetClusterNetworkList(ctx context.Context, in *ClusterNetworkListRequest, out *ClusterNetworkListResponse) error
		CreateClusterNetwork(ctx context.Context, in *CreateClusterNetworkRequest, out *ClusterNetworkResponse) error
		DeleteClusterNetwork(ctx context.Context, in *DeleteClusterNetworkRequest, out *DeleteClusterNetworkResponse) error
		GetClusterNetwork(ctx context.Context, in *ClusterNetworkRequest, out *ClusterNetworkResponse) error
		GetClusterNetworkByUUID(ctx context.Context, in *ClusterNetworkByUUIDRequest, out *ClusterNetworkResponse) error
		CreateClusterSubnet(ctx context.Context, in *CreateClusterSubnetRequest, out *ClusterSubnetResponse) error
		GetClusterSubnet(ctx context.Context, in *ClusterSubnetRequest, out *ClusterSubnetResponse) error
		CreateClusterFloatingIP(ctx context.Context, in *CreateClusterFloatingIPRequest, out *ClusterFloatingIPResponse) error
		DeleteClusterFloatingIP(ctx context.Context, in *DeleteClusterFloatingIPRequest, out *DeleteClusterFloatingIPResponse) error
		GetClusterFloatingIP(ctx context.Context, in *ClusterFloatingIPRequest, out *ClusterFloatingIPResponse) error
		CheckIsExistClusterFloatingIP(ctx context.Context, in *CheckIsExistClusterFloatingIPRequest, out *CheckIsExistResponse) error
		CreateClusterRouter(ctx context.Context, in *CreateClusterRouterRequest, out *ClusterRouterResponse) error
		DeleteClusterRouter(ctx context.Context, in *DeleteClusterRouterRequest, out *DeleteClusterRouterResponse) error
		GetClusterRouterList(ctx context.Context, in *ClusterRouterListRequest, out *ClusterRouterListResponse) error
		GetClusterRouter(ctx context.Context, in *ClusterRouterRequest, out *ClusterRouterResponse) error
		CheckIsExistClusterRoutingInterface(ctx context.Context, in *CheckIsExistClusterRoutingInterfaceRequest, out *CheckIsExistResponse) error
		GetClusterStorageList(ctx context.Context, in *ClusterStorageListRequest, out *ClusterStorageListResponse) error
		GetClusterStorage(ctx context.Context, in *ClusterStorageRequest, out *ClusterStorageResponse) error
		UpdateClusterStorageMetadata(ctx context.Context, in *UpdateClusterStorageMetadataRequest, out *ClusterStorageMetadataResponse) error
		GetClusterVolumeGroupList(ctx context.Context, in *GetClusterVolumeGroupListRequest, out *GetClusterVolumeGroupListResponse) error
		GetClusterVolumeGroupByUUID(ctx context.Context, in *GetClusterVolumeGroupByUUIDRequest, out *GetClusterVolumeGroupResponse) error
		CreateClusterVolumeGroup(ctx context.Context, in *CreateClusterVolumeGroupRequest, out *CreateClusterVolumeGroupResponse) error
		DeleteClusterVolumeGroup(ctx context.Context, in *DeleteClusterVolumeGroupRequest, out *DeleteClusterVolumeGroupResponse) error
		UpdateClusterVolumeGroup(ctx context.Context, in *UpdateClusterVolumeGroupRequest, out *UpdateClusterVolumeGroupResponse) error
		CreateClusterVolumeGroupSnapshot(ctx context.Context, in *CreateClusterVolumeGroupSnapshotRequest, out *CreateClusterVolumeGroupSnapshotResponse) error
		GetClusterVolumeGroupSnapshotList(ctx context.Context, in *GetClusterVolumeGroupSnapshotListRequest, out *GetClusterVolumeGroupSnapshotListResponse) error
		DeleteClusterVolumeGroupSnapshot(ctx context.Context, in *DeleteClusterVolumeGroupSnapshotRequest, out *DeleteClusterVolumeGroupSnapshotResponse) error
		GetClusterVolumeList(ctx context.Context, in *ClusterVolumeListRequest, out *ClusterVolumeListResponse) error
		GetClusterVolume(ctx context.Context, in *ClusterVolumeRequest, out *ClusterVolumeResponse) error
		ImportClusterVolume(ctx context.Context, in *ImportClusterVolumeRequest, out *ImportClusterVolumeResponse) error
		CopyClusterVolume(ctx context.Context, in *CopyClusterVolumeRequest, out *CopyClusterVolumeResponse) error
		DeleteClusterVolumeCopy(ctx context.Context, in *DeleteClusterVolumeCopyRequest, out *DeleteClusterVolumeCopyResponse) error
		UnmanageClusterVolume(ctx context.Context, in *UnmanageClusterVolumeRequest, out *UnmanageClusterVolumeResponse) error
		SyncClusterVolumeSnapshotList(ctx context.Context, in *SyncClusterVolumeSnapshotListRequest, out *SyncClusterVolumeSnapshotListResponse) error
		GetClusterInstanceList(ctx context.Context, in *ClusterInstanceListRequest, out *ClusterInstanceListResponse) error
		GetClusterInstance(ctx context.Context, in *ClusterInstanceRequest, out *ClusterInstanceResponse) error
		GetClusterInstanceByUUID(ctx context.Context, in *ClusterInstanceByUUIDRequest, out *ClusterInstanceResponse) error
		GetClusterInstanceNumber(ctx context.Context, in *ClusterInstanceNumberRequest, out *ClusterInstanceNumberResponse) error
		CheckIsExistClusterInstance(ctx context.Context, in *CheckIsExistClusterInstanceRequest, out *CheckIsExistResponse) error
		CreateClusterInstance(ctx context.Context, in *CreateClusterInstanceRequest, out *CreateClusterInstanceResponse) error
		DeleteClusterInstance(ctx context.Context, in *DeleteClusterInstanceRequest, out *DeleteClusterInstanceResponse) error
		StopClusterInstance(ctx context.Context, in *StopClusterInstanceRequest, out *StopClusterInstanceResponse) error
		GetClusterInstanceSpecByUUID(ctx context.Context, in *ClusterInstanceSpecByUUIDRequest, out *ClusterInstanceSpecResponse) error
		CheckIsExistClusterInstanceSpec(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error
		CreateClusterInstanceSpec(ctx context.Context, in *CreateClusterInstanceSpecRequest, out *CreateClusterInstanceSpecResponse) error
		DeleteClusterInstanceSpec(ctx context.Context, in *DeleteClusterInstanceSpecRequest, out *DeleteClusterInstanceSpecResponse) error
		GetClusterKeyPair(ctx context.Context, in *ClusterKeyPairRequest, out *ClusterKeyPairResponse) error
		CheckIsExistClusterKeypair(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error
		CreateClusterKeypair(ctx context.Context, in *CreateClusterKeypairRequest, out *CreateClusterKeypairResponse) error
		DeleteClusterKeypair(ctx context.Context, in *DeleteClusterKeypairRequest, out *DeleteClusterKeypairResponse) error
		GetClusterInstanceUserScript(ctx context.Context, in *ClusterInstanceUserScriptRequest, out *ClusterInstanceUserScriptResponse) error
		UpdateClusterInstanceUserScript(ctx context.Context, in *UpdateClusterInstanceUserScriptRequest, out *UpdateClusterInstanceUserScriptResponse) error
		CreateClusterSecurityGroup(ctx context.Context, in *CreateClusterSecurityGroupRequest, out *ClusterSecurityGroupResponse) error
		CreateClusterSecurityGroupRule(ctx context.Context, in *CreateClusterSecurityGroupRuleRequest, out *ClusterSecurityGroupRuleResponse) error
		DeleteClusterSecurityGroup(ctx context.Context, in *DeleteClusterSecurityGroupRequest, out *DeleteClusterSecurityGroupResponse) error
		GetClusterSecurityGroupList(ctx context.Context, in *ClusterSecurityGroupListRequest, out *ClusterSecurityGroupListResponse) error
		GetClusterSecurityGroup(ctx context.Context, in *ClusterSecurityGroupRequest, out *ClusterSecurityGroupResponse) error
		CheckIsExistClusterSecurityGroup(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error
	}
	type ClusterManager struct {
		clusterManager
	}
	h := &clusterManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetPublicKey",
		Path:    []string{"/management/clusters/pbkey"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CheckConnection",
		Path:    []string{"/management/clusters/check"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetCenterConfig",
		Path:    []string{"/management/clusters/{cluster_id}/config"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCenterConfig",
		Path:    []string{"/management/clusters/{cluster_id}/config"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CheckCluster",
		Path:    []string{"/management/clusters/{cluster_id}/check"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCredential",
		Path:    []string{"/management/clusters/{cluster_id}/credential"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.SyncCluster",
		Path:    []string{"/management/clusters/{cluster_id}/sync"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterSyncStatus",
		Path:    []string{"/management/clusters/{cluster_id}/sync-status"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.SyncException",
		Path:    []string{"/management/clusters/{cluster_id}/sync-exception"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterList",
		Path:    []string{"/management/clusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.AddCluster",
		Path:    []string{"/management/clusters"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetCluster",
		Path:    []string{"/management/clusters/{cluster_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCluster",
		Path:    []string{"/management/clusters/{cluster_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteCluster",
		Path:    []string{"/management/clusters/{cluster_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterHypervisorList",
		Path:    []string{"/management/clusters/{cluster_id}/hypervisors"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterHypervisor",
		Path:    []string{"/management/clusters/{cluster_id}/hypervisors/{cluster_hypervisor_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateClusterHypervisor",
		Path:    []string{"/management/clusters/{cluster_id}/hypervisors/{cluster_hypervisor_id}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterAvailabilityZoneList",
		Path:    []string{"/management/clusters/{cluster_id}/availability-zones"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterAvailabilityZone",
		Path:    []string{"/management/clusters/{cluster_id}/availability-zones/{cluster_availability_zone_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterTenantList",
		Path:    []string{"/management/clusters/{cluster_id}/tenants"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterTenant",
		Path:    []string{"/management/clusters/{cluster_id}/tenants/{cluster_tenant_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterNetworkList",
		Path:    []string{"/management/clusters/{cluster_id}/networks"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterNetwork",
		Path:    []string{"/management/clusters/{cluster_id}/networks/{cluster_network_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterSubnet",
		Path:    []string{"/management/clusters/{cluster_id}/subnets/{cluster_subnet_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterFloatingIP",
		Path:    []string{"/management/clusters/{cluster_id}/floating-ips/{cluster_floating_ip_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterRouterList",
		Path:    []string{"/management/clusters/{cluster_id}/routers"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterRouter",
		Path:    []string{"/management/clusters/{cluster_id}/routers/{cluster_router_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterStorageList",
		Path:    []string{"/management/clusters/{cluster_id}/storages"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterStorage",
		Path:    []string{"/management/clusters/{cluster_id}/storages/{cluster_storage_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateClusterStorageMetadata",
		Path:    []string{"/management/clusters/{cluster_id}/storages/{cluster_storage_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterVolumeList",
		Path:    []string{"/management/clusters/{cluster_id}/volumes"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterVolume",
		Path:    []string{"/management/clusters/{cluster_id}/volumes/{cluster_volume_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterInstanceList",
		Path:    []string{"/management/clusters/{cluster_id}/instances"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterInstance",
		Path:    []string{"/management/clusters/{cluster_id}/instances/{cluster_instance_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterKeyPair",
		Path:    []string{"/management/clusters/{cluster_id}/keypairs/{cluster_keypair_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterInstanceUserScript",
		Path:    []string{"/management/clusters/{cluster_id}/user-scripts/{cluster_instance_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateClusterInstanceUserScript",
		Path:    []string{"/management/clusters/{cluster_id}/user-scripts/{cluster_instance_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterSecurityGroupList",
		Path:    []string{"/management/clusters/{cluster_id}/security-groups"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterSecurityGroup",
		Path:    []string{"/management/clusters/{cluster_id}/security-groups/{cluster_security_group_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ClusterManager{h}, opts...))
}

type clusterManagerHandler struct {
	ClusterManagerHandler
}

func (h *clusterManagerHandler) GetPublicKey(ctx context.Context, in *Empty, out *PublicKey) error {
	return h.ClusterManagerHandler.GetPublicKey(ctx, in, out)
}

func (h *clusterManagerHandler) CheckConnection(ctx context.Context, in *ClusterConnectionInfo, out *ClusterConnectionResponse) error {
	return h.ClusterManagerHandler.CheckConnection(ctx, in, out)
}

func (h *clusterManagerHandler) GetCenterConfig(ctx context.Context, in *GetCenterConfigRequest, out *GetCenterConfigResponse) error {
	return h.ClusterManagerHandler.GetCenterConfig(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCenterConfig(ctx context.Context, in *UpdateCenterConfigRequest, out *UpdateCenterConfigResponse) error {
	return h.ClusterManagerHandler.UpdateCenterConfig(ctx, in, out)
}

func (h *clusterManagerHandler) CheckCluster(ctx context.Context, in *CheckClusterRequest, out *CheckClusterResponse) error {
	return h.ClusterManagerHandler.CheckCluster(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, out *UpdateCredentialResponse) error {
	return h.ClusterManagerHandler.UpdateCredential(ctx, in, out)
}

func (h *clusterManagerHandler) SyncCluster(ctx context.Context, in *SyncClusterRequest, out *SyncClusterResponse) error {
	return h.ClusterManagerHandler.SyncCluster(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterSyncStatus(ctx context.Context, in *SyncClusterRequest, out *GetClusterSyncStatusResponse) error {
	return h.ClusterManagerHandler.GetClusterSyncStatus(ctx, in, out)
}

func (h *clusterManagerHandler) SyncException(ctx context.Context, in *SyncExceptionRequest, out *SyncExceptionResponse) error {
	return h.ClusterManagerHandler.SyncException(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterList(ctx context.Context, in *ClusterListRequest, out *ClusterListResponse) error {
	return h.ClusterManagerHandler.GetClusterList(ctx, in, out)
}

func (h *clusterManagerHandler) AddCluster(ctx context.Context, in *AddClusterRequest, out *ClusterResponse) error {
	return h.ClusterManagerHandler.AddCluster(ctx, in, out)
}

func (h *clusterManagerHandler) GetCluster(ctx context.Context, in *ClusterRequest, out *ClusterResponse) error {
	return h.ClusterManagerHandler.GetCluster(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, out *ClusterResponse) error {
	return h.ClusterManagerHandler.UpdateCluster(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, out *DeleteClusterResponse) error {
	return h.ClusterManagerHandler.DeleteCluster(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterHypervisorList(ctx context.Context, in *ClusterHypervisorListRequest, out *ClusterHypervisorListResponse) error {
	return h.ClusterManagerHandler.GetClusterHypervisorList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterHypervisor(ctx context.Context, in *ClusterHypervisorRequest, out *ClusterHypervisorResponse) error {
	return h.ClusterManagerHandler.GetClusterHypervisor(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateClusterHypervisor(ctx context.Context, in *UpdateClusterHypervisorRequest, out *ClusterHypervisorResponse) error {
	return h.ClusterManagerHandler.UpdateClusterHypervisor(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterAvailabilityZoneList(ctx context.Context, in *ClusterAvailabilityZoneListRequest, out *ClusterAvailabilityZoneListResponse) error {
	return h.ClusterManagerHandler.GetClusterAvailabilityZoneList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterAvailabilityZone(ctx context.Context, in *ClusterAvailabilityZoneRequest, out *ClusterAvailabilityZoneResponse) error {
	return h.ClusterManagerHandler.GetClusterAvailabilityZone(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterTenantList(ctx context.Context, in *ClusterTenantListRequest, out *ClusterTenantListResponse) error {
	return h.ClusterManagerHandler.GetClusterTenantList(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterTenant(ctx context.Context, in *CreateClusterTenantRequest, out *ClusterTenantResponse) error {
	return h.ClusterManagerHandler.CreateClusterTenant(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterTenant(ctx context.Context, in *ClusterTenantRequest, out *ClusterTenantResponse) error {
	return h.ClusterManagerHandler.GetClusterTenant(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterTenant(ctx context.Context, in *DeleteClusterTenantRequest, out *DeleteClusterTenantResponse) error {
	return h.ClusterManagerHandler.DeleteClusterTenant(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterTenant(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterTenant(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterNetworkList(ctx context.Context, in *ClusterNetworkListRequest, out *ClusterNetworkListResponse) error {
	return h.ClusterManagerHandler.GetClusterNetworkList(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterNetwork(ctx context.Context, in *CreateClusterNetworkRequest, out *ClusterNetworkResponse) error {
	return h.ClusterManagerHandler.CreateClusterNetwork(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterNetwork(ctx context.Context, in *DeleteClusterNetworkRequest, out *DeleteClusterNetworkResponse) error {
	return h.ClusterManagerHandler.DeleteClusterNetwork(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterNetwork(ctx context.Context, in *ClusterNetworkRequest, out *ClusterNetworkResponse) error {
	return h.ClusterManagerHandler.GetClusterNetwork(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterNetworkByUUID(ctx context.Context, in *ClusterNetworkByUUIDRequest, out *ClusterNetworkResponse) error {
	return h.ClusterManagerHandler.GetClusterNetworkByUUID(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterSubnet(ctx context.Context, in *CreateClusterSubnetRequest, out *ClusterSubnetResponse) error {
	return h.ClusterManagerHandler.CreateClusterSubnet(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterSubnet(ctx context.Context, in *ClusterSubnetRequest, out *ClusterSubnetResponse) error {
	return h.ClusterManagerHandler.GetClusterSubnet(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterFloatingIP(ctx context.Context, in *CreateClusterFloatingIPRequest, out *ClusterFloatingIPResponse) error {
	return h.ClusterManagerHandler.CreateClusterFloatingIP(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterFloatingIP(ctx context.Context, in *DeleteClusterFloatingIPRequest, out *DeleteClusterFloatingIPResponse) error {
	return h.ClusterManagerHandler.DeleteClusterFloatingIP(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterFloatingIP(ctx context.Context, in *ClusterFloatingIPRequest, out *ClusterFloatingIPResponse) error {
	return h.ClusterManagerHandler.GetClusterFloatingIP(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterFloatingIP(ctx context.Context, in *CheckIsExistClusterFloatingIPRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterFloatingIP(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterRouter(ctx context.Context, in *CreateClusterRouterRequest, out *ClusterRouterResponse) error {
	return h.ClusterManagerHandler.CreateClusterRouter(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterRouter(ctx context.Context, in *DeleteClusterRouterRequest, out *DeleteClusterRouterResponse) error {
	return h.ClusterManagerHandler.DeleteClusterRouter(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterRouterList(ctx context.Context, in *ClusterRouterListRequest, out *ClusterRouterListResponse) error {
	return h.ClusterManagerHandler.GetClusterRouterList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterRouter(ctx context.Context, in *ClusterRouterRequest, out *ClusterRouterResponse) error {
	return h.ClusterManagerHandler.GetClusterRouter(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterRoutingInterface(ctx context.Context, in *CheckIsExistClusterRoutingInterfaceRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterRoutingInterface(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterStorageList(ctx context.Context, in *ClusterStorageListRequest, out *ClusterStorageListResponse) error {
	return h.ClusterManagerHandler.GetClusterStorageList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterStorage(ctx context.Context, in *ClusterStorageRequest, out *ClusterStorageResponse) error {
	return h.ClusterManagerHandler.GetClusterStorage(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateClusterStorageMetadata(ctx context.Context, in *UpdateClusterStorageMetadataRequest, out *ClusterStorageMetadataResponse) error {
	return h.ClusterManagerHandler.UpdateClusterStorageMetadata(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterVolumeGroupList(ctx context.Context, in *GetClusterVolumeGroupListRequest, out *GetClusterVolumeGroupListResponse) error {
	return h.ClusterManagerHandler.GetClusterVolumeGroupList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterVolumeGroupByUUID(ctx context.Context, in *GetClusterVolumeGroupByUUIDRequest, out *GetClusterVolumeGroupResponse) error {
	return h.ClusterManagerHandler.GetClusterVolumeGroupByUUID(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterVolumeGroup(ctx context.Context, in *CreateClusterVolumeGroupRequest, out *CreateClusterVolumeGroupResponse) error {
	return h.ClusterManagerHandler.CreateClusterVolumeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterVolumeGroup(ctx context.Context, in *DeleteClusterVolumeGroupRequest, out *DeleteClusterVolumeGroupResponse) error {
	return h.ClusterManagerHandler.DeleteClusterVolumeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateClusterVolumeGroup(ctx context.Context, in *UpdateClusterVolumeGroupRequest, out *UpdateClusterVolumeGroupResponse) error {
	return h.ClusterManagerHandler.UpdateClusterVolumeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterVolumeGroupSnapshot(ctx context.Context, in *CreateClusterVolumeGroupSnapshotRequest, out *CreateClusterVolumeGroupSnapshotResponse) error {
	return h.ClusterManagerHandler.CreateClusterVolumeGroupSnapshot(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterVolumeGroupSnapshotList(ctx context.Context, in *GetClusterVolumeGroupSnapshotListRequest, out *GetClusterVolumeGroupSnapshotListResponse) error {
	return h.ClusterManagerHandler.GetClusterVolumeGroupSnapshotList(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterVolumeGroupSnapshot(ctx context.Context, in *DeleteClusterVolumeGroupSnapshotRequest, out *DeleteClusterVolumeGroupSnapshotResponse) error {
	return h.ClusterManagerHandler.DeleteClusterVolumeGroupSnapshot(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterVolumeList(ctx context.Context, in *ClusterVolumeListRequest, out *ClusterVolumeListResponse) error {
	return h.ClusterManagerHandler.GetClusterVolumeList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterVolume(ctx context.Context, in *ClusterVolumeRequest, out *ClusterVolumeResponse) error {
	return h.ClusterManagerHandler.GetClusterVolume(ctx, in, out)
}

func (h *clusterManagerHandler) ImportClusterVolume(ctx context.Context, in *ImportClusterVolumeRequest, out *ImportClusterVolumeResponse) error {
	return h.ClusterManagerHandler.ImportClusterVolume(ctx, in, out)
}

func (h *clusterManagerHandler) CopyClusterVolume(ctx context.Context, in *CopyClusterVolumeRequest, out *CopyClusterVolumeResponse) error {
	return h.ClusterManagerHandler.CopyClusterVolume(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterVolumeCopy(ctx context.Context, in *DeleteClusterVolumeCopyRequest, out *DeleteClusterVolumeCopyResponse) error {
	return h.ClusterManagerHandler.DeleteClusterVolumeCopy(ctx, in, out)
}

func (h *clusterManagerHandler) UnmanageClusterVolume(ctx context.Context, in *UnmanageClusterVolumeRequest, out *UnmanageClusterVolumeResponse) error {
	return h.ClusterManagerHandler.UnmanageClusterVolume(ctx, in, out)
}

func (h *clusterManagerHandler) SyncClusterVolumeSnapshotList(ctx context.Context, in *SyncClusterVolumeSnapshotListRequest, out *SyncClusterVolumeSnapshotListResponse) error {
	return h.ClusterManagerHandler.SyncClusterVolumeSnapshotList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterInstanceList(ctx context.Context, in *ClusterInstanceListRequest, out *ClusterInstanceListResponse) error {
	return h.ClusterManagerHandler.GetClusterInstanceList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterInstance(ctx context.Context, in *ClusterInstanceRequest, out *ClusterInstanceResponse) error {
	return h.ClusterManagerHandler.GetClusterInstance(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterInstanceByUUID(ctx context.Context, in *ClusterInstanceByUUIDRequest, out *ClusterInstanceResponse) error {
	return h.ClusterManagerHandler.GetClusterInstanceByUUID(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterInstanceNumber(ctx context.Context, in *ClusterInstanceNumberRequest, out *ClusterInstanceNumberResponse) error {
	return h.ClusterManagerHandler.GetClusterInstanceNumber(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterInstance(ctx context.Context, in *CheckIsExistClusterInstanceRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterInstance(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterInstance(ctx context.Context, in *CreateClusterInstanceRequest, out *CreateClusterInstanceResponse) error {
	return h.ClusterManagerHandler.CreateClusterInstance(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterInstance(ctx context.Context, in *DeleteClusterInstanceRequest, out *DeleteClusterInstanceResponse) error {
	return h.ClusterManagerHandler.DeleteClusterInstance(ctx, in, out)
}

func (h *clusterManagerHandler) StopClusterInstance(ctx context.Context, in *StopClusterInstanceRequest, out *StopClusterInstanceResponse) error {
	return h.ClusterManagerHandler.StopClusterInstance(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterInstanceSpecByUUID(ctx context.Context, in *ClusterInstanceSpecByUUIDRequest, out *ClusterInstanceSpecResponse) error {
	return h.ClusterManagerHandler.GetClusterInstanceSpecByUUID(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterInstanceSpec(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterInstanceSpec(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterInstanceSpec(ctx context.Context, in *CreateClusterInstanceSpecRequest, out *CreateClusterInstanceSpecResponse) error {
	return h.ClusterManagerHandler.CreateClusterInstanceSpec(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterInstanceSpec(ctx context.Context, in *DeleteClusterInstanceSpecRequest, out *DeleteClusterInstanceSpecResponse) error {
	return h.ClusterManagerHandler.DeleteClusterInstanceSpec(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterKeyPair(ctx context.Context, in *ClusterKeyPairRequest, out *ClusterKeyPairResponse) error {
	return h.ClusterManagerHandler.GetClusterKeyPair(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterKeypair(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterKeypair(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterKeypair(ctx context.Context, in *CreateClusterKeypairRequest, out *CreateClusterKeypairResponse) error {
	return h.ClusterManagerHandler.CreateClusterKeypair(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterKeypair(ctx context.Context, in *DeleteClusterKeypairRequest, out *DeleteClusterKeypairResponse) error {
	return h.ClusterManagerHandler.DeleteClusterKeypair(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterInstanceUserScript(ctx context.Context, in *ClusterInstanceUserScriptRequest, out *ClusterInstanceUserScriptResponse) error {
	return h.ClusterManagerHandler.GetClusterInstanceUserScript(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateClusterInstanceUserScript(ctx context.Context, in *UpdateClusterInstanceUserScriptRequest, out *UpdateClusterInstanceUserScriptResponse) error {
	return h.ClusterManagerHandler.UpdateClusterInstanceUserScript(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterSecurityGroup(ctx context.Context, in *CreateClusterSecurityGroupRequest, out *ClusterSecurityGroupResponse) error {
	return h.ClusterManagerHandler.CreateClusterSecurityGroup(ctx, in, out)
}

func (h *clusterManagerHandler) CreateClusterSecurityGroupRule(ctx context.Context, in *CreateClusterSecurityGroupRuleRequest, out *ClusterSecurityGroupRuleResponse) error {
	return h.ClusterManagerHandler.CreateClusterSecurityGroupRule(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterSecurityGroup(ctx context.Context, in *DeleteClusterSecurityGroupRequest, out *DeleteClusterSecurityGroupResponse) error {
	return h.ClusterManagerHandler.DeleteClusterSecurityGroup(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterSecurityGroupList(ctx context.Context, in *ClusterSecurityGroupListRequest, out *ClusterSecurityGroupListResponse) error {
	return h.ClusterManagerHandler.GetClusterSecurityGroupList(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterSecurityGroup(ctx context.Context, in *ClusterSecurityGroupRequest, out *ClusterSecurityGroupResponse) error {
	return h.ClusterManagerHandler.GetClusterSecurityGroup(ctx, in, out)
}

func (h *clusterManagerHandler) CheckIsExistClusterSecurityGroup(ctx context.Context, in *CheckIsExistByNameRequest, out *CheckIsExistResponse) error {
	return h.ClusterManagerHandler.CheckIsExistClusterSecurityGroup(ctx, in, out)
}
