// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/identity.proto

package identity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Identity service

func NewIdentityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Identity.GetUser",
			Path:    []string{"/identity/users/{user_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.AddUser",
			Path:    []string{"/identity/users"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.UpdateUser",
			Path:    []string{"/identity/users/{user_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.DeleteUser",
			Path:    []string{"/identity/users/{user_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetUsers",
			Path:    []string{"/identity/users"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.UpdateUserPassword",
			Path:    []string{"/identity/users/{user_id}/password"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.ResetUserPassword",
			Path:    []string{"/identity/users/{user_id}/password-reset"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetGroups",
			Path:    []string{"/identity/groups"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetGroup",
			Path:    []string{"/identity/groups/{group_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.AddGroup",
			Path:    []string{"/identity/groups"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.UpdateGroup",
			Path:    []string{"/identity/groups/{group_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.DeleteGroup",
			Path:    []string{"/identity/groups/{group_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.SetGroupUsers",
			Path:    []string{"/identity/groups/{group_id}/users"},
			Method:  []string{"PUT"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetRoles",
			Path:    []string{"/identity/roles"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.Login",
			Path:    []string{"/identity/auth"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.Logout",
			Path:    []string{"/identity/auth"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.VerifySession",
			Path:    []string{"/identity/sessions/check"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.RevokeSession",
			Path:    []string{"/identity/sessions/{session_key}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.SetConfig",
			Path:    []string{"/identity/config"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetConfig",
			Path:    []string{"/identity/config"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetTenants",
			Path:    []string{"/tenants"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.AddTenant",
			Path:    []string{"/tenants"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.GetTenant",
			Path:    []string{"/tenants/{tenant_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.UpdateTenant",
			Path:    []string{"/tenants/{tenant_id}"},
			Method:  []string{"PATCH"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.ActivateTenant",
			Path:    []string{"/tenants/{tenant_id}/activate"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Identity.DeactivateTenant",
			Path:    []string{"/tenants/{tenant_id}/deactivate"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Identity service

type IdentityService interface {
	// 사용자의 상세정보를 반환한다.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*UserResponse, error)
	// 간소화 된 사용자 상세정보를 반환한다.
	GetSimpleUser(ctx context.Context, in *GetSimpleUserRequest, opts ...client.CallOption) (*SimpleUserResponse, error)
	// 사용자 계정을 추가한다.
	AddUser(ctx context.Context, in *AddUserRequest, opts ...client.CallOption) (*AddUserResponse, error)
	// 사용자 계정을 수정한다.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UserResponse, error)
	// 사용자 계정을 삭제한다.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*MessageResponse, error)
	// 사용자 계정 목록을 반환한다.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	// 사용자 비밀번호를 수정한다.
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...client.CallOption) (*MessageResponse, error)
	// 사용자 비밀번호를 초기화한다.
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...client.CallOption) (*UserPasswordResponse, error)
	// 사용자 그룹 목록을 조회한다.
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...client.CallOption) (*GroupsResponse, error)
	// 사용자 그룹을 조회한다.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...client.CallOption) (*GroupResponse, error)
	// 사용자 그룹을 추가한다.
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...client.CallOption) (*GroupResponse, error)
	// 사용자 그룹을 수정한다.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...client.CallOption) (*GroupResponse, error)
	// 사용자 그룹을 삭제한다.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...client.CallOption) (*MessageResponse, error)
	// 사용자 그룹 사용자 목록 수정
	SetGroupUsers(ctx context.Context, in *SetGroupUsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	// 솔루션 역할 목록을 조회한다.
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...client.CallOption) (*RolesResponse, error)
	// 로그인
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*UserResponse, error)
	// 로그아웃
	Logout(ctx context.Context, in *Empty, opts ...client.CallOption) (*MessageResponse, error)
	// 세션 유효성 확인
	VerifySession(ctx context.Context, in *Empty, opts ...client.CallOption) (*UserResponse, error)
	// 강제 로그아웃
	RevokeSession(ctx context.Context, in *RevokeSessionRequest, opts ...client.CallOption) (*MessageResponse, error)
	//  사용자 인증 설정 변경
	SetConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	// 사용자 인증 설정 조회
	GetConfig(ctx context.Context, in *Empty, opts ...client.CallOption) (*ConfigResponse, error)
	// 사용자 인가 여부 확인
	CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...client.CallOption) (*MessageResponse, error)
	// 테넌트 목록 조회
	GetTenants(ctx context.Context, in *TenantsRequest, opts ...client.CallOption) (*TenantsResponse, error)
	// 테넌트 추가
	AddTenant(ctx context.Context, in *AddTenantRequest, opts ...client.CallOption) (*TenantResponse, error)
	// 테넌트 상세 조회
	GetTenant(ctx context.Context, in *TenantRequest, opts ...client.CallOption) (*TenantResponse, error)
	// 테넌트 정보 수정
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...client.CallOption) (*TenantResponse, error)
	//  테넌트 활성화
	ActivateTenant(ctx context.Context, in *TenantRequest, opts ...client.CallOption) (*TenantResponse, error)
	// 테넌트 비활성화
	DeactivateTenant(ctx context.Context, in *TenantRequest, opts ...client.CallOption) (*TenantResponse, error)
}

type identityService struct {
	c    client.Client
	name string
}

func NewIdentityService(name string, c client.Client) IdentityService {
	return &identityService{
		c:    c,
		name: name,
	}
}

func (c *identityService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetSimpleUser(ctx context.Context, in *GetSimpleUserRequest, opts ...client.CallOption) (*SimpleUserResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetSimpleUser", in)
	out := new(SimpleUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) AddUser(ctx context.Context, in *AddUserRequest, opts ...client.CallOption) (*AddUserResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.AddUser", in)
	out := new(AddUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.DeleteUser", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.UpdateUserPassword", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...client.CallOption) (*UserPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.ResetUserPassword", in)
	out := new(UserPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...client.CallOption) (*GroupsResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetGroups", in)
	out := new(GroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...client.CallOption) (*GroupResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetGroup", in)
	out := new(GroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...client.CallOption) (*GroupResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.AddGroup", in)
	out := new(GroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...client.CallOption) (*GroupResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.UpdateGroup", in)
	out := new(GroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.DeleteGroup", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) SetGroupUsers(ctx context.Context, in *SetGroupUsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.SetGroupUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...client.CallOption) (*RolesResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetRoles", in)
	out := new(RolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.Login", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) Logout(ctx context.Context, in *Empty, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.Logout", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) VerifySession(ctx context.Context, in *Empty, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.VerifySession", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) RevokeSession(ctx context.Context, in *RevokeSessionRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.RevokeSession", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) SetConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.SetConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetConfig(ctx context.Context, in *Empty, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.CheckAuthorization", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetTenants(ctx context.Context, in *TenantsRequest, opts ...client.CallOption) (*TenantsResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetTenants", in)
	out := new(TenantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) AddTenant(ctx context.Context, in *AddTenantRequest, opts ...client.CallOption) (*TenantResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.AddTenant", in)
	out := new(TenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetTenant(ctx context.Context, in *TenantRequest, opts ...client.CallOption) (*TenantResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.GetTenant", in)
	out := new(TenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...client.CallOption) (*TenantResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.UpdateTenant", in)
	out := new(TenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) ActivateTenant(ctx context.Context, in *TenantRequest, opts ...client.CallOption) (*TenantResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.ActivateTenant", in)
	out := new(TenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) DeactivateTenant(ctx context.Context, in *TenantRequest, opts ...client.CallOption) (*TenantResponse, error) {
	req := c.c.NewRequest(c.name, "Identity.DeactivateTenant", in)
	out := new(TenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Identity service

type IdentityHandler interface {
	// 사용자의 상세정보를 반환한다.
	GetUser(context.Context, *GetUserRequest, *UserResponse) error
	// 간소화 된 사용자 상세정보를 반환한다.
	GetSimpleUser(context.Context, *GetSimpleUserRequest, *SimpleUserResponse) error
	// 사용자 계정을 추가한다.
	AddUser(context.Context, *AddUserRequest, *AddUserResponse) error
	// 사용자 계정을 수정한다.
	UpdateUser(context.Context, *UpdateUserRequest, *UserResponse) error
	// 사용자 계정을 삭제한다.
	DeleteUser(context.Context, *DeleteUserRequest, *MessageResponse) error
	// 사용자 계정 목록을 반환한다.
	GetUsers(context.Context, *GetUsersRequest, *UsersResponse) error
	// 사용자 비밀번호를 수정한다.
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest, *MessageResponse) error
	// 사용자 비밀번호를 초기화한다.
	ResetUserPassword(context.Context, *ResetUserPasswordRequest, *UserPasswordResponse) error
	// 사용자 그룹 목록을 조회한다.
	GetGroups(context.Context, *GetGroupsRequest, *GroupsResponse) error
	// 사용자 그룹을 조회한다.
	GetGroup(context.Context, *GetGroupRequest, *GroupResponse) error
	// 사용자 그룹을 추가한다.
	AddGroup(context.Context, *AddGroupRequest, *GroupResponse) error
	// 사용자 그룹을 수정한다.
	UpdateGroup(context.Context, *UpdateGroupRequest, *GroupResponse) error
	// 사용자 그룹을 삭제한다.
	DeleteGroup(context.Context, *DeleteGroupRequest, *MessageResponse) error
	// 사용자 그룹 사용자 목록 수정
	SetGroupUsers(context.Context, *SetGroupUsersRequest, *UsersResponse) error
	// 솔루션 역할 목록을 조회한다.
	GetRoles(context.Context, *GetRolesRequest, *RolesResponse) error
	// 로그인
	Login(context.Context, *LoginRequest, *UserResponse) error
	// 로그아웃
	Logout(context.Context, *Empty, *MessageResponse) error
	// 세션 유효성 확인
	VerifySession(context.Context, *Empty, *UserResponse) error
	// 강제 로그아웃
	RevokeSession(context.Context, *RevokeSessionRequest, *MessageResponse) error
	//  사용자 인증 설정 변경
	SetConfig(context.Context, *ConfigRequest, *ConfigResponse) error
	// 사용자 인증 설정 조회
	GetConfig(context.Context, *Empty, *ConfigResponse) error
	// 사용자 인가 여부 확인
	CheckAuthorization(context.Context, *CheckAuthorizationRequest, *MessageResponse) error
	// 테넌트 목록 조회
	GetTenants(context.Context, *TenantsRequest, *TenantsResponse) error
	// 테넌트 추가
	AddTenant(context.Context, *AddTenantRequest, *TenantResponse) error
	// 테넌트 상세 조회
	GetTenant(context.Context, *TenantRequest, *TenantResponse) error
	// 테넌트 정보 수정
	UpdateTenant(context.Context, *UpdateTenantRequest, *TenantResponse) error
	//  테넌트 활성화
	ActivateTenant(context.Context, *TenantRequest, *TenantResponse) error
	// 테넌트 비활성화
	DeactivateTenant(context.Context, *TenantRequest, *TenantResponse) error
}

func RegisterIdentityHandler(s server.Server, hdlr IdentityHandler, opts ...server.HandlerOption) error {
	type identity interface {
		GetUser(ctx context.Context, in *GetUserRequest, out *UserResponse) error
		GetSimpleUser(ctx context.Context, in *GetSimpleUserRequest, out *SimpleUserResponse) error
		AddUser(ctx context.Context, in *AddUserRequest, out *AddUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *MessageResponse) error
		GetUsers(ctx context.Context, in *GetUsersRequest, out *UsersResponse) error
		UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, out *MessageResponse) error
		ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, out *UserPasswordResponse) error
		GetGroups(ctx context.Context, in *GetGroupsRequest, out *GroupsResponse) error
		GetGroup(ctx context.Context, in *GetGroupRequest, out *GroupResponse) error
		AddGroup(ctx context.Context, in *AddGroupRequest, out *GroupResponse) error
		UpdateGroup(ctx context.Context, in *UpdateGroupRequest, out *GroupResponse) error
		DeleteGroup(ctx context.Context, in *DeleteGroupRequest, out *MessageResponse) error
		SetGroupUsers(ctx context.Context, in *SetGroupUsersRequest, out *UsersResponse) error
		GetRoles(ctx context.Context, in *GetRolesRequest, out *RolesResponse) error
		Login(ctx context.Context, in *LoginRequest, out *UserResponse) error
		Logout(ctx context.Context, in *Empty, out *MessageResponse) error
		VerifySession(ctx context.Context, in *Empty, out *UserResponse) error
		RevokeSession(ctx context.Context, in *RevokeSessionRequest, out *MessageResponse) error
		SetConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		GetConfig(ctx context.Context, in *Empty, out *ConfigResponse) error
		CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, out *MessageResponse) error
		GetTenants(ctx context.Context, in *TenantsRequest, out *TenantsResponse) error
		AddTenant(ctx context.Context, in *AddTenantRequest, out *TenantResponse) error
		GetTenant(ctx context.Context, in *TenantRequest, out *TenantResponse) error
		UpdateTenant(ctx context.Context, in *UpdateTenantRequest, out *TenantResponse) error
		ActivateTenant(ctx context.Context, in *TenantRequest, out *TenantResponse) error
		DeactivateTenant(ctx context.Context, in *TenantRequest, out *TenantResponse) error
	}
	type Identity struct {
		identity
	}
	h := &identityHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetUser",
		Path:    []string{"/identity/users/{user_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.AddUser",
		Path:    []string{"/identity/users"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.UpdateUser",
		Path:    []string{"/identity/users/{user_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.DeleteUser",
		Path:    []string{"/identity/users/{user_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetUsers",
		Path:    []string{"/identity/users"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.UpdateUserPassword",
		Path:    []string{"/identity/users/{user_id}/password"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.ResetUserPassword",
		Path:    []string{"/identity/users/{user_id}/password-reset"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetGroups",
		Path:    []string{"/identity/groups"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetGroup",
		Path:    []string{"/identity/groups/{group_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.AddGroup",
		Path:    []string{"/identity/groups"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.UpdateGroup",
		Path:    []string{"/identity/groups/{group_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.DeleteGroup",
		Path:    []string{"/identity/groups/{group_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.SetGroupUsers",
		Path:    []string{"/identity/groups/{group_id}/users"},
		Method:  []string{"PUT"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetRoles",
		Path:    []string{"/identity/roles"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.Login",
		Path:    []string{"/identity/auth"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.Logout",
		Path:    []string{"/identity/auth"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.VerifySession",
		Path:    []string{"/identity/sessions/check"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.RevokeSession",
		Path:    []string{"/identity/sessions/{session_key}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.SetConfig",
		Path:    []string{"/identity/config"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetConfig",
		Path:    []string{"/identity/config"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetTenants",
		Path:    []string{"/tenants"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.AddTenant",
		Path:    []string{"/tenants"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.GetTenant",
		Path:    []string{"/tenants/{tenant_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.UpdateTenant",
		Path:    []string{"/tenants/{tenant_id}"},
		Method:  []string{"PATCH"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.ActivateTenant",
		Path:    []string{"/tenants/{tenant_id}/activate"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Identity.DeactivateTenant",
		Path:    []string{"/tenants/{tenant_id}/deactivate"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Identity{h}, opts...))
}

type identityHandler struct {
	IdentityHandler
}

func (h *identityHandler) GetUser(ctx context.Context, in *GetUserRequest, out *UserResponse) error {
	return h.IdentityHandler.GetUser(ctx, in, out)
}

func (h *identityHandler) GetSimpleUser(ctx context.Context, in *GetSimpleUserRequest, out *SimpleUserResponse) error {
	return h.IdentityHandler.GetSimpleUser(ctx, in, out)
}

func (h *identityHandler) AddUser(ctx context.Context, in *AddUserRequest, out *AddUserResponse) error {
	return h.IdentityHandler.AddUser(ctx, in, out)
}

func (h *identityHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UserResponse) error {
	return h.IdentityHandler.UpdateUser(ctx, in, out)
}

func (h *identityHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *MessageResponse) error {
	return h.IdentityHandler.DeleteUser(ctx, in, out)
}

func (h *identityHandler) GetUsers(ctx context.Context, in *GetUsersRequest, out *UsersResponse) error {
	return h.IdentityHandler.GetUsers(ctx, in, out)
}

func (h *identityHandler) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, out *MessageResponse) error {
	return h.IdentityHandler.UpdateUserPassword(ctx, in, out)
}

func (h *identityHandler) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, out *UserPasswordResponse) error {
	return h.IdentityHandler.ResetUserPassword(ctx, in, out)
}

func (h *identityHandler) GetGroups(ctx context.Context, in *GetGroupsRequest, out *GroupsResponse) error {
	return h.IdentityHandler.GetGroups(ctx, in, out)
}

func (h *identityHandler) GetGroup(ctx context.Context, in *GetGroupRequest, out *GroupResponse) error {
	return h.IdentityHandler.GetGroup(ctx, in, out)
}

func (h *identityHandler) AddGroup(ctx context.Context, in *AddGroupRequest, out *GroupResponse) error {
	return h.IdentityHandler.AddGroup(ctx, in, out)
}

func (h *identityHandler) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, out *GroupResponse) error {
	return h.IdentityHandler.UpdateGroup(ctx, in, out)
}

func (h *identityHandler) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, out *MessageResponse) error {
	return h.IdentityHandler.DeleteGroup(ctx, in, out)
}

func (h *identityHandler) SetGroupUsers(ctx context.Context, in *SetGroupUsersRequest, out *UsersResponse) error {
	return h.IdentityHandler.SetGroupUsers(ctx, in, out)
}

func (h *identityHandler) GetRoles(ctx context.Context, in *GetRolesRequest, out *RolesResponse) error {
	return h.IdentityHandler.GetRoles(ctx, in, out)
}

func (h *identityHandler) Login(ctx context.Context, in *LoginRequest, out *UserResponse) error {
	return h.IdentityHandler.Login(ctx, in, out)
}

func (h *identityHandler) Logout(ctx context.Context, in *Empty, out *MessageResponse) error {
	return h.IdentityHandler.Logout(ctx, in, out)
}

func (h *identityHandler) VerifySession(ctx context.Context, in *Empty, out *UserResponse) error {
	return h.IdentityHandler.VerifySession(ctx, in, out)
}

func (h *identityHandler) RevokeSession(ctx context.Context, in *RevokeSessionRequest, out *MessageResponse) error {
	return h.IdentityHandler.RevokeSession(ctx, in, out)
}

func (h *identityHandler) SetConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.IdentityHandler.SetConfig(ctx, in, out)
}

func (h *identityHandler) GetConfig(ctx context.Context, in *Empty, out *ConfigResponse) error {
	return h.IdentityHandler.GetConfig(ctx, in, out)
}

func (h *identityHandler) CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, out *MessageResponse) error {
	return h.IdentityHandler.CheckAuthorization(ctx, in, out)
}

func (h *identityHandler) GetTenants(ctx context.Context, in *TenantsRequest, out *TenantsResponse) error {
	return h.IdentityHandler.GetTenants(ctx, in, out)
}

func (h *identityHandler) AddTenant(ctx context.Context, in *AddTenantRequest, out *TenantResponse) error {
	return h.IdentityHandler.AddTenant(ctx, in, out)
}

func (h *identityHandler) GetTenant(ctx context.Context, in *TenantRequest, out *TenantResponse) error {
	return h.IdentityHandler.GetTenant(ctx, in, out)
}

func (h *identityHandler) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, out *TenantResponse) error {
	return h.IdentityHandler.UpdateTenant(ctx, in, out)
}

func (h *identityHandler) ActivateTenant(ctx context.Context, in *TenantRequest, out *TenantResponse) error {
	return h.IdentityHandler.ActivateTenant(ctx, in, out)
}

func (h *identityHandler) DeactivateTenant(ctx context.Context, in *TenantRequest, out *TenantResponse) error {
	return h.IdentityHandler.DeactivateTenant(ctx, in, out)
}
