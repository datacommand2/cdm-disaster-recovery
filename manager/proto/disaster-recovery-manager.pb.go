// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: proto/disaster-recovery-manager.proto

package drms

import (
	proto1 "github.com/datacommand2/cdm-center/services/cluster-manager/proto"
	proto2 "github.com/datacommand2/cdm-cloud/services/identity/proto"
	proto3 "github.com/datacommand2/cdm-cloud/services/scheduler/proto"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Contents string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Message) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	TotalPage  *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	TotalItems *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{2}
}

func (x *Pagination) GetPage() *wrappers.UInt64Value {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *Pagination) GetTotalPage() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalPage
	}
	return nil
}

func (x *Pagination) GetTotalItems() *wrappers.UInt64Value {
	if x != nil {
		return x.TotalItems
	}
	return nil
}

type CheckDeletableClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CheckDeletableClusterRequest) Reset() {
	*x = CheckDeletableClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeletableClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeletableClusterRequest) ProtoMessage() {}

func (x *CheckDeletableClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeletableClusterRequest.ProtoReflect.Descriptor instead.
func (*CheckDeletableClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{3}
}

func (x *CheckDeletableClusterRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type CheckDeletableClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deletable bool     `protobuf:"varint,1,opt,name=deletable,proto3" json:"deletable,omitempty"`
	Message   *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckDeletableClusterResponse) Reset() {
	*x = CheckDeletableClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeletableClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeletableClusterResponse) ProtoMessage() {}

func (x *CheckDeletableClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeletableClusterResponse.ProtoReflect.Descriptor instead.
func (*CheckDeletableClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{4}
}

func (x *CheckDeletableClusterResponse) GetDeletable() bool {
	if x != nil {
		return x.Deletable
	}
	return false
}

func (x *CheckDeletableClusterResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UnprotectedInstanceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances  []*proto1.ClusterInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	Pagination *Pagination               `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UnprotectedInstanceListResponse) Reset() {
	*x = UnprotectedInstanceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectedInstanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectedInstanceListResponse) ProtoMessage() {}

func (x *UnprotectedInstanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectedInstanceListResponse.ProtoReflect.Descriptor instead.
func (*UnprotectedInstanceListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{5}
}

func (x *UnprotectedInstanceListResponse) GetInstances() []*proto1.ClusterInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *UnprotectedInstanceListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *UnprotectedInstanceListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UnprotectedInstanceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                     *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                    *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ClusterId                 uint64                `protobuf:"varint,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterTenantId           uint64                `protobuf:"varint,4,opt,name=cluster_tenant_id,json=clusterTenantId,proto3" json:"cluster_tenant_id,omitempty"`
	ClusterAvailabilityZoneId uint64                `protobuf:"varint,5,opt,name=cluster_availability_zone_id,json=clusterAvailabilityZoneId,proto3" json:"cluster_availability_zone_id,omitempty"`
	ClusterHypervisorId       uint64                `protobuf:"varint,6,opt,name=cluster_hypervisor_id,json=clusterHypervisorId,proto3" json:"cluster_hypervisor_id,omitempty"`
	Name                      string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnprotectedInstanceListRequest) Reset() {
	*x = UnprotectedInstanceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectedInstanceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectedInstanceListRequest) ProtoMessage() {}

func (x *UnprotectedInstanceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectedInstanceListRequest.ProtoReflect.Descriptor instead.
func (*UnprotectedInstanceListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{6}
}

func (x *UnprotectedInstanceListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *UnprotectedInstanceListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *UnprotectedInstanceListRequest) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UnprotectedInstanceListRequest) GetClusterTenantId() uint64 {
	if x != nil {
		return x.ClusterTenantId
	}
	return 0
}

func (x *UnprotectedInstanceListRequest) GetClusterAvailabilityZoneId() uint64 {
	if x != nil {
		return x.ClusterAvailabilityZoneId
	}
	return 0
}

func (x *UnprotectedInstanceListRequest) GetClusterHypervisorId() uint64 {
	if x != nil {
		return x.ClusterHypervisorId
	}
	return 0
}

func (x *UnprotectedInstanceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RecoveryPlanAbnormalStateReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warning   []*Message `protobuf:"bytes,1,rep,name=warning,proto3" json:"warning,omitempty"`
	Critical  []*Message `protobuf:"bytes,2,rep,name=critical,proto3" json:"critical,omitempty"`
	Emergency []*Message `protobuf:"bytes,3,rep,name=emergency,proto3" json:"emergency,omitempty"`
	Mirroring []*Message `protobuf:"bytes,4,rep,name=mirroring,proto3" json:"mirroring,omitempty"`
}

func (x *RecoveryPlanAbnormalStateReason) Reset() {
	*x = RecoveryPlanAbnormalStateReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlanAbnormalStateReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlanAbnormalStateReason) ProtoMessage() {}

func (x *RecoveryPlanAbnormalStateReason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlanAbnormalStateReason.ProtoReflect.Descriptor instead.
func (*RecoveryPlanAbnormalStateReason) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{7}
}

func (x *RecoveryPlanAbnormalStateReason) GetWarning() []*Message {
	if x != nil {
		return x.Warning
	}
	return nil
}

func (x *RecoveryPlanAbnormalStateReason) GetCritical() []*Message {
	if x != nil {
		return x.Critical
	}
	return nil
}

func (x *RecoveryPlanAbnormalStateReason) GetEmergency() []*Message {
	if x != nil {
		return x.Emergency
	}
	return nil
}

func (x *RecoveryPlanAbnormalStateReason) GetMirroring() []*Message {
	if x != nil {
		return x.Mirroring
	}
	return nil
}

type ProtectionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerGroup                 *proto1.Group                    `protobuf:"bytes,2,opt,name=owner_group,json=ownerGroup,proto3" json:"owner_group,omitempty"`
	ProtectionCluster          *proto1.Cluster                  `protobuf:"bytes,3,opt,name=protection_cluster,json=protectionCluster,proto3" json:"protection_cluster,omitempty"`
	Name                       string                           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Remarks                    string                           `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	RecoveryPointObjectiveType string                           `protobuf:"bytes,6,opt,name=recovery_point_objective_type,json=recoveryPointObjectiveType,proto3" json:"recovery_point_objective_type,omitempty"`
	RecoveryPointObjective     uint32                           `protobuf:"varint,7,opt,name=recovery_point_objective,json=recoveryPointObjective,proto3" json:"recovery_point_objective,omitempty"`
	RecoveryTimeObjective      uint32                           `protobuf:"varint,8,opt,name=recovery_time_objective,json=recoveryTimeObjective,proto3" json:"recovery_time_objective,omitempty"`
	SnapshotIntervalType       string                           `protobuf:"bytes,9,opt,name=snapshot_interval_type,json=snapshotIntervalType,proto3" json:"snapshot_interval_type,omitempty"`
	SnapshotInterval           uint32                           `protobuf:"varint,10,opt,name=snapshot_interval,json=snapshotInterval,proto3" json:"snapshot_interval,omitempty"`
	StateCode                  string                           `protobuf:"bytes,11,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	AbnormalStateReasons       *RecoveryPlanAbnormalStateReason `protobuf:"bytes,12,opt,name=abnormal_state_reasons,json=abnormalStateReasons,proto3" json:"abnormal_state_reasons,omitempty"`
	Instances                  []*proto1.ClusterInstance        `protobuf:"bytes,13,rep,name=instances,proto3" json:"instances,omitempty"`
	CreatedAt                  int64                            `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                  int64                            `protobuf:"varint,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Updatable                  bool                             `protobuf:"varint,16,opt,name=updatable,proto3" json:"updatable,omitempty"`
}

func (x *ProtectionGroup) Reset() {
	*x = ProtectionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroup) ProtoMessage() {}

func (x *ProtectionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroup.ProtoReflect.Descriptor instead.
func (*ProtectionGroup) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{8}
}

func (x *ProtectionGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtectionGroup) GetOwnerGroup() *proto1.Group {
	if x != nil {
		return x.OwnerGroup
	}
	return nil
}

func (x *ProtectionGroup) GetProtectionCluster() *proto1.Cluster {
	if x != nil {
		return x.ProtectionCluster
	}
	return nil
}

func (x *ProtectionGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtectionGroup) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ProtectionGroup) GetRecoveryPointObjectiveType() string {
	if x != nil {
		return x.RecoveryPointObjectiveType
	}
	return ""
}

func (x *ProtectionGroup) GetRecoveryPointObjective() uint32 {
	if x != nil {
		return x.RecoveryPointObjective
	}
	return 0
}

func (x *ProtectionGroup) GetRecoveryTimeObjective() uint32 {
	if x != nil {
		return x.RecoveryTimeObjective
	}
	return 0
}

func (x *ProtectionGroup) GetSnapshotIntervalType() string {
	if x != nil {
		return x.SnapshotIntervalType
	}
	return ""
}

func (x *ProtectionGroup) GetSnapshotInterval() uint32 {
	if x != nil {
		return x.SnapshotInterval
	}
	return 0
}

func (x *ProtectionGroup) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *ProtectionGroup) GetAbnormalStateReasons() *RecoveryPlanAbnormalStateReason {
	if x != nil {
		return x.AbnormalStateReasons
	}
	return nil
}

func (x *ProtectionGroup) GetInstances() []*proto1.ClusterInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ProtectionGroup) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProtectionGroup) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProtectionGroup) GetUpdatable() bool {
	if x != nil {
		return x.Updatable
	}
	return false
}

type ProtectionGroupListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups     []*ProtectionGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Pagination *Pagination        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProtectionGroupListResponse) Reset() {
	*x = ProtectionGroupListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupListResponse) ProtoMessage() {}

func (x *ProtectionGroupListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupListResponse.ProtoReflect.Descriptor instead.
func (*ProtectionGroupListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{9}
}

func (x *ProtectionGroupListResponse) GetGroups() []*ProtectionGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ProtectionGroupListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ProtectionGroupListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ProtectionGroupListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                     *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                    *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProtectionClusterId       uint64                `protobuf:"varint,3,opt,name=protection_cluster_id,json=protectionClusterId,proto3" json:"protection_cluster_id,omitempty"`
	ProtectionClusterTypeCode string                `protobuf:"bytes,4,opt,name=protection_cluster_type_code,json=protectionClusterTypeCode,proto3" json:"protection_cluster_type_code,omitempty"`
	OwnerGroupId              uint64                `protobuf:"varint,5,opt,name=owner_group_id,json=ownerGroupId,proto3" json:"owner_group_id,omitempty"`
	Name                      string                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProtectionGroupListRequest) Reset() {
	*x = ProtectionGroupListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupListRequest) ProtoMessage() {}

func (x *ProtectionGroupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupListRequest.ProtoReflect.Descriptor instead.
func (*ProtectionGroupListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{10}
}

func (x *ProtectionGroupListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ProtectionGroupListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ProtectionGroupListRequest) GetProtectionClusterId() uint64 {
	if x != nil {
		return x.ProtectionClusterId
	}
	return 0
}

func (x *ProtectionGroupListRequest) GetProtectionClusterTypeCode() string {
	if x != nil {
		return x.ProtectionClusterTypeCode
	}
	return ""
}

func (x *ProtectionGroupListRequest) GetOwnerGroupId() uint64 {
	if x != nil {
		return x.OwnerGroupId
	}
	return 0
}

func (x *ProtectionGroupListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProtectionGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   *ProtectionGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Message *Message         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProtectionGroupResponse) Reset() {
	*x = ProtectionGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupResponse) ProtoMessage() {}

func (x *ProtectionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupResponse.ProtoReflect.Descriptor instead.
func (*ProtectionGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ProtectionGroupResponse) GetGroup() *ProtectionGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ProtectionGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type AddProtectionGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *ProtectionGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *AddProtectionGroupRequest) Reset() {
	*x = AddProtectionGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProtectionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProtectionGroupRequest) ProtoMessage() {}

func (x *AddProtectionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProtectionGroupRequest.ProtoReflect.Descriptor instead.
func (*AddProtectionGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{12}
}

func (x *AddProtectionGroupRequest) GetGroup() *ProtectionGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type ProtectionGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ProtectionGroupRequest) Reset() {
	*x = ProtectionGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupRequest) ProtoMessage() {}

func (x *ProtectionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupRequest.ProtoReflect.Descriptor instead.
func (*ProtectionGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ProtectionGroupRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UpdateProtectionGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64           `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Group   *ProtectionGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UpdateProtectionGroupRequest) Reset() {
	*x = UpdateProtectionGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProtectionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProtectionGroupRequest) ProtoMessage() {}

func (x *UpdateProtectionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProtectionGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateProtectionGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateProtectionGroupRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateProtectionGroupRequest) GetGroup() *ProtectionGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteProtectionGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteProtectionGroupResponse) Reset() {
	*x = DeleteProtectionGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProtectionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProtectionGroupResponse) ProtoMessage() {}

func (x *DeleteProtectionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProtectionGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteProtectionGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteProtectionGroupResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteProtectionGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteProtectionGroupRequest) Reset() {
	*x = DeleteProtectionGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProtectionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProtectionGroupRequest) ProtoMessage() {}

func (x *DeleteProtectionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProtectionGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteProtectionGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteProtectionGroupRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ProtectionGroupSnapshotListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ProtectionGroupSnapshotListRequest) Reset() {
	*x = ProtectionGroupSnapshotListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSnapshotListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSnapshotListRequest) ProtoMessage() {}

func (x *ProtectionGroupSnapshotListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSnapshotListRequest.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSnapshotListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{17}
}

func (x *ProtectionGroupSnapshotListRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ProtectionGroupSnapshotListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*ProtectionGroupSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	Message   *Message                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProtectionGroupSnapshotListResponse) Reset() {
	*x = ProtectionGroupSnapshotListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSnapshotListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSnapshotListResponse) ProtoMessage() {}

func (x *ProtectionGroupSnapshotListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSnapshotListResponse.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSnapshotListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{18}
}

func (x *ProtectionGroupSnapshotListResponse) GetSnapshots() []*ProtectionGroupSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *ProtectionGroupSnapshotListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ProtectionGroupSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ProtectionGroupSnapshotRequest) Reset() {
	*x = ProtectionGroupSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSnapshotRequest) ProtoMessage() {}

func (x *ProtectionGroupSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSnapshotRequest.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{19}
}

func (x *ProtectionGroupSnapshotRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ProtectionGroupSnapshotMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProtectionGroupSnapshotMessageResponse) Reset() {
	*x = ProtectionGroupSnapshotMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSnapshotMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSnapshotMessageResponse) ProtoMessage() {}

func (x *ProtectionGroupSnapshotMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSnapshotMessageResponse.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSnapshotMessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{20}
}

func (x *ProtectionGroupSnapshotMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteProtectionGroupSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SnapshotId uint64 `protobuf:"varint,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *DeleteProtectionGroupSnapshotRequest) Reset() {
	*x = DeleteProtectionGroupSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProtectionGroupSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProtectionGroupSnapshotRequest) ProtoMessage() {}

func (x *DeleteProtectionGroupSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProtectionGroupSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteProtectionGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteProtectionGroupSnapshotRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteProtectionGroupSnapshotRequest) GetSnapshotId() uint64 {
	if x != nil {
		return x.SnapshotId
	}
	return 0
}

type DeleteProtectionGroupSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteProtectionGroupSnapshotResponse) Reset() {
	*x = DeleteProtectionGroupSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProtectionGroupSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProtectionGroupSnapshotResponse) ProtoMessage() {}

func (x *DeleteProtectionGroupSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProtectionGroupSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteProtectionGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteProtectionGroupSnapshotResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ProtectionCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Groups []*ProtectionGroup `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ProtectionCluster) Reset() {
	*x = ProtectionCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionCluster) ProtoMessage() {}

func (x *ProtectionCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionCluster.ProtoReflect.Descriptor instead.
func (*ProtectionCluster) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{23}
}

func (x *ProtectionCluster) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtectionCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtectionCluster) GetGroups() []*ProtectionGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*ProtectionCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{24}
}

func (x *History) GetClusters() []*ProtectionCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ProtectionGroupHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History *History `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProtectionGroupHistoryResponse) Reset() {
	*x = ProtectionGroupHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupHistoryResponse) ProtoMessage() {}

func (x *ProtectionGroupHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupHistoryResponse.ProtoReflect.Descriptor instead.
func (*ProtectionGroupHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{25}
}

func (x *ProtectionGroupHistoryResponse) GetHistory() *History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *ProtectionGroupHistoryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type TenantRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                            string                `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterTenant                     *proto1.ClusterTenant `protobuf:"bytes,2,opt,name=protection_cluster_tenant,json=protectionClusterTenant,proto3" json:"protection_cluster_tenant,omitempty"`
	RecoveryClusterTenant                       *proto1.ClusterTenant `protobuf:"bytes,3,opt,name=recovery_cluster_tenant,json=recoveryClusterTenant,proto3" json:"recovery_cluster_tenant,omitempty"`
	RecoveryClusterTenantMirrorName             string                `protobuf:"bytes,4,opt,name=recovery_cluster_tenant_mirror_name,json=recoveryClusterTenantMirrorName,proto3" json:"recovery_cluster_tenant_mirror_name,omitempty"`
	RecoveryClusterTenantMirrorNameUpdateFlag   bool                  `protobuf:"varint,5,opt,name=recovery_cluster_tenant_mirror_name_update_flag,json=recoveryClusterTenantMirrorNameUpdateFlag,proto3" json:"recovery_cluster_tenant_mirror_name_update_flag,omitempty"`
	RecoveryClusterTenantMirrorNameUpdateReason *Message              `protobuf:"bytes,6,opt,name=recovery_cluster_tenant_mirror_name_update_reason,json=recoveryClusterTenantMirrorNameUpdateReason,proto3" json:"recovery_cluster_tenant_mirror_name_update_reason,omitempty"`
}

func (x *TenantRecoveryPlan) Reset() {
	*x = TenantRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantRecoveryPlan) ProtoMessage() {}

func (x *TenantRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantRecoveryPlan.ProtoReflect.Descriptor instead.
func (*TenantRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{26}
}

func (x *TenantRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *TenantRecoveryPlan) GetProtectionClusterTenant() *proto1.ClusterTenant {
	if x != nil {
		return x.ProtectionClusterTenant
	}
	return nil
}

func (x *TenantRecoveryPlan) GetRecoveryClusterTenant() *proto1.ClusterTenant {
	if x != nil {
		return x.RecoveryClusterTenant
	}
	return nil
}

func (x *TenantRecoveryPlan) GetRecoveryClusterTenantMirrorName() string {
	if x != nil {
		return x.RecoveryClusterTenantMirrorName
	}
	return ""
}

func (x *TenantRecoveryPlan) GetRecoveryClusterTenantMirrorNameUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterTenantMirrorNameUpdateFlag
	}
	return false
}

func (x *TenantRecoveryPlan) GetRecoveryClusterTenantMirrorNameUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterTenantMirrorNameUpdateReason
	}
	return nil
}

type AvailabilityZoneRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                            string                          `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterAvailabilityZone           *proto1.ClusterAvailabilityZone `protobuf:"bytes,2,opt,name=protection_cluster_availability_zone,json=protectionClusterAvailabilityZone,proto3" json:"protection_cluster_availability_zone,omitempty"`
	RecoveryClusterAvailabilityZone             *proto1.ClusterAvailabilityZone `protobuf:"bytes,3,opt,name=recovery_cluster_availability_zone,json=recoveryClusterAvailabilityZone,proto3" json:"recovery_cluster_availability_zone,omitempty"`
	RecoveryClusterAvailabilityZoneUpdateFlag   bool                            `protobuf:"varint,4,opt,name=recovery_cluster_availability_zone_update_flag,json=recoveryClusterAvailabilityZoneUpdateFlag,proto3" json:"recovery_cluster_availability_zone_update_flag,omitempty"`
	RecoveryClusterAvailabilityZoneUpdateReason *Message                        `protobuf:"bytes,5,opt,name=recovery_cluster_availability_zone_update_reason,json=recoveryClusterAvailabilityZoneUpdateReason,proto3" json:"recovery_cluster_availability_zone_update_reason,omitempty"`
}

func (x *AvailabilityZoneRecoveryPlan) Reset() {
	*x = AvailabilityZoneRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityZoneRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityZoneRecoveryPlan) ProtoMessage() {}

func (x *AvailabilityZoneRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityZoneRecoveryPlan.ProtoReflect.Descriptor instead.
func (*AvailabilityZoneRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{27}
}

func (x *AvailabilityZoneRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *AvailabilityZoneRecoveryPlan) GetProtectionClusterAvailabilityZone() *proto1.ClusterAvailabilityZone {
	if x != nil {
		return x.ProtectionClusterAvailabilityZone
	}
	return nil
}

func (x *AvailabilityZoneRecoveryPlan) GetRecoveryClusterAvailabilityZone() *proto1.ClusterAvailabilityZone {
	if x != nil {
		return x.RecoveryClusterAvailabilityZone
	}
	return nil
}

func (x *AvailabilityZoneRecoveryPlan) GetRecoveryClusterAvailabilityZoneUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterAvailabilityZoneUpdateFlag
	}
	return false
}

func (x *AvailabilityZoneRecoveryPlan) GetRecoveryClusterAvailabilityZoneUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterAvailabilityZoneUpdateReason
	}
	return nil
}

type ExternalNetworkRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                           string                 `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterExternalNetwork           *proto1.ClusterNetwork `protobuf:"bytes,2,opt,name=protection_cluster_external_network,json=protectionClusterExternalNetwork,proto3" json:"protection_cluster_external_network,omitempty"`
	RecoveryClusterExternalNetwork             *proto1.ClusterNetwork `protobuf:"bytes,3,opt,name=recovery_cluster_external_network,json=recoveryClusterExternalNetwork,proto3" json:"recovery_cluster_external_network,omitempty"`
	RecoveryClusterExternalNetworkUpdateFlag   bool                   `protobuf:"varint,4,opt,name=recovery_cluster_external_network_update_flag,json=recoveryClusterExternalNetworkUpdateFlag,proto3" json:"recovery_cluster_external_network_update_flag,omitempty"`
	RecoveryClusterExternalNetworkUpdateReason *Message               `protobuf:"bytes,5,opt,name=recovery_cluster_external_network_update_reason,json=recoveryClusterExternalNetworkUpdateReason,proto3" json:"recovery_cluster_external_network_update_reason,omitempty"`
}

func (x *ExternalNetworkRecoveryPlan) Reset() {
	*x = ExternalNetworkRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalNetworkRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalNetworkRecoveryPlan) ProtoMessage() {}

func (x *ExternalNetworkRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalNetworkRecoveryPlan.ProtoReflect.Descriptor instead.
func (*ExternalNetworkRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{28}
}

func (x *ExternalNetworkRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *ExternalNetworkRecoveryPlan) GetProtectionClusterExternalNetwork() *proto1.ClusterNetwork {
	if x != nil {
		return x.ProtectionClusterExternalNetwork
	}
	return nil
}

func (x *ExternalNetworkRecoveryPlan) GetRecoveryClusterExternalNetwork() *proto1.ClusterNetwork {
	if x != nil {
		return x.RecoveryClusterExternalNetwork
	}
	return nil
}

func (x *ExternalNetworkRecoveryPlan) GetRecoveryClusterExternalNetworkUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterExternalNetworkUpdateFlag
	}
	return false
}

func (x *ExternalNetworkRecoveryPlan) GetRecoveryClusterExternalNetworkUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterExternalNetworkUpdateReason
	}
	return nil
}

type RouterRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                           string                                   `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterRouter                    *proto1.ClusterRouter                    `protobuf:"bytes,2,opt,name=protection_cluster_router,json=protectionClusterRouter,proto3" json:"protection_cluster_router,omitempty"`
	RecoveryClusterExternalNetwork             *proto1.ClusterNetwork                   `protobuf:"bytes,3,opt,name=recovery_cluster_external_network,json=recoveryClusterExternalNetwork,proto3" json:"recovery_cluster_external_network,omitempty"`
	RecoveryClusterExternalNetworkUpdateFlag   bool                                     `protobuf:"varint,4,opt,name=recovery_cluster_external_network_update_flag,json=recoveryClusterExternalNetworkUpdateFlag,proto3" json:"recovery_cluster_external_network_update_flag,omitempty"`
	RecoveryClusterExternalNetworkUpdateReason *Message                                 `protobuf:"bytes,5,opt,name=recovery_cluster_external_network_update_reason,json=recoveryClusterExternalNetworkUpdateReason,proto3" json:"recovery_cluster_external_network_update_reason,omitempty"`
	RecoveryClusterExternalRoutingInterfaces   []*proto1.ClusterNetworkRoutingInterface `protobuf:"bytes,6,rep,name=recovery_cluster_external_routing_interfaces,json=recoveryClusterExternalRoutingInterfaces,proto3" json:"recovery_cluster_external_routing_interfaces,omitempty"`
}

func (x *RouterRecoveryPlan) Reset() {
	*x = RouterRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterRecoveryPlan) ProtoMessage() {}

func (x *RouterRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterRecoveryPlan.ProtoReflect.Descriptor instead.
func (*RouterRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{29}
}

func (x *RouterRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *RouterRecoveryPlan) GetProtectionClusterRouter() *proto1.ClusterRouter {
	if x != nil {
		return x.ProtectionClusterRouter
	}
	return nil
}

func (x *RouterRecoveryPlan) GetRecoveryClusterExternalNetwork() *proto1.ClusterNetwork {
	if x != nil {
		return x.RecoveryClusterExternalNetwork
	}
	return nil
}

func (x *RouterRecoveryPlan) GetRecoveryClusterExternalNetworkUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterExternalNetworkUpdateFlag
	}
	return false
}

func (x *RouterRecoveryPlan) GetRecoveryClusterExternalNetworkUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterExternalNetworkUpdateReason
	}
	return nil
}

func (x *RouterRecoveryPlan) GetRecoveryClusterExternalRoutingInterfaces() []*proto1.ClusterNetworkRoutingInterface {
	if x != nil {
		return x.RecoveryClusterExternalRoutingInterfaces
	}
	return nil
}

type StorageRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                   string                 `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterStorage           *proto1.ClusterStorage `protobuf:"bytes,2,opt,name=protection_cluster_storage,json=protectionClusterStorage,proto3" json:"protection_cluster_storage,omitempty"`
	RecoveryClusterStorage             *proto1.ClusterStorage `protobuf:"bytes,3,opt,name=recovery_cluster_storage,json=recoveryClusterStorage,proto3" json:"recovery_cluster_storage,omitempty"`
	RecoveryClusterStorageUpdateFlag   bool                   `protobuf:"varint,4,opt,name=recovery_cluster_storage_update_flag,json=recoveryClusterStorageUpdateFlag,proto3" json:"recovery_cluster_storage_update_flag,omitempty"`
	RecoveryClusterStorageUpdateReason *Message               `protobuf:"bytes,5,opt,name=recovery_cluster_storage_update_reason,json=recoveryClusterStorageUpdateReason,proto3" json:"recovery_cluster_storage_update_reason,omitempty"`
	UnavailableFlag                    bool                   `protobuf:"varint,6,opt,name=unavailable_flag,json=unavailableFlag,proto3" json:"unavailable_flag,omitempty"`
	UnavailableReason                  *Message               `protobuf:"bytes,7,opt,name=unavailable_reason,json=unavailableReason,proto3" json:"unavailable_reason,omitempty"`
}

func (x *StorageRecoveryPlan) Reset() {
	*x = StorageRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRecoveryPlan) ProtoMessage() {}

func (x *StorageRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRecoveryPlan.ProtoReflect.Descriptor instead.
func (*StorageRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{30}
}

func (x *StorageRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *StorageRecoveryPlan) GetProtectionClusterStorage() *proto1.ClusterStorage {
	if x != nil {
		return x.ProtectionClusterStorage
	}
	return nil
}

func (x *StorageRecoveryPlan) GetRecoveryClusterStorage() *proto1.ClusterStorage {
	if x != nil {
		return x.RecoveryClusterStorage
	}
	return nil
}

func (x *StorageRecoveryPlan) GetRecoveryClusterStorageUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterStorageUpdateFlag
	}
	return false
}

func (x *StorageRecoveryPlan) GetRecoveryClusterStorageUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterStorageUpdateReason
	}
	return nil
}

func (x *StorageRecoveryPlan) GetUnavailableFlag() bool {
	if x != nil {
		return x.UnavailableFlag
	}
	return false
}

func (x *StorageRecoveryPlan) GetUnavailableReason() *Message {
	if x != nil {
		return x.UnavailableReason
	}
	return nil
}

type InstanceRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                            string                          `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterInstance                   *proto1.ClusterInstance         `protobuf:"bytes,2,opt,name=protection_cluster_instance,json=protectionClusterInstance,proto3" json:"protection_cluster_instance,omitempty"`
	RecoveryClusterAvailabilityZone             *proto1.ClusterAvailabilityZone `protobuf:"bytes,3,opt,name=recovery_cluster_availability_zone,json=recoveryClusterAvailabilityZone,proto3" json:"recovery_cluster_availability_zone,omitempty"`
	RecoveryClusterAvailabilityZoneUpdateFlag   bool                            `protobuf:"varint,4,opt,name=recovery_cluster_availability_zone_update_flag,json=recoveryClusterAvailabilityZoneUpdateFlag,proto3" json:"recovery_cluster_availability_zone_update_flag,omitempty"`
	RecoveryClusterAvailabilityZoneUpdateReason *Message                        `protobuf:"bytes,5,opt,name=recovery_cluster_availability_zone_update_reason,json=recoveryClusterAvailabilityZoneUpdateReason,proto3" json:"recovery_cluster_availability_zone_update_reason,omitempty"`
	RecoveryClusterHypervisor                   *proto1.ClusterHypervisor       `protobuf:"bytes,6,opt,name=recovery_cluster_hypervisor,json=recoveryClusterHypervisor,proto3" json:"recovery_cluster_hypervisor,omitempty"`
	AutoStartFlag                               bool                            `protobuf:"varint,7,opt,name=auto_start_flag,json=autoStartFlag,proto3" json:"auto_start_flag,omitempty"`
	DiagnosisFlag                               bool                            `protobuf:"varint,8,opt,name=diagnosis_flag,json=diagnosisFlag,proto3" json:"diagnosis_flag,omitempty"`
	DiagnosisMethodCode                         string                          `protobuf:"bytes,9,opt,name=diagnosis_method_code,json=diagnosisMethodCode,proto3" json:"diagnosis_method_code,omitempty"`
	DiagnosisMethodData                         string                          `protobuf:"bytes,10,opt,name=diagnosis_method_data,json=diagnosisMethodData,proto3" json:"diagnosis_method_data,omitempty"`
	DiagnosisTimeout                            uint32                          `protobuf:"varint,11,opt,name=diagnosis_timeout,json=diagnosisTimeout,proto3" json:"diagnosis_timeout,omitempty"`
	Dependencies                                []*proto1.ClusterInstance       `protobuf:"bytes,12,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *InstanceRecoveryPlan) Reset() {
	*x = InstanceRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceRecoveryPlan) ProtoMessage() {}

func (x *InstanceRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceRecoveryPlan.ProtoReflect.Descriptor instead.
func (*InstanceRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{31}
}

func (x *InstanceRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *InstanceRecoveryPlan) GetProtectionClusterInstance() *proto1.ClusterInstance {
	if x != nil {
		return x.ProtectionClusterInstance
	}
	return nil
}

func (x *InstanceRecoveryPlan) GetRecoveryClusterAvailabilityZone() *proto1.ClusterAvailabilityZone {
	if x != nil {
		return x.RecoveryClusterAvailabilityZone
	}
	return nil
}

func (x *InstanceRecoveryPlan) GetRecoveryClusterAvailabilityZoneUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterAvailabilityZoneUpdateFlag
	}
	return false
}

func (x *InstanceRecoveryPlan) GetRecoveryClusterAvailabilityZoneUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterAvailabilityZoneUpdateReason
	}
	return nil
}

func (x *InstanceRecoveryPlan) GetRecoveryClusterHypervisor() *proto1.ClusterHypervisor {
	if x != nil {
		return x.RecoveryClusterHypervisor
	}
	return nil
}

func (x *InstanceRecoveryPlan) GetAutoStartFlag() bool {
	if x != nil {
		return x.AutoStartFlag
	}
	return false
}

func (x *InstanceRecoveryPlan) GetDiagnosisFlag() bool {
	if x != nil {
		return x.DiagnosisFlag
	}
	return false
}

func (x *InstanceRecoveryPlan) GetDiagnosisMethodCode() string {
	if x != nil {
		return x.DiagnosisMethodCode
	}
	return ""
}

func (x *InstanceRecoveryPlan) GetDiagnosisMethodData() string {
	if x != nil {
		return x.DiagnosisMethodData
	}
	return ""
}

func (x *InstanceRecoveryPlan) GetDiagnosisTimeout() uint32 {
	if x != nil {
		return x.DiagnosisTimeout
	}
	return 0
}

func (x *InstanceRecoveryPlan) GetDependencies() []*proto1.ClusterInstance {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type FloatingIPRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionClusterFloatingIp *proto1.ClusterFloatingIP `protobuf:"bytes,1,opt,name=protection_cluster_floating_ip,json=protectionClusterFloatingIp,proto3" json:"protection_cluster_floating_ip,omitempty"`
	UnavailableFlag             bool                      `protobuf:"varint,2,opt,name=unavailable_flag,json=unavailableFlag,proto3" json:"unavailable_flag,omitempty"`
	UnavailableReason           *Message                  `protobuf:"bytes,3,opt,name=unavailable_reason,json=unavailableReason,proto3" json:"unavailable_reason,omitempty"`
}

func (x *FloatingIPRecoveryPlan) Reset() {
	*x = FloatingIPRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingIPRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingIPRecoveryPlan) ProtoMessage() {}

func (x *FloatingIPRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingIPRecoveryPlan.ProtoReflect.Descriptor instead.
func (*FloatingIPRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{32}
}

func (x *FloatingIPRecoveryPlan) GetProtectionClusterFloatingIp() *proto1.ClusterFloatingIP {
	if x != nil {
		return x.ProtectionClusterFloatingIp
	}
	return nil
}

func (x *FloatingIPRecoveryPlan) GetUnavailableFlag() bool {
	if x != nil {
		return x.UnavailableFlag
	}
	return false
}

func (x *FloatingIPRecoveryPlan) GetUnavailableReason() *Message {
	if x != nil {
		return x.UnavailableReason
	}
	return nil
}

type VolumeRecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryTypeCode                   string                 `protobuf:"bytes,1,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	ProtectionClusterVolume            *proto1.ClusterVolume  `protobuf:"bytes,2,opt,name=protection_cluster_volume,json=protectionClusterVolume,proto3" json:"protection_cluster_volume,omitempty"`
	RecoveryClusterStorage             *proto1.ClusterStorage `protobuf:"bytes,3,opt,name=recovery_cluster_storage,json=recoveryClusterStorage,proto3" json:"recovery_cluster_storage,omitempty"`
	RecoveryClusterStorageUpdateFlag   bool                   `protobuf:"varint,4,opt,name=recovery_cluster_storage_update_flag,json=recoveryClusterStorageUpdateFlag,proto3" json:"recovery_cluster_storage_update_flag,omitempty"`
	RecoveryClusterStorageUpdateReason *Message               `protobuf:"bytes,5,opt,name=recovery_cluster_storage_update_reason,json=recoveryClusterStorageUpdateReason,proto3" json:"recovery_cluster_storage_update_reason,omitempty"`
	UnavailableFlag                    bool                   `protobuf:"varint,6,opt,name=unavailable_flag,json=unavailableFlag,proto3" json:"unavailable_flag,omitempty"`
	UnavailableReason                  *Message               `protobuf:"bytes,7,opt,name=unavailable_reason,json=unavailableReason,proto3" json:"unavailable_reason,omitempty"`
}

func (x *VolumeRecoveryPlan) Reset() {
	*x = VolumeRecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRecoveryPlan) ProtoMessage() {}

func (x *VolumeRecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRecoveryPlan.ProtoReflect.Descriptor instead.
func (*VolumeRecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{33}
}

func (x *VolumeRecoveryPlan) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *VolumeRecoveryPlan) GetProtectionClusterVolume() *proto1.ClusterVolume {
	if x != nil {
		return x.ProtectionClusterVolume
	}
	return nil
}

func (x *VolumeRecoveryPlan) GetRecoveryClusterStorage() *proto1.ClusterStorage {
	if x != nil {
		return x.RecoveryClusterStorage
	}
	return nil
}

func (x *VolumeRecoveryPlan) GetRecoveryClusterStorageUpdateFlag() bool {
	if x != nil {
		return x.RecoveryClusterStorageUpdateFlag
	}
	return false
}

func (x *VolumeRecoveryPlan) GetRecoveryClusterStorageUpdateReason() *Message {
	if x != nil {
		return x.RecoveryClusterStorageUpdateReason
	}
	return nil
}

func (x *VolumeRecoveryPlan) GetUnavailableFlag() bool {
	if x != nil {
		return x.UnavailableFlag
	}
	return false
}

func (x *VolumeRecoveryPlan) GetUnavailableReason() *Message {
	if x != nil {
		return x.UnavailableReason
	}
	return nil
}

type RecoveryPlanDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants                   []*TenantRecoveryPlan           `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	AvailabilityZones         []*AvailabilityZoneRecoveryPlan `protobuf:"bytes,2,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	ExternalNetworks          []*ExternalNetworkRecoveryPlan  `protobuf:"bytes,3,rep,name=external_networks,json=externalNetworks,proto3" json:"external_networks,omitempty"`
	Routers                   []*RouterRecoveryPlan           `protobuf:"bytes,4,rep,name=routers,proto3" json:"routers,omitempty"`
	Storages                  []*StorageRecoveryPlan          `protobuf:"bytes,5,rep,name=storages,proto3" json:"storages,omitempty"`
	Instances                 []*InstanceRecoveryPlan         `protobuf:"bytes,6,rep,name=instances,proto3" json:"instances,omitempty"`
	FloatingIps               []*FloatingIPRecoveryPlan       `protobuf:"bytes,7,rep,name=floating_ips,json=floatingIps,proto3" json:"floating_ips,omitempty"`
	Volumes                   []*VolumeRecoveryPlan           `protobuf:"bytes,8,rep,name=volumes,proto3" json:"volumes,omitempty"`
	ExtraRemoteSecurityGroups []*proto1.ClusterSecurityGroup  `protobuf:"bytes,9,rep,name=extra_remote_security_groups,json=extraRemoteSecurityGroups,proto3" json:"extra_remote_security_groups,omitempty"`
}

func (x *RecoveryPlanDetail) Reset() {
	*x = RecoveryPlanDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlanDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlanDetail) ProtoMessage() {}

func (x *RecoveryPlanDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlanDetail.ProtoReflect.Descriptor instead.
func (*RecoveryPlanDetail) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{34}
}

func (x *RecoveryPlanDetail) GetTenants() []*TenantRecoveryPlan {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *RecoveryPlanDetail) GetAvailabilityZones() []*AvailabilityZoneRecoveryPlan {
	if x != nil {
		return x.AvailabilityZones
	}
	return nil
}

func (x *RecoveryPlanDetail) GetExternalNetworks() []*ExternalNetworkRecoveryPlan {
	if x != nil {
		return x.ExternalNetworks
	}
	return nil
}

func (x *RecoveryPlanDetail) GetRouters() []*RouterRecoveryPlan {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *RecoveryPlanDetail) GetStorages() []*StorageRecoveryPlan {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *RecoveryPlanDetail) GetInstances() []*InstanceRecoveryPlan {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *RecoveryPlanDetail) GetFloatingIps() []*FloatingIPRecoveryPlan {
	if x != nil {
		return x.FloatingIps
	}
	return nil
}

func (x *RecoveryPlanDetail) GetVolumes() []*VolumeRecoveryPlan {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *RecoveryPlanDetail) GetExtraRemoteSecurityGroups() []*proto1.ClusterSecurityGroup {
	if x != nil {
		return x.ExtraRemoteSecurityGroups
	}
	return nil
}

type RecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProtectionCluster      *proto1.Cluster                  `protobuf:"bytes,2,opt,name=protection_cluster,json=protectionCluster,proto3" json:"protection_cluster,omitempty"`
	RecoveryCluster        *proto1.Cluster                  `protobuf:"bytes,3,opt,name=recovery_cluster,json=recoveryCluster,proto3" json:"recovery_cluster,omitempty"`
	Name                   string                           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	SnapshotRetentionCount uint32                           `protobuf:"varint,5,opt,name=snapshot_retention_count,json=snapshotRetentionCount,proto3" json:"snapshot_retention_count,omitempty"`
	Remarks                string                           `protobuf:"bytes,6,opt,name=remarks,proto3" json:"remarks,omitempty"`
	DirectionCode          string                           `protobuf:"bytes,7,opt,name=direction_code,json=directionCode,proto3" json:"direction_code,omitempty"`
	StateCode              string                           `protobuf:"bytes,8,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	MirrorStateCode        string                           `protobuf:"bytes,9,opt,name=mirror_state_code,json=mirrorStateCode,proto3" json:"mirror_state_code,omitempty"`
	AbnormalStateReasons   *RecoveryPlanAbnormalStateReason `protobuf:"bytes,10,opt,name=abnormal_state_reasons,json=abnormalStateReasons,proto3" json:"abnormal_state_reasons,omitempty"`
	CreatedAt              int64                            `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              int64                            `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Detail                 *RecoveryPlanDetail              `protobuf:"bytes,13,opt,name=detail,proto3" json:"detail,omitempty"`
	Updatable              bool                             `protobuf:"varint,14,opt,name=updatable,proto3" json:"updatable,omitempty"`
}

func (x *RecoveryPlan) Reset() {
	*x = RecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlan) ProtoMessage() {}

func (x *RecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlan.ProtoReflect.Descriptor instead.
func (*RecoveryPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{35}
}

func (x *RecoveryPlan) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecoveryPlan) GetProtectionCluster() *proto1.Cluster {
	if x != nil {
		return x.ProtectionCluster
	}
	return nil
}

func (x *RecoveryPlan) GetRecoveryCluster() *proto1.Cluster {
	if x != nil {
		return x.RecoveryCluster
	}
	return nil
}

func (x *RecoveryPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecoveryPlan) GetSnapshotRetentionCount() uint32 {
	if x != nil {
		return x.SnapshotRetentionCount
	}
	return 0
}

func (x *RecoveryPlan) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *RecoveryPlan) GetDirectionCode() string {
	if x != nil {
		return x.DirectionCode
	}
	return ""
}

func (x *RecoveryPlan) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryPlan) GetMirrorStateCode() string {
	if x != nil {
		return x.MirrorStateCode
	}
	return ""
}

func (x *RecoveryPlan) GetAbnormalStateReasons() *RecoveryPlanAbnormalStateReason {
	if x != nil {
		return x.AbnormalStateReasons
	}
	return nil
}

func (x *RecoveryPlan) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RecoveryPlan) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RecoveryPlan) GetDetail() *RecoveryPlanDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *RecoveryPlan) GetUpdatable() bool {
	if x != nil {
		return x.Updatable
	}
	return false
}

type RecoveryPlanListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans      []*RecoveryPlan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
	Pagination *Pagination     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryPlanListResponse) Reset() {
	*x = RecoveryPlanListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlanListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlanListResponse) ProtoMessage() {}

func (x *RecoveryPlanListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlanListResponse.ProtoReflect.Descriptor instead.
func (*RecoveryPlanListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{36}
}

func (x *RecoveryPlanListResponse) GetPlans() []*RecoveryPlan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *RecoveryPlanListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *RecoveryPlanListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RecoveryPlanListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Name    string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	GroupId uint64                `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *RecoveryPlanListRequest) Reset() {
	*x = RecoveryPlanListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlanListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlanListRequest) ProtoMessage() {}

func (x *RecoveryPlanListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlanListRequest.ProtoReflect.Descriptor instead.
func (*RecoveryPlanListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{37}
}

func (x *RecoveryPlanListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *RecoveryPlanListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *RecoveryPlanListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecoveryPlanListRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type RecoveryPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan    *RecoveryPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	Message *Message      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryPlanResponse) Reset() {
	*x = RecoveryPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlanResponse) ProtoMessage() {}

func (x *RecoveryPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlanResponse.ProtoReflect.Descriptor instead.
func (*RecoveryPlanResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{38}
}

func (x *RecoveryPlanResponse) GetPlan() *RecoveryPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *RecoveryPlanResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type AddRecoveryPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Plan    *RecoveryPlan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	Force   bool          `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *AddRecoveryPlanRequest) Reset() {
	*x = AddRecoveryPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecoveryPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecoveryPlanRequest) ProtoMessage() {}

func (x *AddRecoveryPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecoveryPlanRequest.ProtoReflect.Descriptor instead.
func (*AddRecoveryPlanRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{39}
}

func (x *AddRecoveryPlanRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddRecoveryPlanRequest) GetPlan() *RecoveryPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *AddRecoveryPlanRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RecoveryPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlanId  uint64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *RecoveryPlanRequest) Reset() {
	*x = RecoveryPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlanRequest) ProtoMessage() {}

func (x *RecoveryPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlanRequest.ProtoReflect.Descriptor instead.
func (*RecoveryPlanRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{40}
}

func (x *RecoveryPlanRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RecoveryPlanRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type UpdateRecoveryPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlanId  uint64        `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Plan    *RecoveryPlan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Force   bool          `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UpdateRecoveryPlanRequest) Reset() {
	*x = UpdateRecoveryPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecoveryPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecoveryPlanRequest) ProtoMessage() {}

func (x *UpdateRecoveryPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecoveryPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecoveryPlanRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateRecoveryPlanRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateRecoveryPlanRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdateRecoveryPlanRequest) GetPlan() *RecoveryPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *UpdateRecoveryPlanRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteRecoveryPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRecoveryPlanResponse) Reset() {
	*x = DeleteRecoveryPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecoveryPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecoveryPlanResponse) ProtoMessage() {}

func (x *DeleteRecoveryPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecoveryPlanResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecoveryPlanResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteRecoveryPlanResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ProtectionGroupSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ProtectionGroupSnapshot) Reset() {
	*x = ProtectionGroupSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSnapshot) ProtoMessage() {}

func (x *ProtectionGroupSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSnapshot.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{43}
}

func (x *ProtectionGroupSnapshot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtectionGroupSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtectionGroupSnapshot) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProtectionGroupSnapshot) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RecoveryJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Operator              *proto2.SimpleUser       `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Group                 *ProtectionGroup         `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Plan                  *RecoveryPlan            `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	TypeCode              string                   `protobuf:"bytes,5,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	RecoveryPointTypeCode string                   `protobuf:"bytes,8,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPointSnapshot *ProtectionGroupSnapshot `protobuf:"bytes,9,opt,name=recovery_point_snapshot,json=recoveryPointSnapshot,proto3" json:"recovery_point_snapshot,omitempty"`
	Schedule              *proto3.Schedule         `protobuf:"bytes,11,opt,name=schedule,proto3" json:"schedule,omitempty"`
	NextRuntime           int64                    `protobuf:"varint,12,opt,name=next_runtime,json=nextRuntime,proto3" json:"next_runtime,omitempty"`
	OperationCode         string                   `protobuf:"bytes,14,opt,name=operation_code,json=operationCode,proto3" json:"operation_code,omitempty"`
	StateCode             string                   `protobuf:"bytes,15,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	CreatedAt             int64                    `protobuf:"varint,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             int64                    `protobuf:"varint,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RecoveryJob) Reset() {
	*x = RecoveryJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJob) ProtoMessage() {}

func (x *RecoveryJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJob.ProtoReflect.Descriptor instead.
func (*RecoveryJob) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{44}
}

func (x *RecoveryJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecoveryJob) GetOperator() *proto2.SimpleUser {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *RecoveryJob) GetGroup() *ProtectionGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *RecoveryJob) GetPlan() *RecoveryPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *RecoveryJob) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJob) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJob) GetRecoveryPointSnapshot() *ProtectionGroupSnapshot {
	if x != nil {
		return x.RecoveryPointSnapshot
	}
	return nil
}

func (x *RecoveryJob) GetSchedule() *proto3.Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *RecoveryJob) GetNextRuntime() int64 {
	if x != nil {
		return x.NextRuntime
	}
	return 0
}

func (x *RecoveryJob) GetOperationCode() string {
	if x != nil {
		return x.OperationCode
	}
	return ""
}

func (x *RecoveryJob) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RecoveryJob) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RecoveryJobListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs       []*RecoveryJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Pagination *Pagination    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryJobListResponse) Reset() {
	*x = RecoveryJobListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobListResponse) ProtoMessage() {}

func (x *RecoveryJobListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobListResponse.ProtoReflect.Descriptor instead.
func (*RecoveryJobListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{45}
}

func (x *RecoveryJobListResponse) GetJobs() []*RecoveryJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *RecoveryJobListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *RecoveryJobListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RecoveryJobListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Name    string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PlanId  uint64                `protobuf:"varint,4,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Type    string                `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	GroupId uint64                `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *RecoveryJobListRequest) Reset() {
	*x = RecoveryJobListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobListRequest) ProtoMessage() {}

func (x *RecoveryJobListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobListRequest.ProtoReflect.Descriptor instead.
func (*RecoveryJobListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{46}
}

func (x *RecoveryJobListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *RecoveryJobListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *RecoveryJobListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecoveryJobListRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *RecoveryJobListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecoveryJobListRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type AddRecoveryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64       `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Job     *RecoveryJob `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	Force   bool         `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *AddRecoveryJobRequest) Reset() {
	*x = AddRecoveryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecoveryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecoveryJobRequest) ProtoMessage() {}

func (x *AddRecoveryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecoveryJobRequest.ProtoReflect.Descriptor instead.
func (*AddRecoveryJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{47}
}

func (x *AddRecoveryJobRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddRecoveryJobRequest) GetJob() *RecoveryJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *AddRecoveryJobRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RecoveryJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job     *RecoveryJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Message *Message     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryJobResponse) Reset() {
	*x = RecoveryJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobResponse) ProtoMessage() {}

func (x *RecoveryJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobResponse.ProtoReflect.Descriptor instead.
func (*RecoveryJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{48}
}

func (x *RecoveryJobResponse) GetJob() *RecoveryJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *RecoveryJobResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RecoveryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId   uint64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *RecoveryJobRequest) Reset() {
	*x = RecoveryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobRequest) ProtoMessage() {}

func (x *RecoveryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobRequest.ProtoReflect.Descriptor instead.
func (*RecoveryJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{49}
}

func (x *RecoveryJobRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RecoveryJobRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type UpdateRecoveryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64       `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId   uint64       `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Job     *RecoveryJob `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
	Force   bool         `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UpdateRecoveryJobRequest) Reset() {
	*x = UpdateRecoveryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecoveryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecoveryJobRequest) ProtoMessage() {}

func (x *UpdateRecoveryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecoveryJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecoveryJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateRecoveryJobRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateRecoveryJobRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *UpdateRecoveryJobRequest) GetJob() *RecoveryJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *UpdateRecoveryJobRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteRecoveryJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRecoveryJobResponse) Reset() {
	*x = DeleteRecoveryJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecoveryJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecoveryJobResponse) ProtoMessage() {}

func (x *DeleteRecoveryJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecoveryJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecoveryJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteRecoveryJobResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RecoveryJobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartedAt      int64      `protobuf:"varint,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt     int64      `protobuf:"varint,2,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ElapsedTime    int64      `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	OperationCode  string     `protobuf:"bytes,4,opt,name=operation_code,json=operationCode,proto3" json:"operation_code,omitempty"`
	StateCode      string     `protobuf:"bytes,5,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode     string     `protobuf:"bytes,6,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	WarningFlag    bool       `protobuf:"varint,7,opt,name=warning_flag,json=warningFlag,proto3" json:"warning_flag,omitempty"`
	WarningReasons []*Message `protobuf:"bytes,8,rep,name=warning_reasons,json=warningReasons,proto3" json:"warning_reasons,omitempty"`
	FailedReasons  []*Message `protobuf:"bytes,9,rep,name=failed_reasons,json=failedReasons,proto3" json:"failed_reasons,omitempty"`
	ResumeAt       int64      `protobuf:"varint,10,opt,name=resume_at,json=resumeAt,proto3" json:"resume_at,omitempty"`
	RollbackAt     int64      `protobuf:"varint,11,opt,name=rollback_at,json=rollbackAt,proto3" json:"rollback_at,omitempty"`
}

func (x *RecoveryJobStatus) Reset() {
	*x = RecoveryJobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobStatus) ProtoMessage() {}

func (x *RecoveryJobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{52}
}

func (x *RecoveryJobStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobStatus) GetOperationCode() string {
	if x != nil {
		return x.OperationCode
	}
	return ""
}

func (x *RecoveryJobStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobStatus) GetWarningFlag() bool {
	if x != nil {
		return x.WarningFlag
	}
	return false
}

func (x *RecoveryJobStatus) GetWarningReasons() []*Message {
	if x != nil {
		return x.WarningReasons
	}
	return nil
}

func (x *RecoveryJobStatus) GetFailedReasons() []*Message {
	if x != nil {
		return x.FailedReasons
	}
	return nil
}

func (x *RecoveryJobStatus) GetResumeAt() int64 {
	if x != nil {
		return x.ResumeAt
	}
	return 0
}

func (x *RecoveryJobStatus) GetRollbackAt() int64 {
	if x != nil {
		return x.RollbackAt
	}
	return 0
}

type MonitorRecoveryJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *RecoveryJobStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MonitorRecoveryJobResponse) Reset() {
	*x = MonitorRecoveryJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRecoveryJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRecoveryJobResponse) ProtoMessage() {}

func (x *MonitorRecoveryJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRecoveryJobResponse.ProtoReflect.Descriptor instead.
func (*MonitorRecoveryJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{53}
}

func (x *MonitorRecoveryJobResponse) GetStatus() *RecoveryJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type RecoveryTaskLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Contents string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	LogSeq   uint64 `protobuf:"varint,3,opt,name=log_seq,json=logSeq,proto3" json:"log_seq,omitempty"`
	LogDt    int64  `protobuf:"varint,4,opt,name=log_dt,json=logDt,proto3" json:"log_dt,omitempty"`
}

func (x *RecoveryTaskLog) Reset() {
	*x = RecoveryTaskLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryTaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryTaskLog) ProtoMessage() {}

func (x *RecoveryTaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryTaskLog.ProtoReflect.Descriptor instead.
func (*RecoveryTaskLog) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{54}
}

func (x *RecoveryTaskLog) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RecoveryTaskLog) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *RecoveryTaskLog) GetLogSeq() uint64 {
	if x != nil {
		return x.LogSeq
	}
	return 0
}

func (x *RecoveryTaskLog) GetLogDt() int64 {
	if x != nil {
		return x.LogDt
	}
	return 0
}

type MonitorRecoveryTaskLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskLogs []*RecoveryTaskLog `protobuf:"bytes,1,rep,name=task_logs,json=taskLogs,proto3" json:"task_logs,omitempty"`
}

func (x *MonitorRecoveryTaskLogsResponse) Reset() {
	*x = MonitorRecoveryTaskLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRecoveryTaskLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRecoveryTaskLogsResponse) ProtoMessage() {}

func (x *MonitorRecoveryTaskLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRecoveryTaskLogsResponse.ProtoReflect.Descriptor instead.
func (*MonitorRecoveryTaskLogsResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{55}
}

func (x *MonitorRecoveryTaskLogsResponse) GetTaskLogs() []*RecoveryTaskLog {
	if x != nil {
		return x.TaskLogs
	}
	return nil
}

type RecoveryJobInstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance              *proto1.ClusterInstance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	RecoveryPointTypeCode string                  `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                   `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                   `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                   `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                   `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                  `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                  `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                  `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message                `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobInstanceStatus) Reset() {
	*x = RecoveryJobInstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobInstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobInstanceStatus) ProtoMessage() {}

func (x *RecoveryJobInstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobInstanceStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobInstanceStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{56}
}

func (x *RecoveryJobInstanceStatus) GetInstance() *proto1.ClusterInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *RecoveryJobInstanceStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobInstanceStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobInstanceStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobInstanceStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobInstanceStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobInstanceStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobInstanceStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobInstanceStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobInstanceStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type MonitorRecoveryJobInstanceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*RecoveryJobInstanceStatus `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *MonitorRecoveryJobInstanceListResponse) Reset() {
	*x = MonitorRecoveryJobInstanceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRecoveryJobInstanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRecoveryJobInstanceListResponse) ProtoMessage() {}

func (x *MonitorRecoveryJobInstanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRecoveryJobInstanceListResponse.ProtoReflect.Descriptor instead.
func (*MonitorRecoveryJobInstanceListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{57}
}

func (x *MonitorRecoveryJobInstanceListResponse) GetInstances() []*RecoveryJobInstanceStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

type RecoveryJobVolumeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume                *proto1.ClusterVolume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	RecoveryPointTypeCode string                `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                 `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                 `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                 `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                 `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message              `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobVolumeStatus) Reset() {
	*x = RecoveryJobVolumeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobVolumeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobVolumeStatus) ProtoMessage() {}

func (x *RecoveryJobVolumeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobVolumeStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobVolumeStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{58}
}

func (x *RecoveryJobVolumeStatus) GetVolume() *proto1.ClusterVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *RecoveryJobVolumeStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobVolumeStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobVolumeStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobVolumeStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobVolumeStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobVolumeStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobVolumeStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobVolumeStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobVolumeStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type MonitorRecoveryJobVolumeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*RecoveryJobVolumeStatus `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *MonitorRecoveryJobVolumeListResponse) Reset() {
	*x = MonitorRecoveryJobVolumeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRecoveryJobVolumeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRecoveryJobVolumeListResponse) ProtoMessage() {}

func (x *MonitorRecoveryJobVolumeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRecoveryJobVolumeListResponse.ProtoReflect.Descriptor instead.
func (*MonitorRecoveryJobVolumeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{59}
}

func (x *MonitorRecoveryJobVolumeListResponse) GetVolumes() []*RecoveryJobVolumeStatus {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type RecoveryJobTenantStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                *proto1.ClusterTenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	RecoveryPointTypeCode string                `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                 `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                 `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                 `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                 `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message              `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobTenantStatus) Reset() {
	*x = RecoveryJobTenantStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobTenantStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobTenantStatus) ProtoMessage() {}

func (x *RecoveryJobTenantStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobTenantStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobTenantStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{60}
}

func (x *RecoveryJobTenantStatus) GetTenant() *proto1.ClusterTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *RecoveryJobTenantStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobTenantStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobTenantStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobTenantStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobTenantStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobTenantStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobTenantStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobTenantStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobTenantStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobSecurityGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroup         *proto1.ClusterSecurityGroup `protobuf:"bytes,1,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	RecoveryPointTypeCode string                       `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                        `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                        `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                        `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                        `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                       `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                       `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                       `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message                     `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobSecurityGroupStatus) Reset() {
	*x = RecoveryJobSecurityGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobSecurityGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobSecurityGroupStatus) ProtoMessage() {}

func (x *RecoveryJobSecurityGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobSecurityGroupStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobSecurityGroupStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{61}
}

func (x *RecoveryJobSecurityGroupStatus) GetSecurityGroup() *proto1.ClusterSecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *RecoveryJobSecurityGroupStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobSecurityGroupStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobSecurityGroupStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobSecurityGroupStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobSecurityGroupStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobSecurityGroupStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobSecurityGroupStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobSecurityGroupStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobSecurityGroupStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobNetworkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network               *proto1.ClusterNetwork `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	RecoveryPointTypeCode string                 `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                  `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                  `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                  `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                  `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                 `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                 `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                 `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message               `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobNetworkStatus) Reset() {
	*x = RecoveryJobNetworkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobNetworkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobNetworkStatus) ProtoMessage() {}

func (x *RecoveryJobNetworkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobNetworkStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobNetworkStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{62}
}

func (x *RecoveryJobNetworkStatus) GetNetwork() *proto1.ClusterNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *RecoveryJobNetworkStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobNetworkStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobNetworkStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobNetworkStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobNetworkStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobNetworkStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobNetworkStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobNetworkStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobNetworkStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobSubnetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet                *proto1.ClusterSubnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	RecoveryPointTypeCode string                `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                 `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                 `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                 `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                 `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message              `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobSubnetStatus) Reset() {
	*x = RecoveryJobSubnetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobSubnetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobSubnetStatus) ProtoMessage() {}

func (x *RecoveryJobSubnetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobSubnetStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobSubnetStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{63}
}

func (x *RecoveryJobSubnetStatus) GetSubnet() *proto1.ClusterSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *RecoveryJobSubnetStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobSubnetStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobSubnetStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobSubnetStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobSubnetStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobSubnetStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobSubnetStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobSubnetStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobSubnetStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobFloatingIPStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatingIp            *proto1.ClusterFloatingIP `protobuf:"bytes,1,opt,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty"`
	RecoveryPointTypeCode string                    `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                     `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                     `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                     `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                     `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                    `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                    `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                    `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message                  `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobFloatingIPStatus) Reset() {
	*x = RecoveryJobFloatingIPStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobFloatingIPStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobFloatingIPStatus) ProtoMessage() {}

func (x *RecoveryJobFloatingIPStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobFloatingIPStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobFloatingIPStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{64}
}

func (x *RecoveryJobFloatingIPStatus) GetFloatingIp() *proto1.ClusterFloatingIP {
	if x != nil {
		return x.FloatingIp
	}
	return nil
}

func (x *RecoveryJobFloatingIPStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobFloatingIPStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobFloatingIPStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobFloatingIPStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobFloatingIPStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobFloatingIPStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobFloatingIPStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobFloatingIPStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobFloatingIPStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobRouterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router                *proto1.ClusterRouter `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	RecoveryPointTypeCode string                `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                 `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                 `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                 `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                 `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message              `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobRouterStatus) Reset() {
	*x = RecoveryJobRouterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobRouterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobRouterStatus) ProtoMessage() {}

func (x *RecoveryJobRouterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobRouterStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobRouterStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{65}
}

func (x *RecoveryJobRouterStatus) GetRouter() *proto1.ClusterRouter {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *RecoveryJobRouterStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobRouterStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobRouterStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobRouterStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobRouterStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobRouterStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobRouterStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobRouterStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobRouterStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobKeypairStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyfair               *proto1.ClusterKeypair `protobuf:"bytes,1,opt,name=keyfair,proto3" json:"keyfair,omitempty"`
	RecoveryPointTypeCode string                 `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                  `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                  `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                  `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                  `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                 `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                 `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                 `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message               `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobKeypairStatus) Reset() {
	*x = RecoveryJobKeypairStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobKeypairStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobKeypairStatus) ProtoMessage() {}

func (x *RecoveryJobKeypairStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobKeypairStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobKeypairStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{66}
}

func (x *RecoveryJobKeypairStatus) GetKeyfair() *proto1.ClusterKeypair {
	if x != nil {
		return x.Keyfair
	}
	return nil
}

func (x *RecoveryJobKeypairStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobKeypairStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobKeypairStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobKeypairStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobKeypairStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobKeypairStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobKeypairStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobKeypairStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobKeypairStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryJobSpecStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceSpec          *proto1.ClusterInstanceSpec `protobuf:"bytes,1,opt,name=instance_spec,json=instanceSpec,proto3" json:"instance_spec,omitempty"`
	RecoveryPointTypeCode string                      `protobuf:"bytes,2,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint         int64                       `protobuf:"varint,3,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ElapsedTime           int64                       `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	StartedAt             int64                       `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt            int64                       `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	StateCode             string                      `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	ResultCode            string                      `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	TypeCode              string                      `protobuf:"bytes,9,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	FailedReason          *Message                    `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryJobSpecStatus) Reset() {
	*x = RecoveryJobSpecStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobSpecStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobSpecStatus) ProtoMessage() {}

func (x *RecoveryJobSpecStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobSpecStatus.ProtoReflect.Descriptor instead.
func (*RecoveryJobSpecStatus) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{67}
}

func (x *RecoveryJobSpecStatus) GetInstanceSpec() *proto1.ClusterInstanceSpec {
	if x != nil {
		return x.InstanceSpec
	}
	return nil
}

func (x *RecoveryJobSpecStatus) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryJobSpecStatus) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryJobSpecStatus) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryJobSpecStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryJobSpecStatus) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryJobSpecStatus) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *RecoveryJobSpecStatus) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryJobSpecStatus) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *RecoveryJobSpecStatus) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type MonitorRecoveryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId    uint64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Interval uint32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *MonitorRecoveryJobRequest) Reset() {
	*x = MonitorRecoveryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRecoveryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRecoveryJobRequest) ProtoMessage() {}

func (x *MonitorRecoveryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRecoveryJobRequest.ProtoReflect.Descriptor instead.
func (*MonitorRecoveryJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{68}
}

func (x *MonitorRecoveryJobRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MonitorRecoveryJobRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *MonitorRecoveryJobRequest) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type MonitorRecoveryJobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *RecoveryJobStatus                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Tenants        []*RecoveryJobTenantStatus        `protobuf:"bytes,2,rep,name=tenants,proto3" json:"tenants,omitempty"`
	SecurityGroups []*RecoveryJobSecurityGroupStatus `protobuf:"bytes,3,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	Networks       []*RecoveryJobNetworkStatus       `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty"`
	Subnets        []*RecoveryJobSubnetStatus        `protobuf:"bytes,5,rep,name=subnets,proto3" json:"subnets,omitempty"`
	FloatingIp     []*RecoveryJobFloatingIPStatus    `protobuf:"bytes,6,rep,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty"`
	Routers        []*RecoveryJobRouterStatus        `protobuf:"bytes,7,rep,name=routers,proto3" json:"routers,omitempty"`
	Volumes        []*RecoveryJobVolumeStatus        `protobuf:"bytes,8,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Keypair        []*RecoveryJobKeypairStatus       `protobuf:"bytes,9,rep,name=keypair,proto3" json:"keypair,omitempty"`
	InstanceSpecs  []*RecoveryJobSpecStatus          `protobuf:"bytes,10,rep,name=instance_specs,json=instanceSpecs,proto3" json:"instance_specs,omitempty"`
	Instances      []*RecoveryJobInstanceStatus      `protobuf:"bytes,11,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *MonitorRecoveryJobStatusResponse) Reset() {
	*x = MonitorRecoveryJobStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRecoveryJobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRecoveryJobStatusResponse) ProtoMessage() {}

func (x *MonitorRecoveryJobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRecoveryJobStatusResponse.ProtoReflect.Descriptor instead.
func (*MonitorRecoveryJobStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{69}
}

func (x *MonitorRecoveryJobStatusResponse) GetStatus() *RecoveryJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetTenants() []*RecoveryJobTenantStatus {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetSecurityGroups() []*RecoveryJobSecurityGroupStatus {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetNetworks() []*RecoveryJobNetworkStatus {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetSubnets() []*RecoveryJobSubnetStatus {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetFloatingIp() []*RecoveryJobFloatingIPStatus {
	if x != nil {
		return x.FloatingIp
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetRouters() []*RecoveryJobRouterStatus {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetVolumes() []*RecoveryJobVolumeStatus {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetKeypair() []*RecoveryJobKeypairStatus {
	if x != nil {
		return x.Keypair
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetInstanceSpecs() []*RecoveryJobSpecStatus {
	if x != nil {
		return x.InstanceSpecs
	}
	return nil
}

func (x *MonitorRecoveryJobStatusResponse) GetInstances() []*RecoveryJobInstanceStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

type RecoveryJobMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryJobMessageResponse) Reset() {
	*x = RecoveryJobMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryJobMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryJobMessageResponse) ProtoMessage() {}

func (x *RecoveryJobMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryJobMessageResponse.ProtoReflect.Descriptor instead.
func (*RecoveryJobMessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{70}
}

func (x *RecoveryJobMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type PauseRecoveryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId   uint64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *PauseRecoveryJobRequest) Reset() {
	*x = PauseRecoveryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseRecoveryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseRecoveryJobRequest) ProtoMessage() {}

func (x *PauseRecoveryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseRecoveryJobRequest.ProtoReflect.Descriptor instead.
func (*PauseRecoveryJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{71}
}

func (x *PauseRecoveryJobRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *PauseRecoveryJobRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type ExtendRecoveryJobPausingTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId      uint64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ExtendTime uint32 `protobuf:"varint,3,opt,name=extend_time,json=extendTime,proto3" json:"extend_time,omitempty"`
}

func (x *ExtendRecoveryJobPausingTimeRequest) Reset() {
	*x = ExtendRecoveryJobPausingTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendRecoveryJobPausingTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendRecoveryJobPausingTimeRequest) ProtoMessage() {}

func (x *ExtendRecoveryJobPausingTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendRecoveryJobPausingTimeRequest.ProtoReflect.Descriptor instead.
func (*ExtendRecoveryJobPausingTimeRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{72}
}

func (x *ExtendRecoveryJobPausingTimeRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ExtendRecoveryJobPausingTimeRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *ExtendRecoveryJobPausingTimeRequest) GetExtendTime() uint32 {
	if x != nil {
		return x.ExtendTime
	}
	return 0
}

type ExtendRecoveryJobRollbackTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId      uint64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ExtendTime uint32 `protobuf:"varint,3,opt,name=extend_time,json=extendTime,proto3" json:"extend_time,omitempty"`
}

func (x *ExtendRecoveryJobRollbackTimeRequest) Reset() {
	*x = ExtendRecoveryJobRollbackTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendRecoveryJobRollbackTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendRecoveryJobRollbackTimeRequest) ProtoMessage() {}

func (x *ExtendRecoveryJobRollbackTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendRecoveryJobRollbackTimeRequest.ProtoReflect.Descriptor instead.
func (*ExtendRecoveryJobRollbackTimeRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{73}
}

func (x *ExtendRecoveryJobRollbackTimeRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ExtendRecoveryJobRollbackTimeRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *ExtendRecoveryJobRollbackTimeRequest) GetExtendTime() uint32 {
	if x != nil {
		return x.ExtendTime
	}
	return 0
}

type RetryRecoveryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId               uint64                    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JobId                 uint64                    `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RecoveryPointTypeCode string                    `protobuf:"bytes,3,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPointSnapshot *ProtectionGroupSnapshot  `protobuf:"bytes,4,opt,name=recovery_point_snapshot,json=recoveryPointSnapshot,proto3" json:"recovery_point_snapshot,omitempty"`
	Instances             []*proto1.ClusterInstance `protobuf:"bytes,5,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *RetryRecoveryJobRequest) Reset() {
	*x = RetryRecoveryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryRecoveryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryRecoveryJobRequest) ProtoMessage() {}

func (x *RetryRecoveryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryRecoveryJobRequest.ProtoReflect.Descriptor instead.
func (*RetryRecoveryJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{74}
}

func (x *RetryRecoveryJobRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RetryRecoveryJobRequest) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *RetryRecoveryJobRequest) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RetryRecoveryJobRequest) GetRecoveryPointSnapshot() *ProtectionGroupSnapshot {
	if x != nil {
		return x.RecoveryPointSnapshot
	}
	return nil
}

func (x *RetryRecoveryJobRequest) GetInstances() []*proto1.ClusterInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type RecoveryResultInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionClusterInstance *proto1.ClusterInstance   `protobuf:"bytes,1,opt,name=protection_cluster_instance,json=protectionClusterInstance,proto3" json:"protection_cluster_instance,omitempty"`
	RecoveryClusterInstance   *proto1.ClusterInstance   `protobuf:"bytes,2,opt,name=recovery_cluster_instance,json=recoveryClusterInstance,proto3" json:"recovery_cluster_instance,omitempty"`
	RecoveryPointTypeCode     string                    `protobuf:"bytes,3,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint             int64                     `protobuf:"varint,4,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	AutoStartFlag             bool                      `protobuf:"varint,5,opt,name=auto_start_flag,json=autoStartFlag,proto3" json:"auto_start_flag,omitempty"`
	DiagnosisFlag             bool                      `protobuf:"varint,6,opt,name=diagnosis_flag,json=diagnosisFlag,proto3" json:"diagnosis_flag,omitempty"`
	DiagnosisMethodCode       string                    `protobuf:"bytes,7,opt,name=diagnosis_method_code,json=diagnosisMethodCode,proto3" json:"diagnosis_method_code,omitempty"`
	DiagnosisMethodData       string                    `protobuf:"bytes,8,opt,name=diagnosis_method_data,json=diagnosisMethodData,proto3" json:"diagnosis_method_data,omitempty"`
	DiagnosisTimeout          uint32                    `protobuf:"varint,9,opt,name=diagnosis_timeout,json=diagnosisTimeout,proto3" json:"diagnosis_timeout,omitempty"`
	Dependencies              []*proto1.ClusterInstance `protobuf:"bytes,10,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	StartedAt                 int64                     `protobuf:"varint,11,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt                int64                     `protobuf:"varint,12,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ResultCode                string                    `protobuf:"bytes,13,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	FailedReason              *Message                  `protobuf:"bytes,14,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (x *RecoveryResultInstance) Reset() {
	*x = RecoveryResultInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryResultInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryResultInstance) ProtoMessage() {}

func (x *RecoveryResultInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryResultInstance.ProtoReflect.Descriptor instead.
func (*RecoveryResultInstance) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{75}
}

func (x *RecoveryResultInstance) GetProtectionClusterInstance() *proto1.ClusterInstance {
	if x != nil {
		return x.ProtectionClusterInstance
	}
	return nil
}

func (x *RecoveryResultInstance) GetRecoveryClusterInstance() *proto1.ClusterInstance {
	if x != nil {
		return x.RecoveryClusterInstance
	}
	return nil
}

func (x *RecoveryResultInstance) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryResultInstance) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryResultInstance) GetAutoStartFlag() bool {
	if x != nil {
		return x.AutoStartFlag
	}
	return false
}

func (x *RecoveryResultInstance) GetDiagnosisFlag() bool {
	if x != nil {
		return x.DiagnosisFlag
	}
	return false
}

func (x *RecoveryResultInstance) GetDiagnosisMethodCode() string {
	if x != nil {
		return x.DiagnosisMethodCode
	}
	return ""
}

func (x *RecoveryResultInstance) GetDiagnosisMethodData() string {
	if x != nil {
		return x.DiagnosisMethodData
	}
	return ""
}

func (x *RecoveryResultInstance) GetDiagnosisTimeout() uint32 {
	if x != nil {
		return x.DiagnosisTimeout
	}
	return 0
}

func (x *RecoveryResultInstance) GetDependencies() []*proto1.ClusterInstance {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *RecoveryResultInstance) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryResultInstance) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryResultInstance) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryResultInstance) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

type RecoveryResultVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionClusterVolume *proto1.ClusterVolume `protobuf:"bytes,1,opt,name=protection_cluster_volume,json=protectionClusterVolume,proto3" json:"protection_cluster_volume,omitempty"`
	RecoveryClusterVolume   *proto1.ClusterVolume `protobuf:"bytes,2,opt,name=recovery_cluster_volume,json=recoveryClusterVolume,proto3" json:"recovery_cluster_volume,omitempty"`
	RecoveryPointTypeCode   string                `protobuf:"bytes,3,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint           int64                 `protobuf:"varint,4,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	StartedAt               int64                 `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt              int64                 `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ResultCode              string                `protobuf:"bytes,7,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	FailedReason            *Message              `protobuf:"bytes,8,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
	RollbackFlag            bool                  `protobuf:"varint,9,opt,name=rollback_flag,json=rollbackFlag,proto3" json:"rollback_flag,omitempty"`
}

func (x *RecoveryResultVolume) Reset() {
	*x = RecoveryResultVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryResultVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryResultVolume) ProtoMessage() {}

func (x *RecoveryResultVolume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryResultVolume.ProtoReflect.Descriptor instead.
func (*RecoveryResultVolume) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{76}
}

func (x *RecoveryResultVolume) GetProtectionClusterVolume() *proto1.ClusterVolume {
	if x != nil {
		return x.ProtectionClusterVolume
	}
	return nil
}

func (x *RecoveryResultVolume) GetRecoveryClusterVolume() *proto1.ClusterVolume {
	if x != nil {
		return x.RecoveryClusterVolume
	}
	return nil
}

func (x *RecoveryResultVolume) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryResultVolume) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryResultVolume) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryResultVolume) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryResultVolume) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryResultVolume) GetFailedReason() *Message {
	if x != nil {
		return x.FailedReason
	}
	return nil
}

func (x *RecoveryResultVolume) GetRollbackFlag() bool {
	if x != nil {
		return x.RollbackFlag
	}
	return false
}

type RecoveryResultRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionClusterRouter *proto1.ClusterRouter `protobuf:"bytes,1,opt,name=protection_cluster_router,json=protectionClusterRouter,proto3" json:"protection_cluster_router,omitempty"`
	RecoveryClusterRouter   *proto1.ClusterRouter `protobuf:"bytes,2,opt,name=recovery_cluster_router,json=recoveryClusterRouter,proto3" json:"recovery_cluster_router,omitempty"`
}

func (x *RecoveryResultRouter) Reset() {
	*x = RecoveryResultRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryResultRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryResultRouter) ProtoMessage() {}

func (x *RecoveryResultRouter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryResultRouter.ProtoReflect.Descriptor instead.
func (*RecoveryResultRouter) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{77}
}

func (x *RecoveryResultRouter) GetProtectionClusterRouter() *proto1.ClusterRouter {
	if x != nil {
		return x.ProtectionClusterRouter
	}
	return nil
}

func (x *RecoveryResultRouter) GetRecoveryClusterRouter() *proto1.ClusterRouter {
	if x != nil {
		return x.RecoveryClusterRouter
	}
	return nil
}

type RecoveryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperatorId                 uint64                    `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorAccount            string                    `protobuf:"bytes,3,opt,name=operator_account,json=operatorAccount,proto3" json:"operator_account,omitempty"`
	OperatorName               string                    `protobuf:"bytes,4,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty"`
	OperatorDepartment         string                    `protobuf:"bytes,5,opt,name=operator_department,json=operatorDepartment,proto3" json:"operator_department,omitempty"`
	OperatorPosition           string                    `protobuf:"bytes,6,opt,name=operator_position,json=operatorPosition,proto3" json:"operator_position,omitempty"`
	ApproverId                 uint64                    `protobuf:"varint,7,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`
	ApproverAccount            string                    `protobuf:"bytes,8,opt,name=approver_account,json=approverAccount,proto3" json:"approver_account,omitempty"`
	ApproverName               string                    `protobuf:"bytes,9,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	ApproverDepartment         string                    `protobuf:"bytes,10,opt,name=approver_department,json=approverDepartment,proto3" json:"approver_department,omitempty"`
	ApproverPosition           string                    `protobuf:"bytes,11,opt,name=approver_position,json=approverPosition,proto3" json:"approver_position,omitempty"`
	ProtectionGroupId          uint64                    `protobuf:"varint,12,opt,name=protection_group_id,json=protectionGroupId,proto3" json:"protection_group_id,omitempty"`
	ProtectionGroupName        string                    `protobuf:"bytes,13,opt,name=protection_group_name,json=protectionGroupName,proto3" json:"protection_group_name,omitempty"`
	ProtectionGroupRemarks     string                    `protobuf:"bytes,14,opt,name=protection_group_remarks,json=protectionGroupRemarks,proto3" json:"protection_group_remarks,omitempty"`
	RecoveryPlanId             uint64                    `protobuf:"varint,15,opt,name=recovery_plan_id,json=recoveryPlanId,proto3" json:"recovery_plan_id,omitempty"`
	RecoveryPlanName           string                    `protobuf:"bytes,16,opt,name=recovery_plan_name,json=recoveryPlanName,proto3" json:"recovery_plan_name,omitempty"`
	RecoveryPlanRemarks        string                    `protobuf:"bytes,17,opt,name=recovery_plan_remarks,json=recoveryPlanRemarks,proto3" json:"recovery_plan_remarks,omitempty"`
	ProtectionClusterId        uint64                    `protobuf:"varint,18,opt,name=protection_cluster_id,json=protectionClusterId,proto3" json:"protection_cluster_id,omitempty"`
	ProtectionClusterTypeCode  string                    `protobuf:"bytes,19,opt,name=protection_cluster_type_code,json=protectionClusterTypeCode,proto3" json:"protection_cluster_type_code,omitempty"`
	ProtectionClusterName      string                    `protobuf:"bytes,20,opt,name=protection_cluster_name,json=protectionClusterName,proto3" json:"protection_cluster_name,omitempty"`
	ProtectionClusterRemarks   string                    `protobuf:"bytes,21,opt,name=protection_cluster_remarks,json=protectionClusterRemarks,proto3" json:"protection_cluster_remarks,omitempty"`
	RecoveryClusterId          uint64                    `protobuf:"varint,22,opt,name=recovery_cluster_id,json=recoveryClusterId,proto3" json:"recovery_cluster_id,omitempty"`
	RecoveryClusterTypeCode    string                    `protobuf:"bytes,23,opt,name=recovery_cluster_type_code,json=recoveryClusterTypeCode,proto3" json:"recovery_cluster_type_code,omitempty"`
	RecoveryClusterName        string                    `protobuf:"bytes,24,opt,name=recovery_cluster_name,json=recoveryClusterName,proto3" json:"recovery_cluster_name,omitempty"`
	RecoveryClusterRemarks     string                    `protobuf:"bytes,25,opt,name=recovery_cluster_remarks,json=recoveryClusterRemarks,proto3" json:"recovery_cluster_remarks,omitempty"`
	RecoveryTypeCode           string                    `protobuf:"bytes,26,opt,name=recovery_type_code,json=recoveryTypeCode,proto3" json:"recovery_type_code,omitempty"`
	RecoveryDirectionCode      string                    `protobuf:"bytes,27,opt,name=recovery_direction_code,json=recoveryDirectionCode,proto3" json:"recovery_direction_code,omitempty"`
	RecoveryPointObjectiveType string                    `protobuf:"bytes,28,opt,name=recovery_point_objective_type,json=recoveryPointObjectiveType,proto3" json:"recovery_point_objective_type,omitempty"`
	RecoveryPointObjective     uint32                    `protobuf:"varint,29,opt,name=recovery_point_objective,json=recoveryPointObjective,proto3" json:"recovery_point_objective,omitempty"`
	RecoveryTimeObjective      uint32                    `protobuf:"varint,30,opt,name=recovery_time_objective,json=recoveryTimeObjective,proto3" json:"recovery_time_objective,omitempty"`
	RecoveryPointTypeCode      string                    `protobuf:"bytes,31,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
	RecoveryPoint              int64                     `protobuf:"varint,32,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	ScheduleType               string                    `protobuf:"bytes,33,opt,name=schedule_type,json=scheduleType,proto3" json:"schedule_type,omitempty"`
	StartedAt                  int64                     `protobuf:"varint,34,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt                 int64                     `protobuf:"varint,35,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ElapsedTime                int64                     `protobuf:"varint,36,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	ResultCode                 string                    `protobuf:"bytes,37,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	WarningFlag                bool                      `protobuf:"varint,38,opt,name=warning_flag,json=warningFlag,proto3" json:"warning_flag,omitempty"`
	WarningReasons             []*Message                `protobuf:"bytes,39,rep,name=warning_reasons,json=warningReasons,proto3" json:"warning_reasons,omitempty"`
	FailedReasons              []*Message                `protobuf:"bytes,40,rep,name=failed_reasons,json=failedReasons,proto3" json:"failed_reasons,omitempty"`
	TaskLogs                   []*RecoveryTaskLog        `protobuf:"bytes,41,rep,name=task_logs,json=taskLogs,proto3" json:"task_logs,omitempty"`
	Instances                  []*RecoveryResultInstance `protobuf:"bytes,42,rep,name=instances,proto3" json:"instances,omitempty"`
	Volumes                    []*RecoveryResultVolume   `protobuf:"bytes,43,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Routers                    []*RecoveryResultRouter   `protobuf:"bytes,44,rep,name=routers,proto3" json:"routers,omitempty"`
}

func (x *RecoveryResult) Reset() {
	*x = RecoveryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryResult) ProtoMessage() {}

func (x *RecoveryResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryResult.ProtoReflect.Descriptor instead.
func (*RecoveryResult) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{78}
}

func (x *RecoveryResult) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecoveryResult) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *RecoveryResult) GetOperatorAccount() string {
	if x != nil {
		return x.OperatorAccount
	}
	return ""
}

func (x *RecoveryResult) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *RecoveryResult) GetOperatorDepartment() string {
	if x != nil {
		return x.OperatorDepartment
	}
	return ""
}

func (x *RecoveryResult) GetOperatorPosition() string {
	if x != nil {
		return x.OperatorPosition
	}
	return ""
}

func (x *RecoveryResult) GetApproverId() uint64 {
	if x != nil {
		return x.ApproverId
	}
	return 0
}

func (x *RecoveryResult) GetApproverAccount() string {
	if x != nil {
		return x.ApproverAccount
	}
	return ""
}

func (x *RecoveryResult) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *RecoveryResult) GetApproverDepartment() string {
	if x != nil {
		return x.ApproverDepartment
	}
	return ""
}

func (x *RecoveryResult) GetApproverPosition() string {
	if x != nil {
		return x.ApproverPosition
	}
	return ""
}

func (x *RecoveryResult) GetProtectionGroupId() uint64 {
	if x != nil {
		return x.ProtectionGroupId
	}
	return 0
}

func (x *RecoveryResult) GetProtectionGroupName() string {
	if x != nil {
		return x.ProtectionGroupName
	}
	return ""
}

func (x *RecoveryResult) GetProtectionGroupRemarks() string {
	if x != nil {
		return x.ProtectionGroupRemarks
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryPlanId() uint64 {
	if x != nil {
		return x.RecoveryPlanId
	}
	return 0
}

func (x *RecoveryResult) GetRecoveryPlanName() string {
	if x != nil {
		return x.RecoveryPlanName
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryPlanRemarks() string {
	if x != nil {
		return x.RecoveryPlanRemarks
	}
	return ""
}

func (x *RecoveryResult) GetProtectionClusterId() uint64 {
	if x != nil {
		return x.ProtectionClusterId
	}
	return 0
}

func (x *RecoveryResult) GetProtectionClusterTypeCode() string {
	if x != nil {
		return x.ProtectionClusterTypeCode
	}
	return ""
}

func (x *RecoveryResult) GetProtectionClusterName() string {
	if x != nil {
		return x.ProtectionClusterName
	}
	return ""
}

func (x *RecoveryResult) GetProtectionClusterRemarks() string {
	if x != nil {
		return x.ProtectionClusterRemarks
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryClusterId() uint64 {
	if x != nil {
		return x.RecoveryClusterId
	}
	return 0
}

func (x *RecoveryResult) GetRecoveryClusterTypeCode() string {
	if x != nil {
		return x.RecoveryClusterTypeCode
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryClusterName() string {
	if x != nil {
		return x.RecoveryClusterName
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryClusterRemarks() string {
	if x != nil {
		return x.RecoveryClusterRemarks
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryTypeCode() string {
	if x != nil {
		return x.RecoveryTypeCode
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryDirectionCode() string {
	if x != nil {
		return x.RecoveryDirectionCode
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryPointObjectiveType() string {
	if x != nil {
		return x.RecoveryPointObjectiveType
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryPointObjective() uint32 {
	if x != nil {
		return x.RecoveryPointObjective
	}
	return 0
}

func (x *RecoveryResult) GetRecoveryTimeObjective() uint32 {
	if x != nil {
		return x.RecoveryTimeObjective
	}
	return 0
}

func (x *RecoveryResult) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

func (x *RecoveryResult) GetRecoveryPoint() int64 {
	if x != nil {
		return x.RecoveryPoint
	}
	return 0
}

func (x *RecoveryResult) GetScheduleType() string {
	if x != nil {
		return x.ScheduleType
	}
	return ""
}

func (x *RecoveryResult) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RecoveryResult) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *RecoveryResult) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *RecoveryResult) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RecoveryResult) GetWarningFlag() bool {
	if x != nil {
		return x.WarningFlag
	}
	return false
}

func (x *RecoveryResult) GetWarningReasons() []*Message {
	if x != nil {
		return x.WarningReasons
	}
	return nil
}

func (x *RecoveryResult) GetFailedReasons() []*Message {
	if x != nil {
		return x.FailedReasons
	}
	return nil
}

func (x *RecoveryResult) GetTaskLogs() []*RecoveryTaskLog {
	if x != nil {
		return x.TaskLogs
	}
	return nil
}

func (x *RecoveryResult) GetInstances() []*RecoveryResultInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *RecoveryResult) GetVolumes() []*RecoveryResultVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *RecoveryResult) GetRouters() []*RecoveryResultRouter {
	if x != nil {
		return x.Routers
	}
	return nil
}

type RecoveryReportListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Type      string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Result    string                `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	GroupId   uint64                `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string                `protobuf:"bytes,6,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *RecoveryReportListRequest) Reset() {
	*x = RecoveryReportListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryReportListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryReportListRequest) ProtoMessage() {}

func (x *RecoveryReportListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryReportListRequest.ProtoReflect.Descriptor instead.
func (*RecoveryReportListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{79}
}

func (x *RecoveryReportListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *RecoveryReportListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *RecoveryReportListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecoveryReportListRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *RecoveryReportListRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RecoveryReportListRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type RecoveryReportListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports    []*RecoveryResult `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	Pagination *Pagination       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryReportListResponse) Reset() {
	*x = RecoveryReportListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryReportListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryReportListResponse) ProtoMessage() {}

func (x *RecoveryReportListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryReportListResponse.ProtoReflect.Descriptor instead.
func (*RecoveryReportListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{80}
}

func (x *RecoveryReportListResponse) GetReports() []*RecoveryResult {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *RecoveryReportListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *RecoveryReportListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RecoveryReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ResultId uint64 `protobuf:"varint,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *RecoveryReportRequest) Reset() {
	*x = RecoveryReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryReportRequest) ProtoMessage() {}

func (x *RecoveryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryReportRequest.ProtoReflect.Descriptor instead.
func (*RecoveryReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{81}
}

func (x *RecoveryReportRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RecoveryReportRequest) GetResultId() uint64 {
	if x != nil {
		return x.ResultId
	}
	return 0
}

type RecoveryReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report  *RecoveryResult `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Message *Message        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryReportResponse) Reset() {
	*x = RecoveryReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryReportResponse) ProtoMessage() {}

func (x *RecoveryReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryReportResponse.ProtoReflect.Descriptor instead.
func (*RecoveryReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{82}
}

func (x *RecoveryReportResponse) GetReport() *RecoveryResult {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *RecoveryReportResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteRecoveryReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ResultId uint64 `protobuf:"varint,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *DeleteRecoveryReportRequest) Reset() {
	*x = DeleteRecoveryReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecoveryReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecoveryReportRequest) ProtoMessage() {}

func (x *DeleteRecoveryReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecoveryReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecoveryReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{83}
}

func (x *DeleteRecoveryReportRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteRecoveryReportRequest) GetResultId() uint64 {
	if x != nil {
		return x.ResultId
	}
	return 0
}

type DeleteRecoveryReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRecoveryReportResponse) Reset() {
	*x = DeleteRecoveryReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecoveryReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecoveryReportResponse) ProtoMessage() {}

func (x *DeleteRecoveryReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecoveryReportResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecoveryReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteRecoveryReportResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ClusterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCluster    uint64 `protobuf:"varint,1,opt,name=total_cluster,json=totalCluster,proto3" json:"total_cluster,omitempty"`
	ActiveCluster   uint64 `protobuf:"varint,2,opt,name=active_cluster,json=activeCluster,proto3" json:"active_cluster,omitempty"`
	InactiveCluster uint64 `protobuf:"varint,3,opt,name=inactive_cluster,json=inactiveCluster,proto3" json:"inactive_cluster,omitempty"`
}

func (x *ClusterSummary) Reset() {
	*x = ClusterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummary) ProtoMessage() {}

func (x *ClusterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummary.ProtoReflect.Descriptor instead.
func (*ClusterSummary) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{85}
}

func (x *ClusterSummary) GetTotalCluster() uint64 {
	if x != nil {
		return x.TotalCluster
	}
	return 0
}

func (x *ClusterSummary) GetActiveCluster() uint64 {
	if x != nil {
		return x.ActiveCluster
	}
	return 0
}

func (x *ClusterSummary) GetInactiveCluster() uint64 {
	if x != nil {
		return x.InactiveCluster
	}
	return 0
}

type ClusterSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *ClusterSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Message *Message        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterSummaryResponse) Reset() {
	*x = ClusterSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummaryResponse) ProtoMessage() {}

func (x *ClusterSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummaryResponse.ProtoReflect.Descriptor instead.
func (*ClusterSummaryResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{86}
}

func (x *ClusterSummaryResponse) GetSummary() *ClusterSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ClusterSummaryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ProtectionGroupSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalGroup     uint64 `protobuf:"varint,1,opt,name=total_group,json=totalGroup,proto3" json:"total_group,omitempty"`
	NormalGroup    uint64 `protobuf:"varint,2,opt,name=normal_group,json=normalGroup,proto3" json:"normal_group,omitempty"`
	WarningGroup   uint64 `protobuf:"varint,3,opt,name=warning_group,json=warningGroup,proto3" json:"warning_group,omitempty"`
	CriticalGroup  uint64 `protobuf:"varint,4,opt,name=critical_group,json=criticalGroup,proto3" json:"critical_group,omitempty"`
	EmergencyGroup uint64 `protobuf:"varint,5,opt,name=emergency_group,json=emergencyGroup,proto3" json:"emergency_group,omitempty"`
}

func (x *ProtectionGroupSummary) Reset() {
	*x = ProtectionGroupSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSummary) ProtoMessage() {}

func (x *ProtectionGroupSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSummary.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSummary) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{87}
}

func (x *ProtectionGroupSummary) GetTotalGroup() uint64 {
	if x != nil {
		return x.TotalGroup
	}
	return 0
}

func (x *ProtectionGroupSummary) GetNormalGroup() uint64 {
	if x != nil {
		return x.NormalGroup
	}
	return 0
}

func (x *ProtectionGroupSummary) GetWarningGroup() uint64 {
	if x != nil {
		return x.WarningGroup
	}
	return 0
}

func (x *ProtectionGroupSummary) GetCriticalGroup() uint64 {
	if x != nil {
		return x.CriticalGroup
	}
	return 0
}

func (x *ProtectionGroupSummary) GetEmergencyGroup() uint64 {
	if x != nil {
		return x.EmergencyGroup
	}
	return 0
}

type ProtectionGroupSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *ProtectionGroupSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Message *Message                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProtectionGroupSummaryResponse) Reset() {
	*x = ProtectionGroupSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionGroupSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionGroupSummaryResponse) ProtoMessage() {}

func (x *ProtectionGroupSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionGroupSummaryResponse.ProtoReflect.Descriptor instead.
func (*ProtectionGroupSummaryResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{88}
}

func (x *ProtectionGroupSummaryResponse) GetSummary() *ProtectionGroupSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ProtectionGroupSummaryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type InstanceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInstance      uint64 `protobuf:"varint,1,opt,name=total_instance,json=totalInstance,proto3" json:"total_instance,omitempty"`
	ProtectionInstance uint64 `protobuf:"varint,2,opt,name=protection_instance,json=protectionInstance,proto3" json:"protection_instance,omitempty"`
}

func (x *InstanceSummary) Reset() {
	*x = InstanceSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSummary) ProtoMessage() {}

func (x *InstanceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSummary.ProtoReflect.Descriptor instead.
func (*InstanceSummary) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{89}
}

func (x *InstanceSummary) GetTotalInstance() uint64 {
	if x != nil {
		return x.TotalInstance
	}
	return 0
}

func (x *InstanceSummary) GetProtectionInstance() uint64 {
	if x != nil {
		return x.ProtectionInstance
	}
	return 0
}

type InstanceSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *InstanceSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Message *Message         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InstanceSummaryResponse) Reset() {
	*x = InstanceSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSummaryResponse) ProtoMessage() {}

func (x *InstanceSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSummaryResponse.ProtoReflect.Descriptor instead.
func (*InstanceSummaryResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{90}
}

func (x *InstanceSummaryResponse) GetSummary() *InstanceSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *InstanceSummaryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type VolumeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionVolume uint64 `protobuf:"varint,1,opt,name=protection_volume,json=protectionVolume,proto3" json:"protection_volume,omitempty"`
}

func (x *VolumeSummary) Reset() {
	*x = VolumeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSummary) ProtoMessage() {}

func (x *VolumeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSummary.ProtoReflect.Descriptor instead.
func (*VolumeSummary) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{91}
}

func (x *VolumeSummary) GetProtectionVolume() uint64 {
	if x != nil {
		return x.ProtectionVolume
	}
	return 0
}

type VolumeSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *VolumeSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Message *Message       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *VolumeSummaryResponse) Reset() {
	*x = VolumeSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSummaryResponse) ProtoMessage() {}

func (x *VolumeSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSummaryResponse.ProtoReflect.Descriptor instead.
func (*VolumeSummaryResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{92}
}

func (x *VolumeSummaryResponse) GetSummary() *VolumeSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *VolumeSummaryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type JobSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date    string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Success uint64 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Fail    uint64 `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
}

func (x *JobSummary) Reset() {
	*x = JobSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummary) ProtoMessage() {}

func (x *JobSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummary.ProtoReflect.Descriptor instead.
func (*JobSummary) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{93}
}

func (x *JobSummary) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *JobSummary) GetSuccess() uint64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *JobSummary) GetFail() uint64 {
	if x != nil {
		return x.Fail
	}
	return 0
}

type JobSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryType string               `protobuf:"bytes,1,opt,name=recovery_type,json=recoveryType,proto3" json:"recovery_type,omitempty"`
	StartDate    *wrappers.Int64Value `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      *wrappers.Int64Value `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *JobSummaryRequest) Reset() {
	*x = JobSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummaryRequest) ProtoMessage() {}

func (x *JobSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummaryRequest.ProtoReflect.Descriptor instead.
func (*JobSummaryRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{94}
}

func (x *JobSummaryRequest) GetRecoveryType() string {
	if x != nil {
		return x.RecoveryType
	}
	return ""
}

func (x *JobSummaryRequest) GetStartDate() *wrappers.Int64Value {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *JobSummaryRequest) GetEndDate() *wrappers.Int64Value {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type JobSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary []*JobSummary `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty"`
	Message *Message      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JobSummaryResponse) Reset() {
	*x = JobSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummaryResponse) ProtoMessage() {}

func (x *JobSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummaryResponse.ProtoReflect.Descriptor instead.
func (*JobSummaryResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{95}
}

func (x *JobSummaryResponse) GetSummary() []*JobSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *JobSummaryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RelationshipPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Group     *ProtectionGroup `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	StateCode string           `protobuf:"bytes,4,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
}

func (x *RelationshipPlan) Reset() {
	*x = RelationshipPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationshipPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipPlan) ProtoMessage() {}

func (x *RelationshipPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipPlan.ProtoReflect.Descriptor instead.
func (*RelationshipPlan) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{96}
}

func (x *RelationshipPlan) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelationshipPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationshipPlan) GetGroup() *ProtectionGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *RelationshipPlan) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

type ClusterRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionCluster *proto1.Cluster     `protobuf:"bytes,1,opt,name=protection_cluster,json=protectionCluster,proto3" json:"protection_cluster,omitempty"`
	RecoveryCluster   *proto1.Cluster     `protobuf:"bytes,2,opt,name=recovery_cluster,json=recoveryCluster,proto3" json:"recovery_cluster,omitempty"`
	StateCode         string              `protobuf:"bytes,3,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	Plans             []*RelationshipPlan `protobuf:"bytes,4,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *ClusterRelationship) Reset() {
	*x = ClusterRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRelationship) ProtoMessage() {}

func (x *ClusterRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRelationship.ProtoReflect.Descriptor instead.
func (*ClusterRelationship) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{97}
}

func (x *ClusterRelationship) GetProtectionCluster() *proto1.Cluster {
	if x != nil {
		return x.ProtectionCluster
	}
	return nil
}

func (x *ClusterRelationship) GetRecoveryCluster() *proto1.Cluster {
	if x != nil {
		return x.RecoveryCluster
	}
	return nil
}

func (x *ClusterRelationship) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *ClusterRelationship) GetPlans() []*RelationshipPlan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type ClusterRelationshipListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ClusterRelationshipListRequest) Reset() {
	*x = ClusterRelationshipListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRelationshipListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRelationshipListRequest) ProtoMessage() {}

func (x *ClusterRelationshipListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRelationshipListRequest.ProtoReflect.Descriptor instead.
func (*ClusterRelationshipListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{98}
}

func (x *ClusterRelationshipListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterRelationshipListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

type ClusterRelationshipListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterRelationships []*ClusterRelationship `protobuf:"bytes,1,rep,name=cluster_relationships,json=clusterRelationships,proto3" json:"cluster_relationships,omitempty"`
	Pagination           *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message              *Message               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterRelationshipListResponse) Reset() {
	*x = ClusterRelationshipListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRelationshipListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRelationshipListResponse) ProtoMessage() {}

func (x *ClusterRelationshipListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRelationshipListResponse.ProtoReflect.Descriptor instead.
func (*ClusterRelationshipListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{99}
}

func (x *ClusterRelationshipListResponse) GetClusterRelationships() []*ClusterRelationship {
	if x != nil {
		return x.ClusterRelationships
	}
	return nil
}

func (x *ClusterRelationshipListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ClusterRelationshipListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type RecoveryHypervisorResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VcpuTotalCnt      uint32 `protobuf:"varint,3,opt,name=vcpu_total_cnt,json=vcpuTotalCnt,proto3" json:"vcpu_total_cnt,omitempty"`
	VcpuUsedCnt       uint32 `protobuf:"varint,4,opt,name=vcpu_used_cnt,json=vcpuUsedCnt,proto3" json:"vcpu_used_cnt,omitempty"`
	VcpuExpectedUsage uint32 `protobuf:"varint,5,opt,name=vcpu_expected_usage,json=vcpuExpectedUsage,proto3" json:"vcpu_expected_usage,omitempty"`
	MemTotalBytes     uint64 `protobuf:"varint,6,opt,name=mem_total_bytes,json=memTotalBytes,proto3" json:"mem_total_bytes,omitempty"`
	MemUsedBytes      uint64 `protobuf:"varint,7,opt,name=mem_used_bytes,json=memUsedBytes,proto3" json:"mem_used_bytes,omitempty"`
	MemExpectedUsage  uint64 `protobuf:"varint,8,opt,name=mem_expected_usage,json=memExpectedUsage,proto3" json:"mem_expected_usage,omitempty"`
	DiskTotalBytes    uint64 `protobuf:"varint,9,opt,name=disk_total_bytes,json=diskTotalBytes,proto3" json:"disk_total_bytes,omitempty"`
	DiskUsedBytes     uint64 `protobuf:"varint,10,opt,name=disk_used_bytes,json=diskUsedBytes,proto3" json:"disk_used_bytes,omitempty"`
	DiskExpectedUsage uint64 `protobuf:"varint,11,opt,name=disk_expected_usage,json=diskExpectedUsage,proto3" json:"disk_expected_usage,omitempty"`
}

func (x *RecoveryHypervisorResource) Reset() {
	*x = RecoveryHypervisorResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryHypervisorResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryHypervisorResource) ProtoMessage() {}

func (x *RecoveryHypervisorResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryHypervisorResource.ProtoReflect.Descriptor instead.
func (*RecoveryHypervisorResource) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{100}
}

func (x *RecoveryHypervisorResource) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecoveryHypervisorResource) GetVcpuTotalCnt() uint32 {
	if x != nil {
		return x.VcpuTotalCnt
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetVcpuUsedCnt() uint32 {
	if x != nil {
		return x.VcpuUsedCnt
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetVcpuExpectedUsage() uint32 {
	if x != nil {
		return x.VcpuExpectedUsage
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetMemTotalBytes() uint64 {
	if x != nil {
		return x.MemTotalBytes
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetMemUsedBytes() uint64 {
	if x != nil {
		return x.MemUsedBytes
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetMemExpectedUsage() uint64 {
	if x != nil {
		return x.MemExpectedUsage
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetDiskTotalBytes() uint64 {
	if x != nil {
		return x.DiskTotalBytes
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetDiskUsedBytes() uint64 {
	if x != nil {
		return x.DiskUsedBytes
	}
	return 0
}

func (x *RecoveryHypervisorResource) GetDiskExpectedUsage() uint64 {
	if x != nil {
		return x.DiskExpectedUsage
	}
	return 0
}

type RecoveryHypervisorResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId               uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PlanId                uint64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	SnapshotId            uint64 `protobuf:"varint,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	RecoveryPointTypeCode string `protobuf:"bytes,4,opt,name=recovery_point_type_code,json=recoveryPointTypeCode,proto3" json:"recovery_point_type_code,omitempty"`
}

func (x *RecoveryHypervisorResourceRequest) Reset() {
	*x = RecoveryHypervisorResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryHypervisorResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryHypervisorResourceRequest) ProtoMessage() {}

func (x *RecoveryHypervisorResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryHypervisorResourceRequest.ProtoReflect.Descriptor instead.
func (*RecoveryHypervisorResourceRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{101}
}

func (x *RecoveryHypervisorResourceRequest) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RecoveryHypervisorResourceRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *RecoveryHypervisorResourceRequest) GetSnapshotId() uint64 {
	if x != nil {
		return x.SnapshotId
	}
	return 0
}

func (x *RecoveryHypervisorResourceRequest) GetRecoveryPointTypeCode() string {
	if x != nil {
		return x.RecoveryPointTypeCode
	}
	return ""
}

type RecoveryHypervisorResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HypervisorResources []*RecoveryHypervisorResource `protobuf:"bytes,1,rep,name=hypervisor_resources,json=hypervisorResources,proto3" json:"hypervisor_resources,omitempty"`
	Usable              bool                          `protobuf:"varint,2,opt,name=usable,proto3" json:"usable,omitempty"`
	Message             *Message                      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecoveryHypervisorResourceResponse) Reset() {
	*x = RecoveryHypervisorResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryHypervisorResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryHypervisorResourceResponse) ProtoMessage() {}

func (x *RecoveryHypervisorResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryHypervisorResourceResponse.ProtoReflect.Descriptor instead.
func (*RecoveryHypervisorResourceResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{102}
}

func (x *RecoveryHypervisorResourceResponse) GetHypervisorResources() []*RecoveryHypervisorResource {
	if x != nil {
		return x.HypervisorResources
	}
	return nil
}

func (x *RecoveryHypervisorResourceResponse) GetUsable() bool {
	if x != nil {
		return x.Usable
	}
	return false
}

func (x *RecoveryHypervisorResourceResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type InstanceTemplateInstanceDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InstanceTemplateInstanceDependency) Reset() {
	*x = InstanceTemplateInstanceDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateInstanceDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateInstanceDependency) ProtoMessage() {}

func (x *InstanceTemplateInstanceDependency) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateInstanceDependency.ProtoReflect.Descriptor instead.
func (*InstanceTemplateInstanceDependency) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{103}
}

func (x *InstanceTemplateInstanceDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InstanceTemplateInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtectionClusterInstanceName string                                `protobuf:"bytes,1,opt,name=protection_cluster_instance_name,json=protectionClusterInstanceName,proto3" json:"protection_cluster_instance_name,omitempty"`
	AutoStartFlag                 bool                                  `protobuf:"varint,2,opt,name=auto_start_flag,json=autoStartFlag,proto3" json:"auto_start_flag,omitempty"`
	DiagnosisFlag                 bool                                  `protobuf:"varint,3,opt,name=diagnosis_flag,json=diagnosisFlag,proto3" json:"diagnosis_flag,omitempty"`
	DiagnosisMethodCode           string                                `protobuf:"bytes,4,opt,name=diagnosis_method_code,json=diagnosisMethodCode,proto3" json:"diagnosis_method_code,omitempty"`
	DiagnosisMethodData           string                                `protobuf:"bytes,5,opt,name=diagnosis_method_data,json=diagnosisMethodData,proto3" json:"diagnosis_method_data,omitempty"`
	DiagnosisTimeout              uint32                                `protobuf:"varint,6,opt,name=diagnosis_timeout,json=diagnosisTimeout,proto3" json:"diagnosis_timeout,omitempty"`
	Dependencies                  []*InstanceTemplateInstanceDependency `protobuf:"bytes,7,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *InstanceTemplateInstance) Reset() {
	*x = InstanceTemplateInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateInstance) ProtoMessage() {}

func (x *InstanceTemplateInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateInstance.ProtoReflect.Descriptor instead.
func (*InstanceTemplateInstance) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{104}
}

func (x *InstanceTemplateInstance) GetProtectionClusterInstanceName() string {
	if x != nil {
		return x.ProtectionClusterInstanceName
	}
	return ""
}

func (x *InstanceTemplateInstance) GetAutoStartFlag() bool {
	if x != nil {
		return x.AutoStartFlag
	}
	return false
}

func (x *InstanceTemplateInstance) GetDiagnosisFlag() bool {
	if x != nil {
		return x.DiagnosisFlag
	}
	return false
}

func (x *InstanceTemplateInstance) GetDiagnosisMethodCode() string {
	if x != nil {
		return x.DiagnosisMethodCode
	}
	return ""
}

func (x *InstanceTemplateInstance) GetDiagnosisMethodData() string {
	if x != nil {
		return x.DiagnosisMethodData
	}
	return ""
}

func (x *InstanceTemplateInstance) GetDiagnosisTimeout() uint32 {
	if x != nil {
		return x.DiagnosisTimeout
	}
	return 0
}

func (x *InstanceTemplateInstance) GetDependencies() []*InstanceTemplateInstanceDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type InstanceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerGroup *proto1.Group               `protobuf:"bytes,2,opt,name=owner_group,json=ownerGroup,proto3" json:"owner_group,omitempty"`
	Name       string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Remarks    string                      `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreatedAt  int64                       `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Instances  []*InstanceTemplateInstance `protobuf:"bytes,6,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *InstanceTemplate) Reset() {
	*x = InstanceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplate) ProtoMessage() {}

func (x *InstanceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplate.ProtoReflect.Descriptor instead.
func (*InstanceTemplate) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{105}
}

func (x *InstanceTemplate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InstanceTemplate) GetOwnerGroup() *proto1.Group {
	if x != nil {
		return x.OwnerGroup
	}
	return nil
}

func (x *InstanceTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceTemplate) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *InstanceTemplate) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *InstanceTemplate) GetInstances() []*InstanceTemplateInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type InstanceTemplateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates  []*InstanceTemplate `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	Pagination *Pagination         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Message    *Message            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InstanceTemplateListResponse) Reset() {
	*x = InstanceTemplateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateListResponse) ProtoMessage() {}

func (x *InstanceTemplateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateListResponse.ProtoReflect.Descriptor instead.
func (*InstanceTemplateListResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{106}
}

func (x *InstanceTemplateListResponse) GetTemplates() []*InstanceTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *InstanceTemplateListResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *InstanceTemplateListResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type InstanceTemplateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	OwnerGroupId uint64                `protobuf:"varint,3,opt,name=owner_group_id,json=ownerGroupId,proto3" json:"owner_group_id,omitempty"`
	Name         string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InstanceTemplateListRequest) Reset() {
	*x = InstanceTemplateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateListRequest) ProtoMessage() {}

func (x *InstanceTemplateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateListRequest.ProtoReflect.Descriptor instead.
func (*InstanceTemplateListRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{107}
}

func (x *InstanceTemplateListRequest) GetLimit() *wrappers.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *InstanceTemplateListRequest) GetOffset() *wrappers.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *InstanceTemplateListRequest) GetOwnerGroupId() uint64 {
	if x != nil {
		return x.OwnerGroupId
	}
	return 0
}

func (x *InstanceTemplateListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InstanceTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *InstanceTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Message  *Message          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InstanceTemplateResponse) Reset() {
	*x = InstanceTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateResponse) ProtoMessage() {}

func (x *InstanceTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateResponse.ProtoReflect.Descriptor instead.
func (*InstanceTemplateResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{108}
}

func (x *InstanceTemplateResponse) GetTemplate() *InstanceTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *InstanceTemplateResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type InstanceTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId uint64 `protobuf:"varint,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *InstanceTemplateRequest) Reset() {
	*x = InstanceTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateRequest) ProtoMessage() {}

func (x *InstanceTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateRequest.ProtoReflect.Descriptor instead.
func (*InstanceTemplateRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{109}
}

func (x *InstanceTemplateRequest) GetTemplateId() uint64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

type AddInstanceTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *InstanceTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *AddInstanceTemplateRequest) Reset() {
	*x = AddInstanceTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInstanceTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInstanceTemplateRequest) ProtoMessage() {}

func (x *AddInstanceTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInstanceTemplateRequest.ProtoReflect.Descriptor instead.
func (*AddInstanceTemplateRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{110}
}

func (x *AddInstanceTemplateRequest) GetTemplate() *InstanceTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type DeleteInstanceTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId uint64 `protobuf:"varint,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *DeleteInstanceTemplateRequest) Reset() {
	*x = DeleteInstanceTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceTemplateRequest) ProtoMessage() {}

func (x *DeleteInstanceTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceTemplateRequest) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{111}
}

func (x *DeleteInstanceTemplateRequest) GetTemplateId() uint64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

type DeleteInstanceTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteInstanceTemplateResponse) Reset() {
	*x = DeleteInstanceTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_disaster_recovery_manager_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceTemplateResponse) ProtoMessage() {}

func (x *DeleteInstanceTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_disaster_recovery_manager_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceTemplateResponse) Descriptor() ([]byte, []int) {
	return file_proto_disaster_recovery_manager_proto_rawDescGZIP(), []int{112}
}

func (x *DeleteInstanceTemplateResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_proto_disaster_recovery_manager_proto protoreflect.FileDescriptor

var file_proto_disaster_recovery_manager_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x72, 0x6d, 0x73, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4e, 0x31, 0x30, 0x2e,
	0x31, 0x2e, 0x31, 0x2e, 0x32, 0x32, 0x30, 0x2f, 0x63, 0x64, 0x6d, 0x2f, 0x63, 0x64, 0x6d, 0x2d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x31, 0x30, 0x2e,
	0x31, 0x2e, 0x31, 0x2e, 0x32, 0x32, 0x30, 0x2f, 0x63, 0x64, 0x6d, 0x2f, 0x63, 0x64, 0x6d, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x31,
	0x30, 0x2e, 0x31, 0x2e, 0x31, 0x2e, 0x32, 0x32, 0x30, 0x2f, 0x63, 0x64, 0x6d, 0x2f, 0x63, 0x64,
	0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x3d, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x55, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x1e, 0x55, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x1f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2b, 0x0a, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xdd, 0x05, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5b, 0x0a, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x1b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f,
	0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x48, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x33, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x48, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x39, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x22, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x23, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x1e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x24, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x50,
	0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x66, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x3e, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x04, 0x0a,
	0x12, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4e, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x23, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x75, 0x0a, 0x31, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2b, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xff, 0x03, 0x0a, 0x1c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6d, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x69, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x1f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x61, 0x0a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x74, 0x0a, 0x30, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2b, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe4, 0x03, 0x0a, 0x1b, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5e, 0x0a, 0x21, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5f, 0x0a, 0x2d, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x28, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x72, 0x0a, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x2a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xcd, 0x04, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x17, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5f, 0x0a, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x72, 0x0a, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2a, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x2c, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x28, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x81, 0x04, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x18,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x61, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x12, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x11, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xd4, 0x06, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x1b, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x69, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x29, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x74,
	0x0a, 0x30, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x38, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x5b, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a,
	0x12, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xfd, 0x03, 0x0a, 0x12,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x4e, 0x0a, 0x24, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x61, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x22,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a,
	0x12, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe1, 0x04, 0x0a, 0x12,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x19, 0x65, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22,
	0xd9, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x5b, 0x0a, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x49,
	0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x74, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xde, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x6d, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x63, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x27, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xac, 0x03,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x36, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x74, 0x22, 0x4d, 0x0a, 0x1a,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x0f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x64,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x44, 0x74, 0x22, 0x55,
	0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xa1, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x26, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5f,
	0x0a, 0x24, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22,
	0x99, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb6, 0x03, 0x0a, 0x1e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9d, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x99, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xaa, 0x03, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x99, 0x03,
	0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9d, 0x03, 0x0a, 0x18, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x69,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x66, 0x61, 0x69, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xaa, 0x03, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0xc3, 0x05, 0x0a, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x70, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4b, 0x65,
	0x79, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b,
	0x0a, 0x17, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x23, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x50, 0x61, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x24, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x8f, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0xd3, 0x05, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xcc, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0xbf, 0x10, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x22, 0xeb,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x71, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a,
	0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a,
	0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x15, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x0a,
	0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x22, 0xac, 0x01, 0x0a,
	0x11, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x4a,
	0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x13,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x3b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x1f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xb8, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76,
	0x63, 0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76,
	0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x76, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x63,
	0x70, 0x75, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb1, 0x01,
	0x0a, 0x21, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38,
	0x0a, 0x22, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x18, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x17,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xe4, 0x3b, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x55, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x71, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x82, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x32, 0x1b, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x22, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x2a, 0x1b, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa4, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x24, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2a, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x79, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x32, 0x2b,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x86,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x12, 0x20, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6a, 0x6f, 0x62, 0x73, 0x12, 0x75, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x32, 0x29,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73,
	0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x94, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x12, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x30, 0x01, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x6c, 0x6f, 0x67, 0x73,
	0x30, 0x01, 0x12, 0xb6, 0x01, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x30, 0x01, 0x12, 0xb0, 0x01, 0x0a, 0x1c,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3b, 0x12, 0x39, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a,
	0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x30, 0x01, 0x12, 0xa1,
	0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x30, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x22, 0x2f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f,
	0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x12, 0xa9, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x89, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12,
	0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x17, 0x44, 0x6f, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3e, 0x22, 0x3c, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x98, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3a, 0x22, 0x38, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0xb3, 0x01, 0x0a,
	0x1d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x22, 0x39, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x96, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f,
	0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x38, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22,
	0x2f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62,
	0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x93, 0x01, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73,
	0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x24, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8f,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x97, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x0b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x64,
	0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x24, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x6f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x6c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x17, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x9c,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xc4, 0x01,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x42, 0x12, 0x40, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x72, 0x6d,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x72, 0x6d, 0x73,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x64, 0x72,
	0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x72, 0x6d, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x64, 0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_disaster_recovery_manager_proto_rawDescOnce sync.Once
	file_proto_disaster_recovery_manager_proto_rawDescData = file_proto_disaster_recovery_manager_proto_rawDesc
)

func file_proto_disaster_recovery_manager_proto_rawDescGZIP() []byte {
	file_proto_disaster_recovery_manager_proto_rawDescOnce.Do(func() {
		file_proto_disaster_recovery_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_disaster_recovery_manager_proto_rawDescData)
	})
	return file_proto_disaster_recovery_manager_proto_rawDescData
}

var file_proto_disaster_recovery_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 113)
var file_proto_disaster_recovery_manager_proto_goTypes = []interface{}{
	(*Empty)(nil),                                  // 0: drms.Empty
	(*Message)(nil),                                // 1: drms.Message
	(*Pagination)(nil),                             // 2: drms.Pagination
	(*CheckDeletableClusterRequest)(nil),           // 3: drms.CheckDeletableClusterRequest
	(*CheckDeletableClusterResponse)(nil),          // 4: drms.CheckDeletableClusterResponse
	(*UnprotectedInstanceListResponse)(nil),        // 5: drms.UnprotectedInstanceListResponse
	(*UnprotectedInstanceListRequest)(nil),         // 6: drms.UnprotectedInstanceListRequest
	(*RecoveryPlanAbnormalStateReason)(nil),        // 7: drms.RecoveryPlanAbnormalStateReason
	(*ProtectionGroup)(nil),                        // 8: drms.ProtectionGroup
	(*ProtectionGroupListResponse)(nil),            // 9: drms.ProtectionGroupListResponse
	(*ProtectionGroupListRequest)(nil),             // 10: drms.ProtectionGroupListRequest
	(*ProtectionGroupResponse)(nil),                // 11: drms.ProtectionGroupResponse
	(*AddProtectionGroupRequest)(nil),              // 12: drms.AddProtectionGroupRequest
	(*ProtectionGroupRequest)(nil),                 // 13: drms.ProtectionGroupRequest
	(*UpdateProtectionGroupRequest)(nil),           // 14: drms.UpdateProtectionGroupRequest
	(*DeleteProtectionGroupResponse)(nil),          // 15: drms.DeleteProtectionGroupResponse
	(*DeleteProtectionGroupRequest)(nil),           // 16: drms.DeleteProtectionGroupRequest
	(*ProtectionGroupSnapshotListRequest)(nil),     // 17: drms.ProtectionGroupSnapshotListRequest
	(*ProtectionGroupSnapshotListResponse)(nil),    // 18: drms.ProtectionGroupSnapshotListResponse
	(*ProtectionGroupSnapshotRequest)(nil),         // 19: drms.ProtectionGroupSnapshotRequest
	(*ProtectionGroupSnapshotMessageResponse)(nil), // 20: drms.ProtectionGroupSnapshotMessageResponse
	(*DeleteProtectionGroupSnapshotRequest)(nil),   // 21: drms.DeleteProtectionGroupSnapshotRequest
	(*DeleteProtectionGroupSnapshotResponse)(nil),  // 22: drms.DeleteProtectionGroupSnapshotResponse
	(*ProtectionCluster)(nil),                      // 23: drms.ProtectionCluster
	(*History)(nil),                                // 24: drms.History
	(*ProtectionGroupHistoryResponse)(nil),         // 25: drms.ProtectionGroupHistoryResponse
	(*TenantRecoveryPlan)(nil),                     // 26: drms.TenantRecoveryPlan
	(*AvailabilityZoneRecoveryPlan)(nil),           // 27: drms.AvailabilityZoneRecoveryPlan
	(*ExternalNetworkRecoveryPlan)(nil),            // 28: drms.ExternalNetworkRecoveryPlan
	(*RouterRecoveryPlan)(nil),                     // 29: drms.RouterRecoveryPlan
	(*StorageRecoveryPlan)(nil),                    // 30: drms.StorageRecoveryPlan
	(*InstanceRecoveryPlan)(nil),                   // 31: drms.InstanceRecoveryPlan
	(*FloatingIPRecoveryPlan)(nil),                 // 32: drms.FloatingIPRecoveryPlan
	(*VolumeRecoveryPlan)(nil),                     // 33: drms.VolumeRecoveryPlan
	(*RecoveryPlanDetail)(nil),                     // 34: drms.RecoveryPlanDetail
	(*RecoveryPlan)(nil),                           // 35: drms.RecoveryPlan
	(*RecoveryPlanListResponse)(nil),               // 36: drms.RecoveryPlanListResponse
	(*RecoveryPlanListRequest)(nil),                // 37: drms.RecoveryPlanListRequest
	(*RecoveryPlanResponse)(nil),                   // 38: drms.RecoveryPlanResponse
	(*AddRecoveryPlanRequest)(nil),                 // 39: drms.AddRecoveryPlanRequest
	(*RecoveryPlanRequest)(nil),                    // 40: drms.RecoveryPlanRequest
	(*UpdateRecoveryPlanRequest)(nil),              // 41: drms.UpdateRecoveryPlanRequest
	(*DeleteRecoveryPlanResponse)(nil),             // 42: drms.DeleteRecoveryPlanResponse
	(*ProtectionGroupSnapshot)(nil),                // 43: drms.ProtectionGroupSnapshot
	(*RecoveryJob)(nil),                            // 44: drms.RecoveryJob
	(*RecoveryJobListResponse)(nil),                // 45: drms.RecoveryJobListResponse
	(*RecoveryJobListRequest)(nil),                 // 46: drms.RecoveryJobListRequest
	(*AddRecoveryJobRequest)(nil),                  // 47: drms.AddRecoveryJobRequest
	(*RecoveryJobResponse)(nil),                    // 48: drms.RecoveryJobResponse
	(*RecoveryJobRequest)(nil),                     // 49: drms.RecoveryJobRequest
	(*UpdateRecoveryJobRequest)(nil),               // 50: drms.UpdateRecoveryJobRequest
	(*DeleteRecoveryJobResponse)(nil),              // 51: drms.DeleteRecoveryJobResponse
	(*RecoveryJobStatus)(nil),                      // 52: drms.RecoveryJobStatus
	(*MonitorRecoveryJobResponse)(nil),             // 53: drms.MonitorRecoveryJobResponse
	(*RecoveryTaskLog)(nil),                        // 54: drms.RecoveryTaskLog
	(*MonitorRecoveryTaskLogsResponse)(nil),        // 55: drms.MonitorRecoveryTaskLogsResponse
	(*RecoveryJobInstanceStatus)(nil),              // 56: drms.RecoveryJobInstanceStatus
	(*MonitorRecoveryJobInstanceListResponse)(nil), // 57: drms.MonitorRecoveryJobInstanceListResponse
	(*RecoveryJobVolumeStatus)(nil),                // 58: drms.RecoveryJobVolumeStatus
	(*MonitorRecoveryJobVolumeListResponse)(nil),   // 59: drms.MonitorRecoveryJobVolumeListResponse
	(*RecoveryJobTenantStatus)(nil),                // 60: drms.RecoveryJobTenantStatus
	(*RecoveryJobSecurityGroupStatus)(nil),         // 61: drms.RecoveryJobSecurityGroupStatus
	(*RecoveryJobNetworkStatus)(nil),               // 62: drms.RecoveryJobNetworkStatus
	(*RecoveryJobSubnetStatus)(nil),                // 63: drms.RecoveryJobSubnetStatus
	(*RecoveryJobFloatingIPStatus)(nil),            // 64: drms.RecoveryJobFloatingIPStatus
	(*RecoveryJobRouterStatus)(nil),                // 65: drms.RecoveryJobRouterStatus
	(*RecoveryJobKeypairStatus)(nil),               // 66: drms.RecoveryJobKeypairStatus
	(*RecoveryJobSpecStatus)(nil),                  // 67: drms.RecoveryJobSpecStatus
	(*MonitorRecoveryJobRequest)(nil),              // 68: drms.MonitorRecoveryJobRequest
	(*MonitorRecoveryJobStatusResponse)(nil),       // 69: drms.MonitorRecoveryJobStatusResponse
	(*RecoveryJobMessageResponse)(nil),             // 70: drms.RecoveryJobMessageResponse
	(*PauseRecoveryJobRequest)(nil),                // 71: drms.PauseRecoveryJobRequest
	(*ExtendRecoveryJobPausingTimeRequest)(nil),    // 72: drms.ExtendRecoveryJobPausingTimeRequest
	(*ExtendRecoveryJobRollbackTimeRequest)(nil),   // 73: drms.ExtendRecoveryJobRollbackTimeRequest
	(*RetryRecoveryJobRequest)(nil),                // 74: drms.RetryRecoveryJobRequest
	(*RecoveryResultInstance)(nil),                 // 75: drms.RecoveryResultInstance
	(*RecoveryResultVolume)(nil),                   // 76: drms.RecoveryResultVolume
	(*RecoveryResultRouter)(nil),                   // 77: drms.RecoveryResultRouter
	(*RecoveryResult)(nil),                         // 78: drms.RecoveryResult
	(*RecoveryReportListRequest)(nil),              // 79: drms.RecoveryReportListRequest
	(*RecoveryReportListResponse)(nil),             // 80: drms.RecoveryReportListResponse
	(*RecoveryReportRequest)(nil),                  // 81: drms.RecoveryReportRequest
	(*RecoveryReportResponse)(nil),                 // 82: drms.RecoveryReportResponse
	(*DeleteRecoveryReportRequest)(nil),            // 83: drms.DeleteRecoveryReportRequest
	(*DeleteRecoveryReportResponse)(nil),           // 84: drms.DeleteRecoveryReportResponse
	(*ClusterSummary)(nil),                         // 85: drms.ClusterSummary
	(*ClusterSummaryResponse)(nil),                 // 86: drms.ClusterSummaryResponse
	(*ProtectionGroupSummary)(nil),                 // 87: drms.ProtectionGroupSummary
	(*ProtectionGroupSummaryResponse)(nil),         // 88: drms.ProtectionGroupSummaryResponse
	(*InstanceSummary)(nil),                        // 89: drms.InstanceSummary
	(*InstanceSummaryResponse)(nil),                // 90: drms.InstanceSummaryResponse
	(*VolumeSummary)(nil),                          // 91: drms.VolumeSummary
	(*VolumeSummaryResponse)(nil),                  // 92: drms.VolumeSummaryResponse
	(*JobSummary)(nil),                             // 93: drms.JobSummary
	(*JobSummaryRequest)(nil),                      // 94: drms.JobSummaryRequest
	(*JobSummaryResponse)(nil),                     // 95: drms.JobSummaryResponse
	(*RelationshipPlan)(nil),                       // 96: drms.RelationshipPlan
	(*ClusterRelationship)(nil),                    // 97: drms.ClusterRelationship
	(*ClusterRelationshipListRequest)(nil),         // 98: drms.ClusterRelationshipListRequest
	(*ClusterRelationshipListResponse)(nil),        // 99: drms.ClusterRelationshipListResponse
	(*RecoveryHypervisorResource)(nil),             // 100: drms.RecoveryHypervisorResource
	(*RecoveryHypervisorResourceRequest)(nil),      // 101: drms.RecoveryHypervisorResourceRequest
	(*RecoveryHypervisorResourceResponse)(nil),     // 102: drms.RecoveryHypervisorResourceResponse
	(*InstanceTemplateInstanceDependency)(nil),     // 103: drms.InstanceTemplateInstanceDependency
	(*InstanceTemplateInstance)(nil),               // 104: drms.InstanceTemplateInstance
	(*InstanceTemplate)(nil),                       // 105: drms.InstanceTemplate
	(*InstanceTemplateListResponse)(nil),           // 106: drms.InstanceTemplateListResponse
	(*InstanceTemplateListRequest)(nil),            // 107: drms.InstanceTemplateListRequest
	(*InstanceTemplateResponse)(nil),               // 108: drms.InstanceTemplateResponse
	(*InstanceTemplateRequest)(nil),                // 109: drms.InstanceTemplateRequest
	(*AddInstanceTemplateRequest)(nil),             // 110: drms.AddInstanceTemplateRequest
	(*DeleteInstanceTemplateRequest)(nil),          // 111: drms.DeleteInstanceTemplateRequest
	(*DeleteInstanceTemplateResponse)(nil),         // 112: drms.DeleteInstanceTemplateResponse
	(*wrappers.UInt64Value)(nil),                   // 113: google.protobuf.UInt64Value
	(*proto1.ClusterInstance)(nil),                 // 114: cms.ClusterInstance
	(*proto1.Group)(nil),                           // 115: cms.Group
	(*proto1.Cluster)(nil),                         // 116: cms.Cluster
	(*proto1.ClusterTenant)(nil),                   // 117: cms.ClusterTenant
	(*proto1.ClusterAvailabilityZone)(nil),         // 118: cms.ClusterAvailabilityZone
	(*proto1.ClusterNetwork)(nil),                  // 119: cms.ClusterNetwork
	(*proto1.ClusterRouter)(nil),                   // 120: cms.ClusterRouter
	(*proto1.ClusterNetworkRoutingInterface)(nil),  // 121: cms.ClusterNetworkRoutingInterface
	(*proto1.ClusterStorage)(nil),                  // 122: cms.ClusterStorage
	(*proto1.ClusterHypervisor)(nil),               // 123: cms.ClusterHypervisor
	(*proto1.ClusterFloatingIP)(nil),               // 124: cms.ClusterFloatingIP
	(*proto1.ClusterVolume)(nil),                   // 125: cms.ClusterVolume
	(*proto1.ClusterSecurityGroup)(nil),            // 126: cms.ClusterSecurityGroup
	(*proto2.SimpleUser)(nil),                      // 127: identity.SimpleUser
	(*proto3.Schedule)(nil),                        // 128: scheduler.Schedule
	(*proto1.ClusterSubnet)(nil),                   // 129: cms.ClusterSubnet
	(*proto1.ClusterKeypair)(nil),                  // 130: cms.ClusterKeypair
	(*proto1.ClusterInstanceSpec)(nil),             // 131: cms.ClusterInstanceSpec
	(*wrappers.Int64Value)(nil),                    // 132: google.protobuf.Int64Value
}
var file_proto_disaster_recovery_manager_proto_depIdxs = []int32{
	113, // 0: drms.Pagination.page:type_name -> google.protobuf.UInt64Value
	113, // 1: drms.Pagination.total_page:type_name -> google.protobuf.UInt64Value
	113, // 2: drms.Pagination.total_items:type_name -> google.protobuf.UInt64Value
	1,   // 3: drms.CheckDeletableClusterResponse.message:type_name -> drms.Message
	114, // 4: drms.UnprotectedInstanceListResponse.instances:type_name -> cms.ClusterInstance
	2,   // 5: drms.UnprotectedInstanceListResponse.pagination:type_name -> drms.Pagination
	1,   // 6: drms.UnprotectedInstanceListResponse.message:type_name -> drms.Message
	113, // 7: drms.UnprotectedInstanceListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 8: drms.UnprotectedInstanceListRequest.offset:type_name -> google.protobuf.UInt64Value
	1,   // 9: drms.RecoveryPlanAbnormalStateReason.warning:type_name -> drms.Message
	1,   // 10: drms.RecoveryPlanAbnormalStateReason.critical:type_name -> drms.Message
	1,   // 11: drms.RecoveryPlanAbnormalStateReason.emergency:type_name -> drms.Message
	1,   // 12: drms.RecoveryPlanAbnormalStateReason.mirroring:type_name -> drms.Message
	115, // 13: drms.ProtectionGroup.owner_group:type_name -> cms.Group
	116, // 14: drms.ProtectionGroup.protection_cluster:type_name -> cms.Cluster
	7,   // 15: drms.ProtectionGroup.abnormal_state_reasons:type_name -> drms.RecoveryPlanAbnormalStateReason
	114, // 16: drms.ProtectionGroup.instances:type_name -> cms.ClusterInstance
	8,   // 17: drms.ProtectionGroupListResponse.groups:type_name -> drms.ProtectionGroup
	2,   // 18: drms.ProtectionGroupListResponse.pagination:type_name -> drms.Pagination
	1,   // 19: drms.ProtectionGroupListResponse.message:type_name -> drms.Message
	113, // 20: drms.ProtectionGroupListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 21: drms.ProtectionGroupListRequest.offset:type_name -> google.protobuf.UInt64Value
	8,   // 22: drms.ProtectionGroupResponse.group:type_name -> drms.ProtectionGroup
	1,   // 23: drms.ProtectionGroupResponse.message:type_name -> drms.Message
	8,   // 24: drms.AddProtectionGroupRequest.group:type_name -> drms.ProtectionGroup
	8,   // 25: drms.UpdateProtectionGroupRequest.group:type_name -> drms.ProtectionGroup
	1,   // 26: drms.DeleteProtectionGroupResponse.message:type_name -> drms.Message
	43,  // 27: drms.ProtectionGroupSnapshotListResponse.snapshots:type_name -> drms.ProtectionGroupSnapshot
	1,   // 28: drms.ProtectionGroupSnapshotListResponse.message:type_name -> drms.Message
	1,   // 29: drms.ProtectionGroupSnapshotMessageResponse.message:type_name -> drms.Message
	1,   // 30: drms.DeleteProtectionGroupSnapshotResponse.message:type_name -> drms.Message
	8,   // 31: drms.ProtectionCluster.groups:type_name -> drms.ProtectionGroup
	23,  // 32: drms.History.clusters:type_name -> drms.ProtectionCluster
	24,  // 33: drms.ProtectionGroupHistoryResponse.history:type_name -> drms.History
	1,   // 34: drms.ProtectionGroupHistoryResponse.message:type_name -> drms.Message
	117, // 35: drms.TenantRecoveryPlan.protection_cluster_tenant:type_name -> cms.ClusterTenant
	117, // 36: drms.TenantRecoveryPlan.recovery_cluster_tenant:type_name -> cms.ClusterTenant
	1,   // 37: drms.TenantRecoveryPlan.recovery_cluster_tenant_mirror_name_update_reason:type_name -> drms.Message
	118, // 38: drms.AvailabilityZoneRecoveryPlan.protection_cluster_availability_zone:type_name -> cms.ClusterAvailabilityZone
	118, // 39: drms.AvailabilityZoneRecoveryPlan.recovery_cluster_availability_zone:type_name -> cms.ClusterAvailabilityZone
	1,   // 40: drms.AvailabilityZoneRecoveryPlan.recovery_cluster_availability_zone_update_reason:type_name -> drms.Message
	119, // 41: drms.ExternalNetworkRecoveryPlan.protection_cluster_external_network:type_name -> cms.ClusterNetwork
	119, // 42: drms.ExternalNetworkRecoveryPlan.recovery_cluster_external_network:type_name -> cms.ClusterNetwork
	1,   // 43: drms.ExternalNetworkRecoveryPlan.recovery_cluster_external_network_update_reason:type_name -> drms.Message
	120, // 44: drms.RouterRecoveryPlan.protection_cluster_router:type_name -> cms.ClusterRouter
	119, // 45: drms.RouterRecoveryPlan.recovery_cluster_external_network:type_name -> cms.ClusterNetwork
	1,   // 46: drms.RouterRecoveryPlan.recovery_cluster_external_network_update_reason:type_name -> drms.Message
	121, // 47: drms.RouterRecoveryPlan.recovery_cluster_external_routing_interfaces:type_name -> cms.ClusterNetworkRoutingInterface
	122, // 48: drms.StorageRecoveryPlan.protection_cluster_storage:type_name -> cms.ClusterStorage
	122, // 49: drms.StorageRecoveryPlan.recovery_cluster_storage:type_name -> cms.ClusterStorage
	1,   // 50: drms.StorageRecoveryPlan.recovery_cluster_storage_update_reason:type_name -> drms.Message
	1,   // 51: drms.StorageRecoveryPlan.unavailable_reason:type_name -> drms.Message
	114, // 52: drms.InstanceRecoveryPlan.protection_cluster_instance:type_name -> cms.ClusterInstance
	118, // 53: drms.InstanceRecoveryPlan.recovery_cluster_availability_zone:type_name -> cms.ClusterAvailabilityZone
	1,   // 54: drms.InstanceRecoveryPlan.recovery_cluster_availability_zone_update_reason:type_name -> drms.Message
	123, // 55: drms.InstanceRecoveryPlan.recovery_cluster_hypervisor:type_name -> cms.ClusterHypervisor
	114, // 56: drms.InstanceRecoveryPlan.dependencies:type_name -> cms.ClusterInstance
	124, // 57: drms.FloatingIPRecoveryPlan.protection_cluster_floating_ip:type_name -> cms.ClusterFloatingIP
	1,   // 58: drms.FloatingIPRecoveryPlan.unavailable_reason:type_name -> drms.Message
	125, // 59: drms.VolumeRecoveryPlan.protection_cluster_volume:type_name -> cms.ClusterVolume
	122, // 60: drms.VolumeRecoveryPlan.recovery_cluster_storage:type_name -> cms.ClusterStorage
	1,   // 61: drms.VolumeRecoveryPlan.recovery_cluster_storage_update_reason:type_name -> drms.Message
	1,   // 62: drms.VolumeRecoveryPlan.unavailable_reason:type_name -> drms.Message
	26,  // 63: drms.RecoveryPlanDetail.tenants:type_name -> drms.TenantRecoveryPlan
	27,  // 64: drms.RecoveryPlanDetail.availability_zones:type_name -> drms.AvailabilityZoneRecoveryPlan
	28,  // 65: drms.RecoveryPlanDetail.external_networks:type_name -> drms.ExternalNetworkRecoveryPlan
	29,  // 66: drms.RecoveryPlanDetail.routers:type_name -> drms.RouterRecoveryPlan
	30,  // 67: drms.RecoveryPlanDetail.storages:type_name -> drms.StorageRecoveryPlan
	31,  // 68: drms.RecoveryPlanDetail.instances:type_name -> drms.InstanceRecoveryPlan
	32,  // 69: drms.RecoveryPlanDetail.floating_ips:type_name -> drms.FloatingIPRecoveryPlan
	33,  // 70: drms.RecoveryPlanDetail.volumes:type_name -> drms.VolumeRecoveryPlan
	126, // 71: drms.RecoveryPlanDetail.extra_remote_security_groups:type_name -> cms.ClusterSecurityGroup
	116, // 72: drms.RecoveryPlan.protection_cluster:type_name -> cms.Cluster
	116, // 73: drms.RecoveryPlan.recovery_cluster:type_name -> cms.Cluster
	7,   // 74: drms.RecoveryPlan.abnormal_state_reasons:type_name -> drms.RecoveryPlanAbnormalStateReason
	34,  // 75: drms.RecoveryPlan.detail:type_name -> drms.RecoveryPlanDetail
	35,  // 76: drms.RecoveryPlanListResponse.plans:type_name -> drms.RecoveryPlan
	2,   // 77: drms.RecoveryPlanListResponse.pagination:type_name -> drms.Pagination
	1,   // 78: drms.RecoveryPlanListResponse.message:type_name -> drms.Message
	113, // 79: drms.RecoveryPlanListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 80: drms.RecoveryPlanListRequest.offset:type_name -> google.protobuf.UInt64Value
	35,  // 81: drms.RecoveryPlanResponse.plan:type_name -> drms.RecoveryPlan
	1,   // 82: drms.RecoveryPlanResponse.message:type_name -> drms.Message
	35,  // 83: drms.AddRecoveryPlanRequest.plan:type_name -> drms.RecoveryPlan
	35,  // 84: drms.UpdateRecoveryPlanRequest.plan:type_name -> drms.RecoveryPlan
	1,   // 85: drms.DeleteRecoveryPlanResponse.message:type_name -> drms.Message
	127, // 86: drms.RecoveryJob.operator:type_name -> identity.SimpleUser
	8,   // 87: drms.RecoveryJob.group:type_name -> drms.ProtectionGroup
	35,  // 88: drms.RecoveryJob.plan:type_name -> drms.RecoveryPlan
	43,  // 89: drms.RecoveryJob.recovery_point_snapshot:type_name -> drms.ProtectionGroupSnapshot
	128, // 90: drms.RecoveryJob.schedule:type_name -> scheduler.Schedule
	44,  // 91: drms.RecoveryJobListResponse.jobs:type_name -> drms.RecoveryJob
	2,   // 92: drms.RecoveryJobListResponse.pagination:type_name -> drms.Pagination
	1,   // 93: drms.RecoveryJobListResponse.message:type_name -> drms.Message
	113, // 94: drms.RecoveryJobListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 95: drms.RecoveryJobListRequest.offset:type_name -> google.protobuf.UInt64Value
	44,  // 96: drms.AddRecoveryJobRequest.job:type_name -> drms.RecoveryJob
	44,  // 97: drms.RecoveryJobResponse.job:type_name -> drms.RecoveryJob
	1,   // 98: drms.RecoveryJobResponse.message:type_name -> drms.Message
	44,  // 99: drms.UpdateRecoveryJobRequest.job:type_name -> drms.RecoveryJob
	1,   // 100: drms.DeleteRecoveryJobResponse.message:type_name -> drms.Message
	1,   // 101: drms.RecoveryJobStatus.warning_reasons:type_name -> drms.Message
	1,   // 102: drms.RecoveryJobStatus.failed_reasons:type_name -> drms.Message
	52,  // 103: drms.MonitorRecoveryJobResponse.status:type_name -> drms.RecoveryJobStatus
	54,  // 104: drms.MonitorRecoveryTaskLogsResponse.task_logs:type_name -> drms.RecoveryTaskLog
	114, // 105: drms.RecoveryJobInstanceStatus.instance:type_name -> cms.ClusterInstance
	1,   // 106: drms.RecoveryJobInstanceStatus.failed_reason:type_name -> drms.Message
	56,  // 107: drms.MonitorRecoveryJobInstanceListResponse.instances:type_name -> drms.RecoveryJobInstanceStatus
	125, // 108: drms.RecoveryJobVolumeStatus.volume:type_name -> cms.ClusterVolume
	1,   // 109: drms.RecoveryJobVolumeStatus.failed_reason:type_name -> drms.Message
	58,  // 110: drms.MonitorRecoveryJobVolumeListResponse.volumes:type_name -> drms.RecoveryJobVolumeStatus
	117, // 111: drms.RecoveryJobTenantStatus.tenant:type_name -> cms.ClusterTenant
	1,   // 112: drms.RecoveryJobTenantStatus.failed_reason:type_name -> drms.Message
	126, // 113: drms.RecoveryJobSecurityGroupStatus.security_group:type_name -> cms.ClusterSecurityGroup
	1,   // 114: drms.RecoveryJobSecurityGroupStatus.failed_reason:type_name -> drms.Message
	119, // 115: drms.RecoveryJobNetworkStatus.network:type_name -> cms.ClusterNetwork
	1,   // 116: drms.RecoveryJobNetworkStatus.failed_reason:type_name -> drms.Message
	129, // 117: drms.RecoveryJobSubnetStatus.subnet:type_name -> cms.ClusterSubnet
	1,   // 118: drms.RecoveryJobSubnetStatus.failed_reason:type_name -> drms.Message
	124, // 119: drms.RecoveryJobFloatingIPStatus.floating_ip:type_name -> cms.ClusterFloatingIP
	1,   // 120: drms.RecoveryJobFloatingIPStatus.failed_reason:type_name -> drms.Message
	120, // 121: drms.RecoveryJobRouterStatus.router:type_name -> cms.ClusterRouter
	1,   // 122: drms.RecoveryJobRouterStatus.failed_reason:type_name -> drms.Message
	130, // 123: drms.RecoveryJobKeypairStatus.keyfair:type_name -> cms.ClusterKeypair
	1,   // 124: drms.RecoveryJobKeypairStatus.failed_reason:type_name -> drms.Message
	131, // 125: drms.RecoveryJobSpecStatus.instance_spec:type_name -> cms.ClusterInstanceSpec
	1,   // 126: drms.RecoveryJobSpecStatus.failed_reason:type_name -> drms.Message
	52,  // 127: drms.MonitorRecoveryJobStatusResponse.status:type_name -> drms.RecoveryJobStatus
	60,  // 128: drms.MonitorRecoveryJobStatusResponse.tenants:type_name -> drms.RecoveryJobTenantStatus
	61,  // 129: drms.MonitorRecoveryJobStatusResponse.security_groups:type_name -> drms.RecoveryJobSecurityGroupStatus
	62,  // 130: drms.MonitorRecoveryJobStatusResponse.networks:type_name -> drms.RecoveryJobNetworkStatus
	63,  // 131: drms.MonitorRecoveryJobStatusResponse.subnets:type_name -> drms.RecoveryJobSubnetStatus
	64,  // 132: drms.MonitorRecoveryJobStatusResponse.floating_ip:type_name -> drms.RecoveryJobFloatingIPStatus
	65,  // 133: drms.MonitorRecoveryJobStatusResponse.routers:type_name -> drms.RecoveryJobRouterStatus
	58,  // 134: drms.MonitorRecoveryJobStatusResponse.volumes:type_name -> drms.RecoveryJobVolumeStatus
	66,  // 135: drms.MonitorRecoveryJobStatusResponse.keypair:type_name -> drms.RecoveryJobKeypairStatus
	67,  // 136: drms.MonitorRecoveryJobStatusResponse.instance_specs:type_name -> drms.RecoveryJobSpecStatus
	56,  // 137: drms.MonitorRecoveryJobStatusResponse.instances:type_name -> drms.RecoveryJobInstanceStatus
	1,   // 138: drms.RecoveryJobMessageResponse.message:type_name -> drms.Message
	43,  // 139: drms.RetryRecoveryJobRequest.recovery_point_snapshot:type_name -> drms.ProtectionGroupSnapshot
	114, // 140: drms.RetryRecoveryJobRequest.instances:type_name -> cms.ClusterInstance
	114, // 141: drms.RecoveryResultInstance.protection_cluster_instance:type_name -> cms.ClusterInstance
	114, // 142: drms.RecoveryResultInstance.recovery_cluster_instance:type_name -> cms.ClusterInstance
	114, // 143: drms.RecoveryResultInstance.dependencies:type_name -> cms.ClusterInstance
	1,   // 144: drms.RecoveryResultInstance.failed_reason:type_name -> drms.Message
	125, // 145: drms.RecoveryResultVolume.protection_cluster_volume:type_name -> cms.ClusterVolume
	125, // 146: drms.RecoveryResultVolume.recovery_cluster_volume:type_name -> cms.ClusterVolume
	1,   // 147: drms.RecoveryResultVolume.failed_reason:type_name -> drms.Message
	120, // 148: drms.RecoveryResultRouter.protection_cluster_router:type_name -> cms.ClusterRouter
	120, // 149: drms.RecoveryResultRouter.recovery_cluster_router:type_name -> cms.ClusterRouter
	1,   // 150: drms.RecoveryResult.warning_reasons:type_name -> drms.Message
	1,   // 151: drms.RecoveryResult.failed_reasons:type_name -> drms.Message
	54,  // 152: drms.RecoveryResult.task_logs:type_name -> drms.RecoveryTaskLog
	75,  // 153: drms.RecoveryResult.instances:type_name -> drms.RecoveryResultInstance
	76,  // 154: drms.RecoveryResult.volumes:type_name -> drms.RecoveryResultVolume
	77,  // 155: drms.RecoveryResult.routers:type_name -> drms.RecoveryResultRouter
	113, // 156: drms.RecoveryReportListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 157: drms.RecoveryReportListRequest.offset:type_name -> google.protobuf.UInt64Value
	78,  // 158: drms.RecoveryReportListResponse.reports:type_name -> drms.RecoveryResult
	2,   // 159: drms.RecoveryReportListResponse.pagination:type_name -> drms.Pagination
	1,   // 160: drms.RecoveryReportListResponse.message:type_name -> drms.Message
	78,  // 161: drms.RecoveryReportResponse.report:type_name -> drms.RecoveryResult
	1,   // 162: drms.RecoveryReportResponse.message:type_name -> drms.Message
	1,   // 163: drms.DeleteRecoveryReportResponse.message:type_name -> drms.Message
	85,  // 164: drms.ClusterSummaryResponse.summary:type_name -> drms.ClusterSummary
	1,   // 165: drms.ClusterSummaryResponse.message:type_name -> drms.Message
	87,  // 166: drms.ProtectionGroupSummaryResponse.summary:type_name -> drms.ProtectionGroupSummary
	1,   // 167: drms.ProtectionGroupSummaryResponse.message:type_name -> drms.Message
	89,  // 168: drms.InstanceSummaryResponse.summary:type_name -> drms.InstanceSummary
	1,   // 169: drms.InstanceSummaryResponse.message:type_name -> drms.Message
	91,  // 170: drms.VolumeSummaryResponse.summary:type_name -> drms.VolumeSummary
	1,   // 171: drms.VolumeSummaryResponse.message:type_name -> drms.Message
	132, // 172: drms.JobSummaryRequest.start_date:type_name -> google.protobuf.Int64Value
	132, // 173: drms.JobSummaryRequest.end_date:type_name -> google.protobuf.Int64Value
	93,  // 174: drms.JobSummaryResponse.summary:type_name -> drms.JobSummary
	1,   // 175: drms.JobSummaryResponse.message:type_name -> drms.Message
	8,   // 176: drms.RelationshipPlan.group:type_name -> drms.ProtectionGroup
	116, // 177: drms.ClusterRelationship.protection_cluster:type_name -> cms.Cluster
	116, // 178: drms.ClusterRelationship.recovery_cluster:type_name -> cms.Cluster
	96,  // 179: drms.ClusterRelationship.plans:type_name -> drms.RelationshipPlan
	113, // 180: drms.ClusterRelationshipListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 181: drms.ClusterRelationshipListRequest.offset:type_name -> google.protobuf.UInt64Value
	97,  // 182: drms.ClusterRelationshipListResponse.cluster_relationships:type_name -> drms.ClusterRelationship
	2,   // 183: drms.ClusterRelationshipListResponse.pagination:type_name -> drms.Pagination
	1,   // 184: drms.ClusterRelationshipListResponse.message:type_name -> drms.Message
	100, // 185: drms.RecoveryHypervisorResourceResponse.hypervisor_resources:type_name -> drms.RecoveryHypervisorResource
	1,   // 186: drms.RecoveryHypervisorResourceResponse.message:type_name -> drms.Message
	103, // 187: drms.InstanceTemplateInstance.dependencies:type_name -> drms.InstanceTemplateInstanceDependency
	115, // 188: drms.InstanceTemplate.owner_group:type_name -> cms.Group
	104, // 189: drms.InstanceTemplate.instances:type_name -> drms.InstanceTemplateInstance
	105, // 190: drms.InstanceTemplateListResponse.templates:type_name -> drms.InstanceTemplate
	2,   // 191: drms.InstanceTemplateListResponse.pagination:type_name -> drms.Pagination
	1,   // 192: drms.InstanceTemplateListResponse.message:type_name -> drms.Message
	113, // 193: drms.InstanceTemplateListRequest.limit:type_name -> google.protobuf.UInt64Value
	113, // 194: drms.InstanceTemplateListRequest.offset:type_name -> google.protobuf.UInt64Value
	105, // 195: drms.InstanceTemplateResponse.template:type_name -> drms.InstanceTemplate
	1,   // 196: drms.InstanceTemplateResponse.message:type_name -> drms.Message
	105, // 197: drms.AddInstanceTemplateRequest.template:type_name -> drms.InstanceTemplate
	1,   // 198: drms.DeleteInstanceTemplateResponse.message:type_name -> drms.Message
	3,   // 199: drms.DisasterRecoveryManager.CheckDeletableCluster:input_type -> drms.CheckDeletableClusterRequest
	6,   // 200: drms.DisasterRecoveryManager.GetUnprotectedInstanceList:input_type -> drms.UnprotectedInstanceListRequest
	10,  // 201: drms.DisasterRecoveryManager.GetProtectionGroupList:input_type -> drms.ProtectionGroupListRequest
	12,  // 202: drms.DisasterRecoveryManager.AddProtectionGroup:input_type -> drms.AddProtectionGroupRequest
	13,  // 203: drms.DisasterRecoveryManager.GetProtectionGroup:input_type -> drms.ProtectionGroupRequest
	14,  // 204: drms.DisasterRecoveryManager.UpdateProtectionGroup:input_type -> drms.UpdateProtectionGroupRequest
	16,  // 205: drms.DisasterRecoveryManager.DeleteProtectionGroup:input_type -> drms.DeleteProtectionGroupRequest
	17,  // 206: drms.DisasterRecoveryManager.GetProtectionGroupSnapshotList:input_type -> drms.ProtectionGroupSnapshotListRequest
	19,  // 207: drms.DisasterRecoveryManager.AddProtectionGroupSnapshotQueue:input_type -> drms.ProtectionGroupSnapshotRequest
	21,  // 208: drms.DisasterRecoveryManager.DeleteProtectionGroupSnapshot:input_type -> drms.DeleteProtectionGroupSnapshotRequest
	37,  // 209: drms.DisasterRecoveryManager.GetRecoveryPlanList:input_type -> drms.RecoveryPlanListRequest
	39,  // 210: drms.DisasterRecoveryManager.AddRecoveryPlan:input_type -> drms.AddRecoveryPlanRequest
	40,  // 211: drms.DisasterRecoveryManager.GetRecoveryPlan:input_type -> drms.RecoveryPlanRequest
	41,  // 212: drms.DisasterRecoveryManager.UpdateRecoveryPlan:input_type -> drms.UpdateRecoveryPlanRequest
	40,  // 213: drms.DisasterRecoveryManager.DeleteRecoveryPlan:input_type -> drms.RecoveryPlanRequest
	46,  // 214: drms.DisasterRecoveryManager.GetRecoveryJobList:input_type -> drms.RecoveryJobListRequest
	47,  // 215: drms.DisasterRecoveryManager.AddRecoveryJob:input_type -> drms.AddRecoveryJobRequest
	49,  // 216: drms.DisasterRecoveryManager.GetRecoveryJob:input_type -> drms.RecoveryJobRequest
	50,  // 217: drms.DisasterRecoveryManager.UpdateRecoveryJob:input_type -> drms.UpdateRecoveryJobRequest
	49,  // 218: drms.DisasterRecoveryManager.DeleteRecoveryJob:input_type -> drms.RecoveryJobRequest
	68,  // 219: drms.DisasterRecoveryManager.MonitorRecoveryJob:input_type -> drms.MonitorRecoveryJobRequest
	68,  // 220: drms.DisasterRecoveryManager.MonitorRecoveryTaskLogs:input_type -> drms.MonitorRecoveryJobRequest
	68,  // 221: drms.DisasterRecoveryManager.MonitorRecoveryJobInstanceList:input_type -> drms.MonitorRecoveryJobRequest
	68,  // 222: drms.DisasterRecoveryManager.MonitorRecoveryJobVolumeList:input_type -> drms.MonitorRecoveryJobRequest
	68,  // 223: drms.DisasterRecoveryManager.MonitorRecoveryJobStatus:input_type -> drms.MonitorRecoveryJobRequest
	71,  // 224: drms.DisasterRecoveryManager.PauseRecoveryJob:input_type -> drms.PauseRecoveryJobRequest
	72,  // 225: drms.DisasterRecoveryManager.ExtendRecoveryJobPauseTime:input_type -> drms.ExtendRecoveryJobPausingTimeRequest
	49,  // 226: drms.DisasterRecoveryManager.ResumeRecoveryJob:input_type -> drms.RecoveryJobRequest
	49,  // 227: drms.DisasterRecoveryManager.CancelRecoveryJob:input_type -> drms.RecoveryJobRequest
	49,  // 228: drms.DisasterRecoveryManager.DoSimulationJobRollback:input_type -> drms.RecoveryJobRequest
	49,  // 229: drms.DisasterRecoveryManager.DoMigrationJobRollback:input_type -> drms.RecoveryJobRequest
	49,  // 230: drms.DisasterRecoveryManager.RetryRecoveryJobRollback:input_type -> drms.RecoveryJobRequest
	73,  // 231: drms.DisasterRecoveryManager.ExtendRecoveryJobRollbackTime:input_type -> drms.ExtendRecoveryJobRollbackTimeRequest
	49,  // 232: drms.DisasterRecoveryManager.IgnoreRecoveryJobRollback:input_type -> drms.RecoveryJobRequest
	49,  // 233: drms.DisasterRecoveryManager.ConfirmRecoveryJob:input_type -> drms.RecoveryJobRequest
	49,  // 234: drms.DisasterRecoveryManager.RetryConfirmRecoveryJob:input_type -> drms.RecoveryJobRequest
	49,  // 235: drms.DisasterRecoveryManager.CancelConfirmRecoveryJob:input_type -> drms.RecoveryJobRequest
	74,  // 236: drms.DisasterRecoveryManager.RetryRecoveryJob:input_type -> drms.RetryRecoveryJobRequest
	49,  // 237: drms.DisasterRecoveryManager.ForceDeleteRecoveryJob:input_type -> drms.RecoveryJobRequest
	0,   // 238: drms.DisasterRecoveryManager.GetProtectionGroupHistory:input_type -> drms.Empty
	79,  // 239: drms.DisasterRecoveryManager.GetRecoveryReportList:input_type -> drms.RecoveryReportListRequest
	81,  // 240: drms.DisasterRecoveryManager.GetRecoveryReport:input_type -> drms.RecoveryReportRequest
	83,  // 241: drms.DisasterRecoveryManager.DeleteRecoveryReport:input_type -> drms.DeleteRecoveryReportRequest
	0,   // 242: drms.DisasterRecoveryManager.GetClusterSummary:input_type -> drms.Empty
	0,   // 243: drms.DisasterRecoveryManager.GetProtectionGroupSummary:input_type -> drms.Empty
	0,   // 244: drms.DisasterRecoveryManager.GetInstanceSummary:input_type -> drms.Empty
	0,   // 245: drms.DisasterRecoveryManager.GetVolumeSummary:input_type -> drms.Empty
	94,  // 246: drms.DisasterRecoveryManager.GetJobSummary:input_type -> drms.JobSummaryRequest
	98,  // 247: drms.DisasterRecoveryManager.GetClusterRelationshipList:input_type -> drms.ClusterRelationshipListRequest
	101, // 248: drms.DisasterRecoveryManager.GetRecoveryClusterHypervisorResources:input_type -> drms.RecoveryHypervisorResourceRequest
	107, // 249: drms.DisasterRecoveryManager.GetInstanceTemplateList:input_type -> drms.InstanceTemplateListRequest
	109, // 250: drms.DisasterRecoveryManager.GetInstanceTemplate:input_type -> drms.InstanceTemplateRequest
	110, // 251: drms.DisasterRecoveryManager.AddInstanceTemplate:input_type -> drms.AddInstanceTemplateRequest
	111, // 252: drms.DisasterRecoveryManager.DeleteInstanceTemplate:input_type -> drms.DeleteInstanceTemplateRequest
	4,   // 253: drms.DisasterRecoveryManager.CheckDeletableCluster:output_type -> drms.CheckDeletableClusterResponse
	5,   // 254: drms.DisasterRecoveryManager.GetUnprotectedInstanceList:output_type -> drms.UnprotectedInstanceListResponse
	9,   // 255: drms.DisasterRecoveryManager.GetProtectionGroupList:output_type -> drms.ProtectionGroupListResponse
	11,  // 256: drms.DisasterRecoveryManager.AddProtectionGroup:output_type -> drms.ProtectionGroupResponse
	11,  // 257: drms.DisasterRecoveryManager.GetProtectionGroup:output_type -> drms.ProtectionGroupResponse
	11,  // 258: drms.DisasterRecoveryManager.UpdateProtectionGroup:output_type -> drms.ProtectionGroupResponse
	15,  // 259: drms.DisasterRecoveryManager.DeleteProtectionGroup:output_type -> drms.DeleteProtectionGroupResponse
	18,  // 260: drms.DisasterRecoveryManager.GetProtectionGroupSnapshotList:output_type -> drms.ProtectionGroupSnapshotListResponse
	20,  // 261: drms.DisasterRecoveryManager.AddProtectionGroupSnapshotQueue:output_type -> drms.ProtectionGroupSnapshotMessageResponse
	22,  // 262: drms.DisasterRecoveryManager.DeleteProtectionGroupSnapshot:output_type -> drms.DeleteProtectionGroupSnapshotResponse
	36,  // 263: drms.DisasterRecoveryManager.GetRecoveryPlanList:output_type -> drms.RecoveryPlanListResponse
	38,  // 264: drms.DisasterRecoveryManager.AddRecoveryPlan:output_type -> drms.RecoveryPlanResponse
	38,  // 265: drms.DisasterRecoveryManager.GetRecoveryPlan:output_type -> drms.RecoveryPlanResponse
	38,  // 266: drms.DisasterRecoveryManager.UpdateRecoveryPlan:output_type -> drms.RecoveryPlanResponse
	42,  // 267: drms.DisasterRecoveryManager.DeleteRecoveryPlan:output_type -> drms.DeleteRecoveryPlanResponse
	45,  // 268: drms.DisasterRecoveryManager.GetRecoveryJobList:output_type -> drms.RecoveryJobListResponse
	48,  // 269: drms.DisasterRecoveryManager.AddRecoveryJob:output_type -> drms.RecoveryJobResponse
	48,  // 270: drms.DisasterRecoveryManager.GetRecoveryJob:output_type -> drms.RecoveryJobResponse
	48,  // 271: drms.DisasterRecoveryManager.UpdateRecoveryJob:output_type -> drms.RecoveryJobResponse
	51,  // 272: drms.DisasterRecoveryManager.DeleteRecoveryJob:output_type -> drms.DeleteRecoveryJobResponse
	53,  // 273: drms.DisasterRecoveryManager.MonitorRecoveryJob:output_type -> drms.MonitorRecoveryJobResponse
	55,  // 274: drms.DisasterRecoveryManager.MonitorRecoveryTaskLogs:output_type -> drms.MonitorRecoveryTaskLogsResponse
	57,  // 275: drms.DisasterRecoveryManager.MonitorRecoveryJobInstanceList:output_type -> drms.MonitorRecoveryJobInstanceListResponse
	59,  // 276: drms.DisasterRecoveryManager.MonitorRecoveryJobVolumeList:output_type -> drms.MonitorRecoveryJobVolumeListResponse
	69,  // 277: drms.DisasterRecoveryManager.MonitorRecoveryJobStatus:output_type -> drms.MonitorRecoveryJobStatusResponse
	70,  // 278: drms.DisasterRecoveryManager.PauseRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	70,  // 279: drms.DisasterRecoveryManager.ExtendRecoveryJobPauseTime:output_type -> drms.RecoveryJobMessageResponse
	70,  // 280: drms.DisasterRecoveryManager.ResumeRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	70,  // 281: drms.DisasterRecoveryManager.CancelRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	70,  // 282: drms.DisasterRecoveryManager.DoSimulationJobRollback:output_type -> drms.RecoveryJobMessageResponse
	70,  // 283: drms.DisasterRecoveryManager.DoMigrationJobRollback:output_type -> drms.RecoveryJobMessageResponse
	70,  // 284: drms.DisasterRecoveryManager.RetryRecoveryJobRollback:output_type -> drms.RecoveryJobMessageResponse
	70,  // 285: drms.DisasterRecoveryManager.ExtendRecoveryJobRollbackTime:output_type -> drms.RecoveryJobMessageResponse
	70,  // 286: drms.DisasterRecoveryManager.IgnoreRecoveryJobRollback:output_type -> drms.RecoveryJobMessageResponse
	70,  // 287: drms.DisasterRecoveryManager.ConfirmRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	70,  // 288: drms.DisasterRecoveryManager.RetryConfirmRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	70,  // 289: drms.DisasterRecoveryManager.CancelConfirmRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	70,  // 290: drms.DisasterRecoveryManager.RetryRecoveryJob:output_type -> drms.RecoveryJobMessageResponse
	51,  // 291: drms.DisasterRecoveryManager.ForceDeleteRecoveryJob:output_type -> drms.DeleteRecoveryJobResponse
	25,  // 292: drms.DisasterRecoveryManager.GetProtectionGroupHistory:output_type -> drms.ProtectionGroupHistoryResponse
	80,  // 293: drms.DisasterRecoveryManager.GetRecoveryReportList:output_type -> drms.RecoveryReportListResponse
	82,  // 294: drms.DisasterRecoveryManager.GetRecoveryReport:output_type -> drms.RecoveryReportResponse
	84,  // 295: drms.DisasterRecoveryManager.DeleteRecoveryReport:output_type -> drms.DeleteRecoveryReportResponse
	86,  // 296: drms.DisasterRecoveryManager.GetClusterSummary:output_type -> drms.ClusterSummaryResponse
	88,  // 297: drms.DisasterRecoveryManager.GetProtectionGroupSummary:output_type -> drms.ProtectionGroupSummaryResponse
	90,  // 298: drms.DisasterRecoveryManager.GetInstanceSummary:output_type -> drms.InstanceSummaryResponse
	92,  // 299: drms.DisasterRecoveryManager.GetVolumeSummary:output_type -> drms.VolumeSummaryResponse
	95,  // 300: drms.DisasterRecoveryManager.GetJobSummary:output_type -> drms.JobSummaryResponse
	99,  // 301: drms.DisasterRecoveryManager.GetClusterRelationshipList:output_type -> drms.ClusterRelationshipListResponse
	102, // 302: drms.DisasterRecoveryManager.GetRecoveryClusterHypervisorResources:output_type -> drms.RecoveryHypervisorResourceResponse
	106, // 303: drms.DisasterRecoveryManager.GetInstanceTemplateList:output_type -> drms.InstanceTemplateListResponse
	108, // 304: drms.DisasterRecoveryManager.GetInstanceTemplate:output_type -> drms.InstanceTemplateResponse
	108, // 305: drms.DisasterRecoveryManager.AddInstanceTemplate:output_type -> drms.InstanceTemplateResponse
	112, // 306: drms.DisasterRecoveryManager.DeleteInstanceTemplate:output_type -> drms.DeleteInstanceTemplateResponse
	253, // [253:307] is the sub-list for method output_type
	199, // [199:253] is the sub-list for method input_type
	199, // [199:199] is the sub-list for extension type_name
	199, // [199:199] is the sub-list for extension extendee
	0,   // [0:199] is the sub-list for field type_name
}

func init() { file_proto_disaster_recovery_manager_proto_init() }
func file_proto_disaster_recovery_manager_proto_init() {
	if File_proto_disaster_recovery_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_disaster_recovery_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeletableClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeletableClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprotectedInstanceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprotectedInstanceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlanAbnormalStateReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProtectionGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProtectionGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProtectionGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProtectionGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSnapshotListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSnapshotListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSnapshotMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProtectionGroupSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProtectionGroupSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityZoneRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalNetworkRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingIPRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlanDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlanListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlanListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecoveryPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecoveryPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecoveryPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecoveryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecoveryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecoveryJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRecoveryJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryTaskLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRecoveryTaskLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobInstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRecoveryJobInstanceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobVolumeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRecoveryJobVolumeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobTenantStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobSecurityGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobNetworkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobSubnetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobFloatingIPStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobRouterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobKeypairStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobSpecStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRecoveryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRecoveryJobStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryJobMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseRecoveryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendRecoveryJobPausingTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendRecoveryJobRollbackTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryRecoveryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryResultInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryResultVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryResultRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryReportListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryReportListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecoveryReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecoveryReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionGroupSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationshipPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRelationshipListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRelationshipListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryHypervisorResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryHypervisorResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryHypervisorResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateInstanceDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInstanceTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_disaster_recovery_manager_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_disaster_recovery_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   113,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_disaster_recovery_manager_proto_goTypes,
		DependencyIndexes: file_proto_disaster_recovery_manager_proto_depIdxs,
		MessageInfos:      file_proto_disaster_recovery_manager_proto_msgTypes,
	}.Build()
	File_proto_disaster_recovery_manager_proto = out.File
	file_proto_disaster_recovery_manager_proto_rawDesc = nil
	file_proto_disaster_recovery_manager_proto_goTypes = nil
	file_proto_disaster_recovery_manager_proto_depIdxs = nil
}
