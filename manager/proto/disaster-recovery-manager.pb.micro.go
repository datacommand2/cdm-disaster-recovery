// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/disaster-recovery-manager.proto

package drms

import (
	fmt "fmt"
	_ "github.com/datacommand2/cdm-center/cluster-manager/proto"
	_ "github.com/datacommand2/cdm-cloud/services/identity/proto"
	_ "github.com/datacommand2/cdm-cloud/services/scheduler/proto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DisasterRecoveryManager service

func NewDisasterRecoveryManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetUnprotectedInstanceList",
			Path:    []string{"/recovery/unprotected-instances"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetProtectionGroupList",
			Path:    []string{"/recovery/groups"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.AddProtectionGroup",
			Path:    []string{"/recovery/groups"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetProtectionGroup",
			Path:    []string{"/recovery/groups/{group_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.UpdateProtectionGroup",
			Path:    []string{"/recovery/groups/{group_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DeleteProtectionGroup",
			Path:    []string{"/recovery/groups/{group_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetProtectionGroupSnapshotList",
			Path:    []string{"/recovery/groups/{group_id}/snapshots"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.AddProtectionGroupSnapshotQueue",
			Path:    []string{"/recovery/groups/{group_id}/snapshots"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryPlanList",
			Path:    []string{"/recovery/groups/{group_id}/plans"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.AddRecoveryPlan",
			Path:    []string{"/recovery/groups/{group_id}/plans"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryPlan",
			Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.UpdateRecoveryPlan",
			Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DeleteRecoveryPlan",
			Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryJobList",
			Path:    []string{"/recovery/groups/{group_id}/jobs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.AddRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.UpdateRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}"},
			Method:  []string{"PATCH"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DeleteRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.MonitorRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.MonitorRecoveryTaskLogs",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor/task-logs"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.MonitorRecoveryJobInstanceList",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor/instances"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.MonitorRecoveryJobVolumeList",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor/volumes"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.MonitorRecoveryJobStatus",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitors"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.PauseRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/pause"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.ExtendRecoveryJobPauseTime",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/pause/extend"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.ResumeRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/resume"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.CancelRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/cancel"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DoSimulationJobRollback",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/simulation"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DoMigrationJobRollback",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/migration"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.RetryRecoveryJobRollback",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/retry"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.ExtendRecoveryJobRollbackTime",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/extend"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.IgnoreRecoveryJobRollback",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/ignore"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.ConfirmRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/confirm"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.RetryConfirmRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/confirm/retry"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.CancelConfirmRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/confirm/cancel"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.RetryRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/retry"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.ForceDeleteRecoveryJob",
			Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/force-delete"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetProtectionGroupHistory",
			Path:    []string{"/recovery/history"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryReportList",
			Path:    []string{"/recovery/history/{group_id}/reports/{group_name}/list"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryReport",
			Path:    []string{"/recovery/history/{group_id}/reports/{result_id}/detail"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DeleteRecoveryReport",
			Path:    []string{"/recovery/history/{group_id}/reports/{result_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetClusterSummary",
			Path:    []string{"/recovery/dashboard/summary/clusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetProtectionGroupSummary",
			Path:    []string{"/recovery/dashboard/summary/groups"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetInstanceSummary",
			Path:    []string{"/recovery/dashboard/summary/instances"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetVolumeSummary",
			Path:    []string{"/recovery/dashboard/summary/volumes"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetJobSummary",
			Path:    []string{"/recovery/dashboard/summary/jobs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetClusterRelationshipList",
			Path:    []string{"/recovery/dashboard/cluster-relationships"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetRecoveryClusterHypervisorResources",
			Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}/hypervisor-resources"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetInstanceTemplateList",
			Path:    []string{"/recovery/templates"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.GetInstanceTemplate",
			Path:    []string{"/recovery/templates/{template_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.AddInstanceTemplate",
			Path:    []string{"/recovery/templates"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "DisasterRecoveryManager.DeleteInstanceTemplate",
			Path:    []string{"/recovery/templates/{template_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for DisasterRecoveryManager service

type DisasterRecoveryManagerService interface {
	// 클러스터 삭제 가능 여부 확인
	CheckDeletableCluster(ctx context.Context, in *CheckDeletableClusterRequest, opts ...client.CallOption) (*CheckDeletableClusterResponse, error)
	// 클러스터 비보호 인스턴스 목록 조회
	GetUnprotectedInstanceList(ctx context.Context, in *UnprotectedInstanceListRequest, opts ...client.CallOption) (*UnprotectedInstanceListResponse, error)
	// 보호그룹 목록 조회
	GetProtectionGroupList(ctx context.Context, in *ProtectionGroupListRequest, opts ...client.CallOption) (*ProtectionGroupListResponse, error)
	// 보호그룹 등록
	AddProtectionGroup(ctx context.Context, in *AddProtectionGroupRequest, opts ...client.CallOption) (*ProtectionGroupResponse, error)
	// 보호그룹 조회
	GetProtectionGroup(ctx context.Context, in *ProtectionGroupRequest, opts ...client.CallOption) (*ProtectionGroupResponse, error)
	// 보호그룹 수정
	UpdateProtectionGroup(ctx context.Context, in *UpdateProtectionGroupRequest, opts ...client.CallOption) (*ProtectionGroupResponse, error)
	// 보호그룹 삭제
	DeleteProtectionGroup(ctx context.Context, in *DeleteProtectionGroupRequest, opts ...client.CallOption) (*DeleteProtectionGroupResponse, error)
	// 보호그룹 스냅샷 목록 조회
	GetProtectionGroupSnapshotList(ctx context.Context, in *ProtectionGroupSnapshotListRequest, opts ...client.CallOption) (*ProtectionGroupSnapshotListResponse, error)
	// 보호그룹 스냅샷 추가
	AddProtectionGroupSnapshotQueue(ctx context.Context, in *ProtectionGroupSnapshotRequest, opts ...client.CallOption) (*ProtectionGroupSnapshotMessageResponse, error)
	// 보호그룹 스냅샷 삭제
	DeleteProtectionGroupSnapshot(ctx context.Context, in *DeleteProtectionGroupSnapshotRequest, opts ...client.CallOption) (*DeleteProtectionGroupSnapshotResponse, error)
	// 재해복구계획 목록 조회
	GetRecoveryPlanList(ctx context.Context, in *RecoveryPlanListRequest, opts ...client.CallOption) (*RecoveryPlanListResponse, error)
	// 재해복구계획 등록
	AddRecoveryPlan(ctx context.Context, in *AddRecoveryPlanRequest, opts ...client.CallOption) (*RecoveryPlanResponse, error)
	// 재해복구계획 조회
	GetRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, opts ...client.CallOption) (*RecoveryPlanResponse, error)
	// 재해복구계획 수정
	UpdateRecoveryPlan(ctx context.Context, in *UpdateRecoveryPlanRequest, opts ...client.CallOption) (*RecoveryPlanResponse, error)
	// 재해복구계획 삭제
	DeleteRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, opts ...client.CallOption) (*DeleteRecoveryPlanResponse, error)
	// 재해복구작업 목록 조회
	GetRecoveryJobList(ctx context.Context, in *RecoveryJobListRequest, opts ...client.CallOption) (*RecoveryJobListResponse, error)
	// 재해복구작업 생성
	AddRecoveryJob(ctx context.Context, in *AddRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobResponse, error)
	// 재해복구작업 조회
	GetRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobResponse, error)
	// 재해복구작업 수정
	UpdateRecoveryJob(ctx context.Context, in *UpdateRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobResponse, error)
	// 재해복구작업 삭제
	DeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*DeleteRecoveryJobResponse, error)
	// 재해복구작업 모니터링
	MonitorRecoveryJob(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobService, error)
	// 재해복구작업 작업내역 모니터링
	MonitorRecoveryTaskLogs(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryTaskLogsService, error)
	// 재해복구작업 인스턴스 모니터링
	MonitorRecoveryJobInstanceList(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobInstanceListService, error)
	// 재해복구작업 볼륨 모니터링
	MonitorRecoveryJobVolumeList(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobVolumeListService, error)
	// 재해복구작업 모든 상태 모니터링
	MonitorRecoveryJobStatus(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobStatusService, error)
	// 재해복구작업 일시중지
	PauseRecoveryJob(ctx context.Context, in *PauseRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 일시중지 시간 연장
	ExtendRecoveryJobPauseTime(ctx context.Context, in *ExtendRecoveryJobPausingTimeRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 재개
	ResumeRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 취소
	CancelRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 롤백: 모의훈련
	DoSimulationJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 롤백: 재해복구
	DoMigrationJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 롤백 재시도
	RetryRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 롤백 대기시간 연장
	ExtendRecoveryJobRollbackTime(ctx context.Context, in *ExtendRecoveryJobRollbackTimeRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 롤백 무시
	IgnoreRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 확정
	ConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 확정 재시도
	RetryConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 확정 취소
	CancelConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 재시도 (재해복구)
	RetryRecoveryJob(ctx context.Context, in *RetryRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error)
	// 재해복구작업 강제 삭제
	ForceDeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*DeleteRecoveryJobResponse, error)
	// 보호그룹 history 조회
	GetProtectionGroupHistory(ctx context.Context, in *Empty, opts ...client.CallOption) (*ProtectionGroupHistoryResponse, error)
	// 재해복구결과 보고서 목록 조회
	GetRecoveryReportList(ctx context.Context, in *RecoveryReportListRequest, opts ...client.CallOption) (*RecoveryReportListResponse, error)
	// 재해복구결과 보고서 조회
	GetRecoveryReport(ctx context.Context, in *RecoveryReportRequest, opts ...client.CallOption) (*RecoveryReportResponse, error)
	// 재해복구결과 보고서 삭제 (모의훈련)
	DeleteRecoveryReport(ctx context.Context, in *DeleteRecoveryReportRequest, opts ...client.CallOption) (*DeleteRecoveryReportResponse, error)
	// 클러스터 요약 정보 조회
	GetClusterSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*ClusterSummaryResponse, error)
	// 보호그룹 요약 정보 조회
	GetProtectionGroupSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*ProtectionGroupSummaryResponse, error)
	// 인스턴스 요약 정보 조회
	GetInstanceSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*InstanceSummaryResponse, error)
	// 볼륨 요약 정보 조회
	GetVolumeSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*VolumeSummaryResponse, error)
	// 재해복구작업 요약 정보 조회
	GetJobSummary(ctx context.Context, in *JobSummaryRequest, opts ...client.CallOption) (*JobSummaryResponse, error)
	// 클러스터 관계 목록 조회
	GetClusterRelationshipList(ctx context.Context, in *ClusterRelationshipListRequest, opts ...client.CallOption) (*ClusterRelationshipListResponse, error)
	// 복구대상 클러스터 하이퍼바이저 리소스 조회
	GetRecoveryClusterHypervisorResources(ctx context.Context, in *RecoveryHypervisorResourceRequest, opts ...client.CallOption) (*RecoveryHypervisorResourceResponse, error)
	GetInstanceTemplateList(ctx context.Context, in *InstanceTemplateListRequest, opts ...client.CallOption) (*InstanceTemplateListResponse, error)
	GetInstanceTemplate(ctx context.Context, in *InstanceTemplateRequest, opts ...client.CallOption) (*InstanceTemplateResponse, error)
	AddInstanceTemplate(ctx context.Context, in *AddInstanceTemplateRequest, opts ...client.CallOption) (*InstanceTemplateResponse, error)
	DeleteInstanceTemplate(ctx context.Context, in *DeleteInstanceTemplateRequest, opts ...client.CallOption) (*DeleteInstanceTemplateResponse, error)
}

type disasterRecoveryManagerService struct {
	c    client.Client
	name string
}

func NewDisasterRecoveryManagerService(name string, c client.Client) DisasterRecoveryManagerService {
	return &disasterRecoveryManagerService{
		c:    c,
		name: name,
	}
}

func (c *disasterRecoveryManagerService) CheckDeletableCluster(ctx context.Context, in *CheckDeletableClusterRequest, opts ...client.CallOption) (*CheckDeletableClusterResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.CheckDeletableCluster", in)
	out := new(CheckDeletableClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetUnprotectedInstanceList(ctx context.Context, in *UnprotectedInstanceListRequest, opts ...client.CallOption) (*UnprotectedInstanceListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetUnprotectedInstanceList", in)
	out := new(UnprotectedInstanceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetProtectionGroupList(ctx context.Context, in *ProtectionGroupListRequest, opts ...client.CallOption) (*ProtectionGroupListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetProtectionGroupList", in)
	out := new(ProtectionGroupListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) AddProtectionGroup(ctx context.Context, in *AddProtectionGroupRequest, opts ...client.CallOption) (*ProtectionGroupResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.AddProtectionGroup", in)
	out := new(ProtectionGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetProtectionGroup(ctx context.Context, in *ProtectionGroupRequest, opts ...client.CallOption) (*ProtectionGroupResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetProtectionGroup", in)
	out := new(ProtectionGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) UpdateProtectionGroup(ctx context.Context, in *UpdateProtectionGroupRequest, opts ...client.CallOption) (*ProtectionGroupResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.UpdateProtectionGroup", in)
	out := new(ProtectionGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DeleteProtectionGroup(ctx context.Context, in *DeleteProtectionGroupRequest, opts ...client.CallOption) (*DeleteProtectionGroupResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DeleteProtectionGroup", in)
	out := new(DeleteProtectionGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetProtectionGroupSnapshotList(ctx context.Context, in *ProtectionGroupSnapshotListRequest, opts ...client.CallOption) (*ProtectionGroupSnapshotListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetProtectionGroupSnapshotList", in)
	out := new(ProtectionGroupSnapshotListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) AddProtectionGroupSnapshotQueue(ctx context.Context, in *ProtectionGroupSnapshotRequest, opts ...client.CallOption) (*ProtectionGroupSnapshotMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.AddProtectionGroupSnapshotQueue", in)
	out := new(ProtectionGroupSnapshotMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DeleteProtectionGroupSnapshot(ctx context.Context, in *DeleteProtectionGroupSnapshotRequest, opts ...client.CallOption) (*DeleteProtectionGroupSnapshotResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DeleteProtectionGroupSnapshot", in)
	out := new(DeleteProtectionGroupSnapshotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryPlanList(ctx context.Context, in *RecoveryPlanListRequest, opts ...client.CallOption) (*RecoveryPlanListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryPlanList", in)
	out := new(RecoveryPlanListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) AddRecoveryPlan(ctx context.Context, in *AddRecoveryPlanRequest, opts ...client.CallOption) (*RecoveryPlanResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.AddRecoveryPlan", in)
	out := new(RecoveryPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, opts ...client.CallOption) (*RecoveryPlanResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryPlan", in)
	out := new(RecoveryPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) UpdateRecoveryPlan(ctx context.Context, in *UpdateRecoveryPlanRequest, opts ...client.CallOption) (*RecoveryPlanResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.UpdateRecoveryPlan", in)
	out := new(RecoveryPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DeleteRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, opts ...client.CallOption) (*DeleteRecoveryPlanResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DeleteRecoveryPlan", in)
	out := new(DeleteRecoveryPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryJobList(ctx context.Context, in *RecoveryJobListRequest, opts ...client.CallOption) (*RecoveryJobListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryJobList", in)
	out := new(RecoveryJobListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) AddRecoveryJob(ctx context.Context, in *AddRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.AddRecoveryJob", in)
	out := new(RecoveryJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryJob", in)
	out := new(RecoveryJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) UpdateRecoveryJob(ctx context.Context, in *UpdateRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.UpdateRecoveryJob", in)
	out := new(RecoveryJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*DeleteRecoveryJobResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DeleteRecoveryJob", in)
	out := new(DeleteRecoveryJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) MonitorRecoveryJob(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobService, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.MonitorRecoveryJob", &MonitorRecoveryJobRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &disasterRecoveryManagerServiceMonitorRecoveryJob{stream}, nil
}

type DisasterRecoveryManager_MonitorRecoveryJobService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MonitorRecoveryJobResponse, error)
}

type disasterRecoveryManagerServiceMonitorRecoveryJob struct {
	stream client.Stream
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJob) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJob) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJob) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJob) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJob) Recv() (*MonitorRecoveryJobResponse, error) {
	m := new(MonitorRecoveryJobResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *disasterRecoveryManagerService) MonitorRecoveryTaskLogs(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryTaskLogsService, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.MonitorRecoveryTaskLogs", &MonitorRecoveryJobRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &disasterRecoveryManagerServiceMonitorRecoveryTaskLogs{stream}, nil
}

type DisasterRecoveryManager_MonitorRecoveryTaskLogsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MonitorRecoveryTaskLogsResponse, error)
}

type disasterRecoveryManagerServiceMonitorRecoveryTaskLogs struct {
	stream client.Stream
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryTaskLogs) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryTaskLogs) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryTaskLogs) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryTaskLogs) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryTaskLogs) Recv() (*MonitorRecoveryTaskLogsResponse, error) {
	m := new(MonitorRecoveryTaskLogsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *disasterRecoveryManagerService) MonitorRecoveryJobInstanceList(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobInstanceListService, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.MonitorRecoveryJobInstanceList", &MonitorRecoveryJobRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList{stream}, nil
}

type DisasterRecoveryManager_MonitorRecoveryJobInstanceListService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MonitorRecoveryJobInstanceListResponse, error)
}

type disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList struct {
	stream client.Stream
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobInstanceList) Recv() (*MonitorRecoveryJobInstanceListResponse, error) {
	m := new(MonitorRecoveryJobInstanceListResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *disasterRecoveryManagerService) MonitorRecoveryJobVolumeList(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobVolumeListService, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.MonitorRecoveryJobVolumeList", &MonitorRecoveryJobRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList{stream}, nil
}

type DisasterRecoveryManager_MonitorRecoveryJobVolumeListService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MonitorRecoveryJobVolumeListResponse, error)
}

type disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList struct {
	stream client.Stream
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobVolumeList) Recv() (*MonitorRecoveryJobVolumeListResponse, error) {
	m := new(MonitorRecoveryJobVolumeListResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *disasterRecoveryManagerService) MonitorRecoveryJobStatus(ctx context.Context, in *MonitorRecoveryJobRequest, opts ...client.CallOption) (DisasterRecoveryManager_MonitorRecoveryJobStatusService, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.MonitorRecoveryJobStatus", &MonitorRecoveryJobRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &disasterRecoveryManagerServiceMonitorRecoveryJobStatus{stream}, nil
}

type DisasterRecoveryManager_MonitorRecoveryJobStatusService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MonitorRecoveryJobStatusResponse, error)
}

type disasterRecoveryManagerServiceMonitorRecoveryJobStatus struct {
	stream client.Stream
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobStatus) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobStatus) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobStatus) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobStatus) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerServiceMonitorRecoveryJobStatus) Recv() (*MonitorRecoveryJobStatusResponse, error) {
	m := new(MonitorRecoveryJobStatusResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *disasterRecoveryManagerService) PauseRecoveryJob(ctx context.Context, in *PauseRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.PauseRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) ExtendRecoveryJobPauseTime(ctx context.Context, in *ExtendRecoveryJobPausingTimeRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.ExtendRecoveryJobPauseTime", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) ResumeRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.ResumeRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) CancelRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.CancelRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DoSimulationJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DoSimulationJobRollback", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DoMigrationJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DoMigrationJobRollback", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) RetryRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.RetryRecoveryJobRollback", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) ExtendRecoveryJobRollbackTime(ctx context.Context, in *ExtendRecoveryJobRollbackTimeRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.ExtendRecoveryJobRollbackTime", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) IgnoreRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.IgnoreRecoveryJobRollback", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) ConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.ConfirmRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) RetryConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.RetryConfirmRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) CancelConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.CancelConfirmRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) RetryRecoveryJob(ctx context.Context, in *RetryRecoveryJobRequest, opts ...client.CallOption) (*RecoveryJobMessageResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.RetryRecoveryJob", in)
	out := new(RecoveryJobMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) ForceDeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, opts ...client.CallOption) (*DeleteRecoveryJobResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.ForceDeleteRecoveryJob", in)
	out := new(DeleteRecoveryJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetProtectionGroupHistory(ctx context.Context, in *Empty, opts ...client.CallOption) (*ProtectionGroupHistoryResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetProtectionGroupHistory", in)
	out := new(ProtectionGroupHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryReportList(ctx context.Context, in *RecoveryReportListRequest, opts ...client.CallOption) (*RecoveryReportListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryReportList", in)
	out := new(RecoveryReportListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryReport(ctx context.Context, in *RecoveryReportRequest, opts ...client.CallOption) (*RecoveryReportResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryReport", in)
	out := new(RecoveryReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DeleteRecoveryReport(ctx context.Context, in *DeleteRecoveryReportRequest, opts ...client.CallOption) (*DeleteRecoveryReportResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DeleteRecoveryReport", in)
	out := new(DeleteRecoveryReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetClusterSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*ClusterSummaryResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetClusterSummary", in)
	out := new(ClusterSummaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetProtectionGroupSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*ProtectionGroupSummaryResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetProtectionGroupSummary", in)
	out := new(ProtectionGroupSummaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetInstanceSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*InstanceSummaryResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetInstanceSummary", in)
	out := new(InstanceSummaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetVolumeSummary(ctx context.Context, in *Empty, opts ...client.CallOption) (*VolumeSummaryResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetVolumeSummary", in)
	out := new(VolumeSummaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetJobSummary(ctx context.Context, in *JobSummaryRequest, opts ...client.CallOption) (*JobSummaryResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetJobSummary", in)
	out := new(JobSummaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetClusterRelationshipList(ctx context.Context, in *ClusterRelationshipListRequest, opts ...client.CallOption) (*ClusterRelationshipListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetClusterRelationshipList", in)
	out := new(ClusterRelationshipListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetRecoveryClusterHypervisorResources(ctx context.Context, in *RecoveryHypervisorResourceRequest, opts ...client.CallOption) (*RecoveryHypervisorResourceResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetRecoveryClusterHypervisorResources", in)
	out := new(RecoveryHypervisorResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetInstanceTemplateList(ctx context.Context, in *InstanceTemplateListRequest, opts ...client.CallOption) (*InstanceTemplateListResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetInstanceTemplateList", in)
	out := new(InstanceTemplateListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) GetInstanceTemplate(ctx context.Context, in *InstanceTemplateRequest, opts ...client.CallOption) (*InstanceTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.GetInstanceTemplate", in)
	out := new(InstanceTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) AddInstanceTemplate(ctx context.Context, in *AddInstanceTemplateRequest, opts ...client.CallOption) (*InstanceTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.AddInstanceTemplate", in)
	out := new(InstanceTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disasterRecoveryManagerService) DeleteInstanceTemplate(ctx context.Context, in *DeleteInstanceTemplateRequest, opts ...client.CallOption) (*DeleteInstanceTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DisasterRecoveryManager.DeleteInstanceTemplate", in)
	out := new(DeleteInstanceTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DisasterRecoveryManager service

type DisasterRecoveryManagerHandler interface {
	// 클러스터 삭제 가능 여부 확인
	CheckDeletableCluster(context.Context, *CheckDeletableClusterRequest, *CheckDeletableClusterResponse) error
	// 클러스터 비보호 인스턴스 목록 조회
	GetUnprotectedInstanceList(context.Context, *UnprotectedInstanceListRequest, *UnprotectedInstanceListResponse) error
	// 보호그룹 목록 조회
	GetProtectionGroupList(context.Context, *ProtectionGroupListRequest, *ProtectionGroupListResponse) error
	// 보호그룹 등록
	AddProtectionGroup(context.Context, *AddProtectionGroupRequest, *ProtectionGroupResponse) error
	// 보호그룹 조회
	GetProtectionGroup(context.Context, *ProtectionGroupRequest, *ProtectionGroupResponse) error
	// 보호그룹 수정
	UpdateProtectionGroup(context.Context, *UpdateProtectionGroupRequest, *ProtectionGroupResponse) error
	// 보호그룹 삭제
	DeleteProtectionGroup(context.Context, *DeleteProtectionGroupRequest, *DeleteProtectionGroupResponse) error
	// 보호그룹 스냅샷 목록 조회
	GetProtectionGroupSnapshotList(context.Context, *ProtectionGroupSnapshotListRequest, *ProtectionGroupSnapshotListResponse) error
	// 보호그룹 스냅샷 추가
	AddProtectionGroupSnapshotQueue(context.Context, *ProtectionGroupSnapshotRequest, *ProtectionGroupSnapshotMessageResponse) error
	// 보호그룹 스냅샷 삭제
	DeleteProtectionGroupSnapshot(context.Context, *DeleteProtectionGroupSnapshotRequest, *DeleteProtectionGroupSnapshotResponse) error
	// 재해복구계획 목록 조회
	GetRecoveryPlanList(context.Context, *RecoveryPlanListRequest, *RecoveryPlanListResponse) error
	// 재해복구계획 등록
	AddRecoveryPlan(context.Context, *AddRecoveryPlanRequest, *RecoveryPlanResponse) error
	// 재해복구계획 조회
	GetRecoveryPlan(context.Context, *RecoveryPlanRequest, *RecoveryPlanResponse) error
	// 재해복구계획 수정
	UpdateRecoveryPlan(context.Context, *UpdateRecoveryPlanRequest, *RecoveryPlanResponse) error
	// 재해복구계획 삭제
	DeleteRecoveryPlan(context.Context, *RecoveryPlanRequest, *DeleteRecoveryPlanResponse) error
	// 재해복구작업 목록 조회
	GetRecoveryJobList(context.Context, *RecoveryJobListRequest, *RecoveryJobListResponse) error
	// 재해복구작업 생성
	AddRecoveryJob(context.Context, *AddRecoveryJobRequest, *RecoveryJobResponse) error
	// 재해복구작업 조회
	GetRecoveryJob(context.Context, *RecoveryJobRequest, *RecoveryJobResponse) error
	// 재해복구작업 수정
	UpdateRecoveryJob(context.Context, *UpdateRecoveryJobRequest, *RecoveryJobResponse) error
	// 재해복구작업 삭제
	DeleteRecoveryJob(context.Context, *RecoveryJobRequest, *DeleteRecoveryJobResponse) error
	// 재해복구작업 모니터링
	MonitorRecoveryJob(context.Context, *MonitorRecoveryJobRequest, DisasterRecoveryManager_MonitorRecoveryJobStream) error
	// 재해복구작업 작업내역 모니터링
	MonitorRecoveryTaskLogs(context.Context, *MonitorRecoveryJobRequest, DisasterRecoveryManager_MonitorRecoveryTaskLogsStream) error
	// 재해복구작업 인스턴스 모니터링
	MonitorRecoveryJobInstanceList(context.Context, *MonitorRecoveryJobRequest, DisasterRecoveryManager_MonitorRecoveryJobInstanceListStream) error
	// 재해복구작업 볼륨 모니터링
	MonitorRecoveryJobVolumeList(context.Context, *MonitorRecoveryJobRequest, DisasterRecoveryManager_MonitorRecoveryJobVolumeListStream) error
	// 재해복구작업 모든 상태 모니터링
	MonitorRecoveryJobStatus(context.Context, *MonitorRecoveryJobRequest, DisasterRecoveryManager_MonitorRecoveryJobStatusStream) error
	// 재해복구작업 일시중지
	PauseRecoveryJob(context.Context, *PauseRecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 일시중지 시간 연장
	ExtendRecoveryJobPauseTime(context.Context, *ExtendRecoveryJobPausingTimeRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 재개
	ResumeRecoveryJob(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 취소
	CancelRecoveryJob(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 롤백: 모의훈련
	DoSimulationJobRollback(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 롤백: 재해복구
	DoMigrationJobRollback(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 롤백 재시도
	RetryRecoveryJobRollback(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 롤백 대기시간 연장
	ExtendRecoveryJobRollbackTime(context.Context, *ExtendRecoveryJobRollbackTimeRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 롤백 무시
	IgnoreRecoveryJobRollback(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 확정
	ConfirmRecoveryJob(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 확정 재시도
	RetryConfirmRecoveryJob(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 확정 취소
	CancelConfirmRecoveryJob(context.Context, *RecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 재시도 (재해복구)
	RetryRecoveryJob(context.Context, *RetryRecoveryJobRequest, *RecoveryJobMessageResponse) error
	// 재해복구작업 강제 삭제
	ForceDeleteRecoveryJob(context.Context, *RecoveryJobRequest, *DeleteRecoveryJobResponse) error
	// 보호그룹 history 조회
	GetProtectionGroupHistory(context.Context, *Empty, *ProtectionGroupHistoryResponse) error
	// 재해복구결과 보고서 목록 조회
	GetRecoveryReportList(context.Context, *RecoveryReportListRequest, *RecoveryReportListResponse) error
	// 재해복구결과 보고서 조회
	GetRecoveryReport(context.Context, *RecoveryReportRequest, *RecoveryReportResponse) error
	// 재해복구결과 보고서 삭제 (모의훈련)
	DeleteRecoveryReport(context.Context, *DeleteRecoveryReportRequest, *DeleteRecoveryReportResponse) error
	// 클러스터 요약 정보 조회
	GetClusterSummary(context.Context, *Empty, *ClusterSummaryResponse) error
	// 보호그룹 요약 정보 조회
	GetProtectionGroupSummary(context.Context, *Empty, *ProtectionGroupSummaryResponse) error
	// 인스턴스 요약 정보 조회
	GetInstanceSummary(context.Context, *Empty, *InstanceSummaryResponse) error
	// 볼륨 요약 정보 조회
	GetVolumeSummary(context.Context, *Empty, *VolumeSummaryResponse) error
	// 재해복구작업 요약 정보 조회
	GetJobSummary(context.Context, *JobSummaryRequest, *JobSummaryResponse) error
	// 클러스터 관계 목록 조회
	GetClusterRelationshipList(context.Context, *ClusterRelationshipListRequest, *ClusterRelationshipListResponse) error
	// 복구대상 클러스터 하이퍼바이저 리소스 조회
	GetRecoveryClusterHypervisorResources(context.Context, *RecoveryHypervisorResourceRequest, *RecoveryHypervisorResourceResponse) error
	GetInstanceTemplateList(context.Context, *InstanceTemplateListRequest, *InstanceTemplateListResponse) error
	GetInstanceTemplate(context.Context, *InstanceTemplateRequest, *InstanceTemplateResponse) error
	AddInstanceTemplate(context.Context, *AddInstanceTemplateRequest, *InstanceTemplateResponse) error
	DeleteInstanceTemplate(context.Context, *DeleteInstanceTemplateRequest, *DeleteInstanceTemplateResponse) error
}

func RegisterDisasterRecoveryManagerHandler(s server.Server, hdlr DisasterRecoveryManagerHandler, opts ...server.HandlerOption) error {
	type disasterRecoveryManager interface {
		CheckDeletableCluster(ctx context.Context, in *CheckDeletableClusterRequest, out *CheckDeletableClusterResponse) error
		GetUnprotectedInstanceList(ctx context.Context, in *UnprotectedInstanceListRequest, out *UnprotectedInstanceListResponse) error
		GetProtectionGroupList(ctx context.Context, in *ProtectionGroupListRequest, out *ProtectionGroupListResponse) error
		AddProtectionGroup(ctx context.Context, in *AddProtectionGroupRequest, out *ProtectionGroupResponse) error
		GetProtectionGroup(ctx context.Context, in *ProtectionGroupRequest, out *ProtectionGroupResponse) error
		UpdateProtectionGroup(ctx context.Context, in *UpdateProtectionGroupRequest, out *ProtectionGroupResponse) error
		DeleteProtectionGroup(ctx context.Context, in *DeleteProtectionGroupRequest, out *DeleteProtectionGroupResponse) error
		GetProtectionGroupSnapshotList(ctx context.Context, in *ProtectionGroupSnapshotListRequest, out *ProtectionGroupSnapshotListResponse) error
		AddProtectionGroupSnapshotQueue(ctx context.Context, in *ProtectionGroupSnapshotRequest, out *ProtectionGroupSnapshotMessageResponse) error
		DeleteProtectionGroupSnapshot(ctx context.Context, in *DeleteProtectionGroupSnapshotRequest, out *DeleteProtectionGroupSnapshotResponse) error
		GetRecoveryPlanList(ctx context.Context, in *RecoveryPlanListRequest, out *RecoveryPlanListResponse) error
		AddRecoveryPlan(ctx context.Context, in *AddRecoveryPlanRequest, out *RecoveryPlanResponse) error
		GetRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, out *RecoveryPlanResponse) error
		UpdateRecoveryPlan(ctx context.Context, in *UpdateRecoveryPlanRequest, out *RecoveryPlanResponse) error
		DeleteRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, out *DeleteRecoveryPlanResponse) error
		GetRecoveryJobList(ctx context.Context, in *RecoveryJobListRequest, out *RecoveryJobListResponse) error
		AddRecoveryJob(ctx context.Context, in *AddRecoveryJobRequest, out *RecoveryJobResponse) error
		GetRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobResponse) error
		UpdateRecoveryJob(ctx context.Context, in *UpdateRecoveryJobRequest, out *RecoveryJobResponse) error
		DeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *DeleteRecoveryJobResponse) error
		MonitorRecoveryJob(ctx context.Context, stream server.Stream) error
		MonitorRecoveryTaskLogs(ctx context.Context, stream server.Stream) error
		MonitorRecoveryJobInstanceList(ctx context.Context, stream server.Stream) error
		MonitorRecoveryJobVolumeList(ctx context.Context, stream server.Stream) error
		MonitorRecoveryJobStatus(ctx context.Context, stream server.Stream) error
		PauseRecoveryJob(ctx context.Context, in *PauseRecoveryJobRequest, out *RecoveryJobMessageResponse) error
		ExtendRecoveryJobPauseTime(ctx context.Context, in *ExtendRecoveryJobPausingTimeRequest, out *RecoveryJobMessageResponse) error
		ResumeRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		CancelRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		DoSimulationJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		DoMigrationJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		RetryRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		ExtendRecoveryJobRollbackTime(ctx context.Context, in *ExtendRecoveryJobRollbackTimeRequest, out *RecoveryJobMessageResponse) error
		IgnoreRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		ConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		RetryConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		CancelConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error
		RetryRecoveryJob(ctx context.Context, in *RetryRecoveryJobRequest, out *RecoveryJobMessageResponse) error
		ForceDeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *DeleteRecoveryJobResponse) error
		GetProtectionGroupHistory(ctx context.Context, in *Empty, out *ProtectionGroupHistoryResponse) error
		GetRecoveryReportList(ctx context.Context, in *RecoveryReportListRequest, out *RecoveryReportListResponse) error
		GetRecoveryReport(ctx context.Context, in *RecoveryReportRequest, out *RecoveryReportResponse) error
		DeleteRecoveryReport(ctx context.Context, in *DeleteRecoveryReportRequest, out *DeleteRecoveryReportResponse) error
		GetClusterSummary(ctx context.Context, in *Empty, out *ClusterSummaryResponse) error
		GetProtectionGroupSummary(ctx context.Context, in *Empty, out *ProtectionGroupSummaryResponse) error
		GetInstanceSummary(ctx context.Context, in *Empty, out *InstanceSummaryResponse) error
		GetVolumeSummary(ctx context.Context, in *Empty, out *VolumeSummaryResponse) error
		GetJobSummary(ctx context.Context, in *JobSummaryRequest, out *JobSummaryResponse) error
		GetClusterRelationshipList(ctx context.Context, in *ClusterRelationshipListRequest, out *ClusterRelationshipListResponse) error
		GetRecoveryClusterHypervisorResources(ctx context.Context, in *RecoveryHypervisorResourceRequest, out *RecoveryHypervisorResourceResponse) error
		GetInstanceTemplateList(ctx context.Context, in *InstanceTemplateListRequest, out *InstanceTemplateListResponse) error
		GetInstanceTemplate(ctx context.Context, in *InstanceTemplateRequest, out *InstanceTemplateResponse) error
		AddInstanceTemplate(ctx context.Context, in *AddInstanceTemplateRequest, out *InstanceTemplateResponse) error
		DeleteInstanceTemplate(ctx context.Context, in *DeleteInstanceTemplateRequest, out *DeleteInstanceTemplateResponse) error
	}
	type DisasterRecoveryManager struct {
		disasterRecoveryManager
	}
	h := &disasterRecoveryManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetUnprotectedInstanceList",
		Path:    []string{"/recovery/unprotected-instances"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetProtectionGroupList",
		Path:    []string{"/recovery/groups"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.AddProtectionGroup",
		Path:    []string{"/recovery/groups"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetProtectionGroup",
		Path:    []string{"/recovery/groups/{group_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.UpdateProtectionGroup",
		Path:    []string{"/recovery/groups/{group_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DeleteProtectionGroup",
		Path:    []string{"/recovery/groups/{group_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetProtectionGroupSnapshotList",
		Path:    []string{"/recovery/groups/{group_id}/snapshots"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.AddProtectionGroupSnapshotQueue",
		Path:    []string{"/recovery/groups/{group_id}/snapshots"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryPlanList",
		Path:    []string{"/recovery/groups/{group_id}/plans"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.AddRecoveryPlan",
		Path:    []string{"/recovery/groups/{group_id}/plans"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryPlan",
		Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.UpdateRecoveryPlan",
		Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DeleteRecoveryPlan",
		Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryJobList",
		Path:    []string{"/recovery/groups/{group_id}/jobs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.AddRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.UpdateRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}"},
		Method:  []string{"PATCH"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DeleteRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.MonitorRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.MonitorRecoveryTaskLogs",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor/task-logs"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.MonitorRecoveryJobInstanceList",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor/instances"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.MonitorRecoveryJobVolumeList",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitor/volumes"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.MonitorRecoveryJobStatus",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/monitors"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.PauseRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/pause"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.ExtendRecoveryJobPauseTime",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/pause/extend"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.ResumeRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/resume"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.CancelRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/cancel"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DoSimulationJobRollback",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/simulation"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DoMigrationJobRollback",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/migration"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.RetryRecoveryJobRollback",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/retry"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.ExtendRecoveryJobRollbackTime",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/extend"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.IgnoreRecoveryJobRollback",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/rollback/ignore"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.ConfirmRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/confirm"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.RetryConfirmRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/confirm/retry"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.CancelConfirmRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/confirm/cancel"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.RetryRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/retry"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.ForceDeleteRecoveryJob",
		Path:    []string{"/recovery/groups/{group_id}/jobs/{job_id}/force-delete"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetProtectionGroupHistory",
		Path:    []string{"/recovery/history"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryReportList",
		Path:    []string{"/recovery/history/{group_id}/reports/{group_name}/list"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryReport",
		Path:    []string{"/recovery/history/{group_id}/reports/{result_id}/detail"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DeleteRecoveryReport",
		Path:    []string{"/recovery/history/{group_id}/reports/{result_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetClusterSummary",
		Path:    []string{"/recovery/dashboard/summary/clusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetProtectionGroupSummary",
		Path:    []string{"/recovery/dashboard/summary/groups"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetInstanceSummary",
		Path:    []string{"/recovery/dashboard/summary/instances"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetVolumeSummary",
		Path:    []string{"/recovery/dashboard/summary/volumes"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetJobSummary",
		Path:    []string{"/recovery/dashboard/summary/jobs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetClusterRelationshipList",
		Path:    []string{"/recovery/dashboard/cluster-relationships"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetRecoveryClusterHypervisorResources",
		Path:    []string{"/recovery/groups/{group_id}/plans/{plan_id}/hypervisor-resources"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetInstanceTemplateList",
		Path:    []string{"/recovery/templates"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.GetInstanceTemplate",
		Path:    []string{"/recovery/templates/{template_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.AddInstanceTemplate",
		Path:    []string{"/recovery/templates"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DisasterRecoveryManager.DeleteInstanceTemplate",
		Path:    []string{"/recovery/templates/{template_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&DisasterRecoveryManager{h}, opts...))
}

type disasterRecoveryManagerHandler struct {
	DisasterRecoveryManagerHandler
}

func (h *disasterRecoveryManagerHandler) CheckDeletableCluster(ctx context.Context, in *CheckDeletableClusterRequest, out *CheckDeletableClusterResponse) error {
	return h.DisasterRecoveryManagerHandler.CheckDeletableCluster(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetUnprotectedInstanceList(ctx context.Context, in *UnprotectedInstanceListRequest, out *UnprotectedInstanceListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetUnprotectedInstanceList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetProtectionGroupList(ctx context.Context, in *ProtectionGroupListRequest, out *ProtectionGroupListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetProtectionGroupList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) AddProtectionGroup(ctx context.Context, in *AddProtectionGroupRequest, out *ProtectionGroupResponse) error {
	return h.DisasterRecoveryManagerHandler.AddProtectionGroup(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetProtectionGroup(ctx context.Context, in *ProtectionGroupRequest, out *ProtectionGroupResponse) error {
	return h.DisasterRecoveryManagerHandler.GetProtectionGroup(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) UpdateProtectionGroup(ctx context.Context, in *UpdateProtectionGroupRequest, out *ProtectionGroupResponse) error {
	return h.DisasterRecoveryManagerHandler.UpdateProtectionGroup(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DeleteProtectionGroup(ctx context.Context, in *DeleteProtectionGroupRequest, out *DeleteProtectionGroupResponse) error {
	return h.DisasterRecoveryManagerHandler.DeleteProtectionGroup(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetProtectionGroupSnapshotList(ctx context.Context, in *ProtectionGroupSnapshotListRequest, out *ProtectionGroupSnapshotListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetProtectionGroupSnapshotList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) AddProtectionGroupSnapshotQueue(ctx context.Context, in *ProtectionGroupSnapshotRequest, out *ProtectionGroupSnapshotMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.AddProtectionGroupSnapshotQueue(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DeleteProtectionGroupSnapshot(ctx context.Context, in *DeleteProtectionGroupSnapshotRequest, out *DeleteProtectionGroupSnapshotResponse) error {
	return h.DisasterRecoveryManagerHandler.DeleteProtectionGroupSnapshot(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryPlanList(ctx context.Context, in *RecoveryPlanListRequest, out *RecoveryPlanListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryPlanList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) AddRecoveryPlan(ctx context.Context, in *AddRecoveryPlanRequest, out *RecoveryPlanResponse) error {
	return h.DisasterRecoveryManagerHandler.AddRecoveryPlan(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, out *RecoveryPlanResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryPlan(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) UpdateRecoveryPlan(ctx context.Context, in *UpdateRecoveryPlanRequest, out *RecoveryPlanResponse) error {
	return h.DisasterRecoveryManagerHandler.UpdateRecoveryPlan(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DeleteRecoveryPlan(ctx context.Context, in *RecoveryPlanRequest, out *DeleteRecoveryPlanResponse) error {
	return h.DisasterRecoveryManagerHandler.DeleteRecoveryPlan(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryJobList(ctx context.Context, in *RecoveryJobListRequest, out *RecoveryJobListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryJobList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) AddRecoveryJob(ctx context.Context, in *AddRecoveryJobRequest, out *RecoveryJobResponse) error {
	return h.DisasterRecoveryManagerHandler.AddRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) UpdateRecoveryJob(ctx context.Context, in *UpdateRecoveryJobRequest, out *RecoveryJobResponse) error {
	return h.DisasterRecoveryManagerHandler.UpdateRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *DeleteRecoveryJobResponse) error {
	return h.DisasterRecoveryManagerHandler.DeleteRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) MonitorRecoveryJob(ctx context.Context, stream server.Stream) error {
	m := new(MonitorRecoveryJobRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DisasterRecoveryManagerHandler.MonitorRecoveryJob(ctx, m, &disasterRecoveryManagerMonitorRecoveryJobStream{stream})
}

type DisasterRecoveryManager_MonitorRecoveryJobStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MonitorRecoveryJobResponse) error
}

type disasterRecoveryManagerMonitorRecoveryJobStream struct {
	stream server.Stream
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStream) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStream) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStream) Send(m *MonitorRecoveryJobResponse) error {
	return x.stream.Send(m)
}

func (h *disasterRecoveryManagerHandler) MonitorRecoveryTaskLogs(ctx context.Context, stream server.Stream) error {
	m := new(MonitorRecoveryJobRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DisasterRecoveryManagerHandler.MonitorRecoveryTaskLogs(ctx, m, &disasterRecoveryManagerMonitorRecoveryTaskLogsStream{stream})
}

type DisasterRecoveryManager_MonitorRecoveryTaskLogsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MonitorRecoveryTaskLogsResponse) error
}

type disasterRecoveryManagerMonitorRecoveryTaskLogsStream struct {
	stream server.Stream
}

func (x *disasterRecoveryManagerMonitorRecoveryTaskLogsStream) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerMonitorRecoveryTaskLogsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerMonitorRecoveryTaskLogsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryTaskLogsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryTaskLogsStream) Send(m *MonitorRecoveryTaskLogsResponse) error {
	return x.stream.Send(m)
}

func (h *disasterRecoveryManagerHandler) MonitorRecoveryJobInstanceList(ctx context.Context, stream server.Stream) error {
	m := new(MonitorRecoveryJobRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DisasterRecoveryManagerHandler.MonitorRecoveryJobInstanceList(ctx, m, &disasterRecoveryManagerMonitorRecoveryJobInstanceListStream{stream})
}

type DisasterRecoveryManager_MonitorRecoveryJobInstanceListStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MonitorRecoveryJobInstanceListResponse) error
}

type disasterRecoveryManagerMonitorRecoveryJobInstanceListStream struct {
	stream server.Stream
}

func (x *disasterRecoveryManagerMonitorRecoveryJobInstanceListStream) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobInstanceListStream) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobInstanceListStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobInstanceListStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobInstanceListStream) Send(m *MonitorRecoveryJobInstanceListResponse) error {
	return x.stream.Send(m)
}

func (h *disasterRecoveryManagerHandler) MonitorRecoveryJobVolumeList(ctx context.Context, stream server.Stream) error {
	m := new(MonitorRecoveryJobRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DisasterRecoveryManagerHandler.MonitorRecoveryJobVolumeList(ctx, m, &disasterRecoveryManagerMonitorRecoveryJobVolumeListStream{stream})
}

type DisasterRecoveryManager_MonitorRecoveryJobVolumeListStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MonitorRecoveryJobVolumeListResponse) error
}

type disasterRecoveryManagerMonitorRecoveryJobVolumeListStream struct {
	stream server.Stream
}

func (x *disasterRecoveryManagerMonitorRecoveryJobVolumeListStream) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobVolumeListStream) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobVolumeListStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobVolumeListStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobVolumeListStream) Send(m *MonitorRecoveryJobVolumeListResponse) error {
	return x.stream.Send(m)
}

func (h *disasterRecoveryManagerHandler) MonitorRecoveryJobStatus(ctx context.Context, stream server.Stream) error {
	m := new(MonitorRecoveryJobRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DisasterRecoveryManagerHandler.MonitorRecoveryJobStatus(ctx, m, &disasterRecoveryManagerMonitorRecoveryJobStatusStream{stream})
}

type DisasterRecoveryManager_MonitorRecoveryJobStatusStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MonitorRecoveryJobStatusResponse) error
}

type disasterRecoveryManagerMonitorRecoveryJobStatusStream struct {
	stream server.Stream
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStatusStream) Close() error {
	return x.stream.Close()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStatusStream) Context() context.Context {
	return x.stream.Context()
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStatusStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStatusStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *disasterRecoveryManagerMonitorRecoveryJobStatusStream) Send(m *MonitorRecoveryJobStatusResponse) error {
	return x.stream.Send(m)
}

func (h *disasterRecoveryManagerHandler) PauseRecoveryJob(ctx context.Context, in *PauseRecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.PauseRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) ExtendRecoveryJobPauseTime(ctx context.Context, in *ExtendRecoveryJobPausingTimeRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.ExtendRecoveryJobPauseTime(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) ResumeRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.ResumeRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) CancelRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.CancelRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DoSimulationJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.DoSimulationJobRollback(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DoMigrationJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.DoMigrationJobRollback(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) RetryRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.RetryRecoveryJobRollback(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) ExtendRecoveryJobRollbackTime(ctx context.Context, in *ExtendRecoveryJobRollbackTimeRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.ExtendRecoveryJobRollbackTime(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) IgnoreRecoveryJobRollback(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.IgnoreRecoveryJobRollback(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) ConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.ConfirmRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) RetryConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.RetryConfirmRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) CancelConfirmRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.CancelConfirmRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) RetryRecoveryJob(ctx context.Context, in *RetryRecoveryJobRequest, out *RecoveryJobMessageResponse) error {
	return h.DisasterRecoveryManagerHandler.RetryRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) ForceDeleteRecoveryJob(ctx context.Context, in *RecoveryJobRequest, out *DeleteRecoveryJobResponse) error {
	return h.DisasterRecoveryManagerHandler.ForceDeleteRecoveryJob(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetProtectionGroupHistory(ctx context.Context, in *Empty, out *ProtectionGroupHistoryResponse) error {
	return h.DisasterRecoveryManagerHandler.GetProtectionGroupHistory(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryReportList(ctx context.Context, in *RecoveryReportListRequest, out *RecoveryReportListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryReportList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryReport(ctx context.Context, in *RecoveryReportRequest, out *RecoveryReportResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryReport(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DeleteRecoveryReport(ctx context.Context, in *DeleteRecoveryReportRequest, out *DeleteRecoveryReportResponse) error {
	return h.DisasterRecoveryManagerHandler.DeleteRecoveryReport(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetClusterSummary(ctx context.Context, in *Empty, out *ClusterSummaryResponse) error {
	return h.DisasterRecoveryManagerHandler.GetClusterSummary(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetProtectionGroupSummary(ctx context.Context, in *Empty, out *ProtectionGroupSummaryResponse) error {
	return h.DisasterRecoveryManagerHandler.GetProtectionGroupSummary(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetInstanceSummary(ctx context.Context, in *Empty, out *InstanceSummaryResponse) error {
	return h.DisasterRecoveryManagerHandler.GetInstanceSummary(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetVolumeSummary(ctx context.Context, in *Empty, out *VolumeSummaryResponse) error {
	return h.DisasterRecoveryManagerHandler.GetVolumeSummary(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetJobSummary(ctx context.Context, in *JobSummaryRequest, out *JobSummaryResponse) error {
	return h.DisasterRecoveryManagerHandler.GetJobSummary(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetClusterRelationshipList(ctx context.Context, in *ClusterRelationshipListRequest, out *ClusterRelationshipListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetClusterRelationshipList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetRecoveryClusterHypervisorResources(ctx context.Context, in *RecoveryHypervisorResourceRequest, out *RecoveryHypervisorResourceResponse) error {
	return h.DisasterRecoveryManagerHandler.GetRecoveryClusterHypervisorResources(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetInstanceTemplateList(ctx context.Context, in *InstanceTemplateListRequest, out *InstanceTemplateListResponse) error {
	return h.DisasterRecoveryManagerHandler.GetInstanceTemplateList(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) GetInstanceTemplate(ctx context.Context, in *InstanceTemplateRequest, out *InstanceTemplateResponse) error {
	return h.DisasterRecoveryManagerHandler.GetInstanceTemplate(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) AddInstanceTemplate(ctx context.Context, in *AddInstanceTemplateRequest, out *InstanceTemplateResponse) error {
	return h.DisasterRecoveryManagerHandler.AddInstanceTemplate(ctx, in, out)
}

func (h *disasterRecoveryManagerHandler) DeleteInstanceTemplate(ctx context.Context, in *DeleteInstanceTemplateRequest, out *DeleteInstanceTemplateResponse) error {
	return h.DisasterRecoveryManagerHandler.DeleteInstanceTemplate(ctx, in, out)
}
