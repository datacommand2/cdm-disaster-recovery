// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/schedule.proto

package scheduler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Scheduler service

func NewSchedulerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Scheduler service

type SchedulerService interface {
	GetSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error)
	CreateSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error)
	UpdateSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error)
	DeleteSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*Empty, error)
	CalculateNextRuntime(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleNextRuntimeResponse, error)
}

type schedulerService struct {
	c    client.Client
	name string
}

func NewSchedulerService(name string, c client.Client) SchedulerService {
	return &schedulerService{
		c:    c,
		name: name,
	}
}

func (c *schedulerService) GetSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error) {
	req := c.c.NewRequest(c.name, "Scheduler.GetSchedule", in)
	out := new(ScheduleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) CreateSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error) {
	req := c.c.NewRequest(c.name, "Scheduler.CreateSchedule", in)
	out := new(ScheduleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) UpdateSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error) {
	req := c.c.NewRequest(c.name, "Scheduler.UpdateSchedule", in)
	out := new(ScheduleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) DeleteSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Scheduler.DeleteSchedule", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) CalculateNextRuntime(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleNextRuntimeResponse, error) {
	req := c.c.NewRequest(c.name, "Scheduler.CalculateNextRuntime", in)
	out := new(ScheduleNextRuntimeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerHandler interface {
	GetSchedule(context.Context, *ScheduleRequest, *ScheduleResponse) error
	CreateSchedule(context.Context, *ScheduleRequest, *ScheduleResponse) error
	UpdateSchedule(context.Context, *ScheduleRequest, *ScheduleResponse) error
	DeleteSchedule(context.Context, *ScheduleRequest, *Empty) error
	CalculateNextRuntime(context.Context, *ScheduleRequest, *ScheduleNextRuntimeResponse) error
}

func RegisterSchedulerHandler(s server.Server, hdlr SchedulerHandler, opts ...server.HandlerOption) error {
	type scheduler interface {
		GetSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error
		CreateSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error
		UpdateSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error
		DeleteSchedule(ctx context.Context, in *ScheduleRequest, out *Empty) error
		CalculateNextRuntime(ctx context.Context, in *ScheduleRequest, out *ScheduleNextRuntimeResponse) error
	}
	type Scheduler struct {
		scheduler
	}
	h := &schedulerHandler{hdlr}
	return s.Handle(s.NewHandler(&Scheduler{h}, opts...))
}

type schedulerHandler struct {
	SchedulerHandler
}

func (h *schedulerHandler) GetSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error {
	return h.SchedulerHandler.GetSchedule(ctx, in, out)
}

func (h *schedulerHandler) CreateSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error {
	return h.SchedulerHandler.CreateSchedule(ctx, in, out)
}

func (h *schedulerHandler) UpdateSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error {
	return h.SchedulerHandler.UpdateSchedule(ctx, in, out)
}

func (h *schedulerHandler) DeleteSchedule(ctx context.Context, in *ScheduleRequest, out *Empty) error {
	return h.SchedulerHandler.DeleteSchedule(ctx, in, out)
}

func (h *schedulerHandler) CalculateNextRuntime(ctx context.Context, in *ScheduleRequest, out *ScheduleNextRuntimeResponse) error {
	return h.SchedulerHandler.CalculateNextRuntime(ctx, in, out)
}
