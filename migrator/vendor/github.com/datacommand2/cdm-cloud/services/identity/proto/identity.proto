syntax = "proto3";

package identity;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

service Identity {
    // 사용자의 상세정보를 반환한다.
    rpc GetUser(GetUserRequest) returns (UserResponse) {
        option (google.api.http) = { get: "/identity/users/{user_id}" };
    }

    // 간소화 된 사용자 상세정보를 반환한다.
    rpc GetSimpleUser(GetSimpleUserRequest) returns (SimpleUserResponse) {}

    // 사용자 계정을 추가한다.
    rpc AddUser(AddUserRequest) returns (AddUserResponse) {
        option (google.api.http) = { post: "/identity/users"; body:"*"; };
    }

    // 사용자 계정을 수정한다.
    rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
        option (google.api.http) = { patch: "/identity/users/{user_id}"; body:"*"; };
    }

    // 사용자 계정을 삭제한다.
    rpc DeleteUser(DeleteUserRequest) returns (MessageResponse) {
        option (google.api.http) = { delete: "/identity/users/{user_id}"; };
    }

    // 사용자 계정 목록을 반환한다.
    rpc GetUsers(GetUsersRequest) returns (UsersResponse) {
        option (google.api.http) = { get: "/identity/users"; };
    }

    // 사용자 비밀번호를 수정한다.
    rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (MessageResponse) {
        option (google.api.http) = { post: "/identity/users/{user_id}/password"; body:"*"; };
    }

    // 사용자 비밀번호를 초기화한다.
    rpc ResetUserPassword(ResetUserPasswordRequest) returns (UserPasswordResponse) {
        option (google.api.http) = { post: "/identity/users/{user_id}/password-reset"; };
    }

    // 사용자 그룹 목록을 조회한다.
    rpc GetGroups(GetGroupsRequest) returns (GroupsResponse) {
        option (google.api.http) = { get: "/identity/groups"; };
    }

    // 사용자 그룹을 조회한다.
    rpc GetGroup(GetGroupRequest) returns (GroupResponse) {
        option (google.api.http) = { get: "/identity/groups/{group_id}"; };
    }

    // 사용자 그룹을 추가한다.
    rpc AddGroup(AddGroupRequest) returns (GroupResponse) {
        option (google.api.http) = { post: "/identity/groups"; body:"*"; };
    }

    // 사용자 그룹을 수정한다.
    rpc UpdateGroup(UpdateGroupRequest) returns (GroupResponse) {
        option (google.api.http) = { patch: "/identity/groups/{group_id}"; body:"*"; };
    }

    // 사용자 그룹을 삭제한다.
    rpc DeleteGroup(DeleteGroupRequest) returns (MessageResponse) {
        option (google.api.http) = { delete: "/identity/groups/{group_id}"; };
    }

    // 사용자 그룹 사용자 목록 수정
    rpc SetGroupUsers(SetGroupUsersRequest) returns (UsersResponse) {
        option (google.api.http) = { put: "/identity/groups/{group_id}/users" };
    }

    // 솔루션 역할 목록을 조회한다.
    rpc GetRoles(GetRolesRequest) returns (RolesResponse) {
        option (google.api.http) = { get: "/identity/roles"; };
    }

    // 로그인
    rpc Login(LoginRequest) returns (UserResponse) {
        option (google.api.http) = { post: "/identity/auth"; body:"*"; };
    }

    // 로그아웃
    rpc Logout(Empty) returns (MessageResponse) {
        option (google.api.http) = { delete: "/identity/auth"; };
    }

    // 세션 유효성 확인
    rpc VerifySession(Empty) returns (UserResponse) {
        option (google.api.http) = { get: "/identity/sessions/check"; };
    }

    // 강제 로그아웃
    rpc RevokeSession(RevokeSessionRequest) returns (MessageResponse) {
        option (google.api.http) = { delete: "/identity/sessions/{session_key}"; };
    }

    //  사용자 인증 설정 변경
    rpc SetConfig(ConfigRequest) returns (ConfigResponse) {
        option (google.api.http) = { put: "/identity/config"; body:"*"; };
    }

    // 사용자 인증 설정 조회
    rpc GetConfig(Empty) returns (ConfigResponse) {
        option (google.api.http) = { get: "/identity/config"; };
    }

    // 사용자 인가 여부 확인
    rpc CheckAuthorization(CheckAuthorizationRequest) returns (MessageResponse) {}

    // 테넌트 목록 조회
    rpc GetTenants(TenantsRequest) returns (TenantsResponse) {
        option (google.api.http) = { get: "/tenants"; };
    }

    // 테넌트 추가
    rpc AddTenant(AddTenantRequest) returns (TenantResponse) {
        option (google.api.http) = { post: "/tenants"; };
    }

    // 테넌트 상세 조회
    rpc GetTenant(TenantRequest) returns (TenantResponse) {
        option (google.api.http) = { get: "/tenants/{tenant_id}"; };
    }

    // 테넌트 정보 수정
    rpc UpdateTenant(UpdateTenantRequest) returns (TenantResponse) {
        option (google.api.http) = { patch: "/tenants/{tenant_id}"; };
    }

    //  테넌트 활성화
    rpc ActivateTenant(TenantRequest) returns (TenantResponse) {
        option (google.api.http) = { post: "/tenants/{tenant_id}/activate"; };
    }

    // 테넌트 비활성화
    rpc DeactivateTenant(TenantRequest) returns (TenantResponse) {
        option (google.api.http) = { post: "/tenants/{tenant_id}/deactivate"; };
    }
}

message Empty {
}

message Message {
    string code = 1;
    string contents = 2;
}

message Group {
    uint64 id = 1;
    Tenant tenant = 2;
    string name = 3;
    string remarks = 4;
    uint64 created_at = 5;
    uint64 updated_at = 6;
}

message Role {
    uint64 id = 1;
    string solution = 2;
    string role = 3;
}

message User {
    uint64 id = 1;
    Tenant tenant = 2;
    string account = 3;
    repeated Role roles = 4;
    repeated Group groups = 5;
    string name = 6;
    string department = 7;
    string position = 8;
    string email = 9;
    string contact = 10;
    string language_set = 11;
    string timezone = 12;
    int64 created_at = 13;
    int64 last_logged_in_at = 14;
    int64 updated_at = 15;
    int64 password_updated_at = 16;
    bool password_update_flag = 17;
    Session session = 18;
}

message SimpleUser {
    uint64 id = 1;
    Tenant tenant = 2;
    string account = 3;
    repeated Role roles = 4;
    repeated Group groups = 5;
    string name = 6;
    string department = 7;
    string position = 8;
    string email = 9;
    string contact = 10;
}

message GetUserRequest {
    uint64 user_id = 1;
}

message GetSimpleUserRequest {
    uint64 user_id = 1;
}

message AddUserRequest {
    User user = 1;
}

message AddUserResponse {
    User user = 1;
    string password = 2;
    Message message = 3;
}

message UpdateUserRequest {
    uint64 user_id = 1;
    User user = 2;
}

message DeleteUserRequest {
    uint64 user_id = 1;
}

message UserResponse {
    User user = 1;
    Message message = 2;
}

message SimpleUserResponse {
    SimpleUser simple_user = 1;
    Message message = 2;
}

message GetUsersRequest {
    google.protobuf.UInt64Value limit = 1;
    google.protobuf.UInt64Value offset = 2;
    string solution = 3;
    string role = 4;
    uint64 group_id = 5;
    string name = 6;
    string department = 7;
    string position = 8;
    bool   login_only = 9;
    uint64 exclude_group_id = 10;
}

message Pagination {
    google.protobuf.UInt64Value page = 1;
    google.protobuf.UInt64Value total_page = 2;
    google.protobuf.UInt64Value total_items = 3;
}

message UsersResponse {
    repeated User users = 1;
    Pagination pagination = 2;
    Message message = 3;
}

message UpdateUserPasswordRequest {
    uint64  user_id = 1;
    string  current_password = 2;
    string  new_password = 3;
}

message ResetUserPasswordRequest {
    uint64 user_id = 1;
}

message UserPasswordResponse {
    string password = 1;
    Message message = 2;
}

message GetGroupsRequest {
    string name = 1;
}

message GroupsResponse {
    repeated Group groups = 1;
    Message message = 2;
}

message GetGroupRequest {
    uint64 group_id = 1;
}

message AddGroupRequest {
    Group group = 1;
}

message UpdateGroupRequest {
    uint64 group_id = 1;
    Group group = 2;
}

message GroupResponse {
    Group group = 1;
    Message message = 2;
}

message DeleteGroupRequest {
    uint64 group_id = 1;
}

message SetGroupUsersRequest{
    uint64  group_id = 1;
    repeated User users = 2;
}

message GetRolesRequest {
    string solution = 1;
    string role = 2;
}

message RolesResponse {
    repeated Role roles = 1;
    Message message = 2;
}

message LoginRequest {
    string account = 1;
    string password = 2;
    bool force = 3;
}

message Session {
    string key = 1;
}

message RevokeSessionRequest {
    string session_key = 1;
}

message Config {
    google.protobuf.StringValue global_timezone = 1;
    google.protobuf.StringValue global_language_set = 2;
    google.protobuf.BoolValue user_login_restriction_enable = 3;
    google.protobuf.UInt64Value user_login_restriction_try_count = 4;
    google.protobuf.Int64Value user_login_restriction_time = 5;
    google.protobuf.BoolValue user_reuse_old_password = 6;
    google.protobuf.UInt64Value user_password_change_cycle = 7;
    google.protobuf.UInt64Value user_session_timeout = 8;
}
message ConfigRequest {
    Config identity_config = 1;
}

message ConfigResponse {
    Config identity_config = 1;
    Message message = 2;
}

message UserLoginRestriction {
    uint64 try_count = 1;
    uint64 restriction_time = 2;
}

message Solution {
    string solution = 1;
}

message CheckAuthorizationRequest {
    string endpoint = 1;
}

message Tenant {
    uint64 id = 1;
    string name = 2;
    google.protobuf.BoolValue use_flag = 3;
    repeated Solution solutions = 4;
    string remarks = 5;
    int64 created_at = 6;
    int64 updated_at = 7;
}

message TenantsRequest {
    string name = 1;
}

message TenantsResponse {
    repeated Tenant tenants = 1;
    Message message = 2;
}

message TenantRequest {
    uint64 tenant_id = 1;
}

message AddTenantRequest {
    Tenant tenant = 1;
}

message TenantResponse {
    Tenant tenant = 1;
    Message message = 2;
}

message UpdateTenantRequest {
    uint64 tenant_id = 1;
    Tenant tenant = 2;
}

message MessageResponse{
    Message message = 1;
}